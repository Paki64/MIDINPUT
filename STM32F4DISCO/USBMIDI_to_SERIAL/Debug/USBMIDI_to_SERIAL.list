
USBMIDI_to_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008588  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008718  08008718  00009718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008784  08008784  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800878c  0800878c  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800878c  0800878c  0000978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008790  08008790  00009790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008794  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  2000007c  08008810  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  08008810  0000aa94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001166c  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec7  00000000  00000000  0001b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097f  00000000  00000000  0001f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227c6  00000000  00000000  0001fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001186d  00000000  00000000  000423bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8155  00000000  00000000  00053c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bd7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  0011bdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008700 	.word	0x08008700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008700 	.word	0x08008700

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fa46 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80c 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8c8 	bl	8000710 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000580:	f007 f8f6 	bl	8007770 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f870 	bl	8000668 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000588:	f000 f898 	bl	80006bc <MX_USART6_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800058c:	f007 f91c 	bl	80077c8 <MX_USB_HOST_Process>
 8000590:	e7fc      	b.n	800058c <main+0x1c>
	...

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 fcd2 	bl	8007f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fe84 	bl	8003328 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 f8c3 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f003 f8e5 	bl	8003818 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 f8ac 	bl	80007b0 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f003 fada 	bl	8003c58 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f881 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000098 	.word	0x20000098
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART6_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART6_UART_Init+0x4c>)
 80006f4:	f003 fab0 	bl	8003c58 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f857 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000e0 	.word	0x200000e0
 800070c:	40011400 	.word	0x40011400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000780:	f000 fc84 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000784:	2301      	movs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x9c>)
 800079c:	f000 fada 	bl	8000d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007fe:	2007      	movs	r0, #7
 8000800:	f000 fa66 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a32      	ldr	r2, [pc, #200]	@ (80008f8 <HAL_UART_MspInit+0xe8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12c      	bne.n	800088c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <HAL_UART_MspInit+0xec>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a30      	ldr	r2, [pc, #192]	@ (80008fc <HAL_UART_MspInit+0xec>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <HAL_UART_MspInit+0xec>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <HAL_UART_MspInit+0xec>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a29      	ldr	r2, [pc, #164]	@ (80008fc <HAL_UART_MspInit+0xec>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <HAL_UART_MspInit+0xec>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087a:	2307      	movs	r3, #7
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481e      	ldr	r0, [pc, #120]	@ (8000900 <HAL_UART_MspInit+0xf0>)
 8000886:	f000 fa65 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800088a:	e030      	b.n	80008ee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <HAL_UART_MspInit+0xf4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12b      	bne.n	80008ee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_UART_MspInit+0xec>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <HAL_UART_MspInit+0xec>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_UART_MspInit+0xec>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f003 0320 	and.w	r3, r3, #32
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_UART_MspInit+0xec>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <HAL_UART_MspInit+0xec>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_UART_MspInit+0xec>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ce:	23c0      	movs	r3, #192	@ 0xc0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80008de:	2308      	movs	r3, #8
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4807      	ldr	r0, [pc, #28]	@ (8000908 <HAL_UART_MspInit+0xf8>)
 80008ea:	f000 fa33 	bl	8000d54 <HAL_GPIO_Init>
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	@ 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40011400 	.word	0x40011400
 8000908:	40020800 	.word	0x40020800

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	bf00      	nop
 8000920:	e7fd      	b.n	800091e <HardFault_Handler+0x4>

08000922 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000926:	bf00      	nop
 8000928:	e7fd      	b.n	8000926 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <BusFault_Handler+0x4>

08000932 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f89e 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <OTG_FS_IRQHandler+0x10>)
 8000976:	f000 fe83 	bl	8001680 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000568 	.word	0x20000568

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <SystemInit+0x28>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <SystemInit+0x28>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SystemInit+0x28>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009b6:	e003      	b.n	80009c0 <LoopCopyDataInit>

080009b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009be:	3104      	adds	r1, #4

080009c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009c8:	d3f6      	bcc.n	80009b8 <CopyDataInit>
  ldr  r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009cc:	e002      	b.n	80009d4 <LoopFillZerobss>

080009ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d0:	f842 3b04 	str.w	r3, [r2], #4

080009d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009d8:	d3f9      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009da:	f7ff ffd3 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f007 facd 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e2:	f7ff fdc5 	bl	8000570 <main>
  bx  lr    
 80009e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009ec:	08008794 	.word	0x08008794
  ldr  r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009f4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80009f8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80009fc:	20000a94 	.word	0x20000a94

08000a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <HAL_Init+0x40>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_Init+0x40>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <HAL_Init+0x40>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f94f 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fec2 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f967 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f92f 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	@ (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000128 	.word	0x20000128

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000128 	.word	0x20000128

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	@ (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	@ (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	@ 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	@ 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff3e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff31 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e16b      	b.n	8001048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 815a 	bne.w	8001042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80b4 	beq.w	8001042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b60      	ldr	r3, [pc, #384]	@ (8001060 <HAL_GPIO_Init+0x30c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8001060 <HAL_GPIO_Init+0x30c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b5d      	ldr	r3, [pc, #372]	@ (8001060 <HAL_GPIO_Init+0x30c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8001064 <HAL_GPIO_Init+0x310>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	@ (8001068 <HAL_GPIO_Init+0x314>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x226>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a51      	ldr	r2, [pc, #324]	@ (800106c <HAL_GPIO_Init+0x318>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x222>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a50      	ldr	r2, [pc, #320]	@ (8001070 <HAL_GPIO_Init+0x31c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x21e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	@ (8001074 <HAL_GPIO_Init+0x320>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x21a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001078 <HAL_GPIO_Init+0x324>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x216>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	@ (800107c <HAL_GPIO_Init+0x328>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x212>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001080 <HAL_GPIO_Init+0x32c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	@ (8001084 <HAL_GPIO_Init+0x330>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x20a>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00e      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f5e:	2308      	movs	r3, #8
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	@ (8001064 <HAL_GPIO_Init+0x310>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a27      	ldr	r2, [pc, #156]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <HAL_GPIO_Init+0x334>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_GPIO_Init+0x334>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_GPIO_Init+0x334>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f ae90 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40021400 	.word	0x40021400
 8001080:	40021800 	.word	0x40021800
 8001084:	40021c00 	.word	0x40021c00
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e059      	b.n	8001184 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f006 fba4 	bl	8007838 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010fe:	d102      	bne.n	8001106 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fa25 	bl	800455a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7c1a      	ldrb	r2, [r3, #16]
 8001118:	f88d 2000 	strb.w	r2, [sp]
 800111c:	3304      	adds	r3, #4
 800111e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001120:	f003 f9a6 	bl	8004470 <USB_CoreInit>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2202      	movs	r2, #2
 800112e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e026      	b.n	8001184 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2101      	movs	r1, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f003 fa1d 	bl	800457c <USB_SetCurrentMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e017      	b.n	8001184 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7c1a      	ldrb	r2, [r3, #16]
 800115c:	f88d 2000 	strb.w	r2, [sp]
 8001160:	3304      	adds	r3, #4
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	f003 fbc0 	bl	80048e8 <USB_HostInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2202      	movs	r2, #2
 8001172:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e004      	b.n	8001184 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b08b      	sub	sp, #44	@ 0x2c
 8001190:	af04      	add	r7, sp, #16
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	70fb      	strb	r3, [r7, #3]
 800119e:	460b      	mov	r3, r1
 80011a0:	70bb      	strb	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80011a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_HCD_HC_Init+0x2c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e09d      	b.n	80012f4 <HAL_HCD_HC_Init+0x168>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3319      	adds	r3, #25
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011d4:	78fa      	ldrb	r2, [r7, #3]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3314      	adds	r3, #20
 80011e4:	787a      	ldrb	r2, [r7, #1]
 80011e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011e8:	78fa      	ldrb	r2, [r7, #3]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011fc:	78fa      	ldrb	r2, [r7, #3]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3326      	adds	r3, #38	@ 0x26
 800120c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001210:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	78bb      	ldrb	r3, [r7, #2]
 8001216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3316      	adds	r3, #22
 800122a:	4602      	mov	r2, r0
 800122c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fbc8 	bl	80019c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da0a      	bge.n	8001256 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001240:	78fa      	ldrb	r2, [r7, #3]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3317      	adds	r3, #23
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e009      	b.n	800126a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001256:	78fa      	ldrb	r2, [r7, #3]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	3317      	adds	r3, #23
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fc9e 	bl	8004bb0 <USB_GetHostSpeed>
 8001274:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800127a:	2b01      	cmp	r3, #1
 800127c:	d10b      	bne.n	8001296 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800127e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_HCD_HC_Init+0x10a>
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001290:	d901      	bls.n	8001296 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001292:	23bc      	movs	r3, #188	@ 0xbc
 8001294:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	3318      	adds	r3, #24
 80012a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80012aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	b298      	uxth	r0, r3
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3328      	adds	r3, #40	@ 0x28
 80012c0:	4602      	mov	r2, r0
 80012c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	787c      	ldrb	r4, [r7, #1]
 80012ce:	78ba      	ldrb	r2, [r7, #2]
 80012d0:	78f9      	ldrb	r1, [r7, #3]
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4623      	mov	r3, r4
 80012e2:	f003 fc8d 	bl	8004c00 <USB_HC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_HCD_HC_Halt+0x1e>
 8001316:	2302      	movs	r3, #2
 8001318:	e00f      	b.n	800133a <HAL_HCD_HC_Halt+0x3e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f81f 	bl	800536e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	460b      	mov	r3, r1
 8001358:	70bb      	strb	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3317      	adds	r3, #23
 800136e:	78ba      	ldrb	r2, [r7, #2]
 8001370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	3326      	adds	r3, #38	@ 0x26
 8001382:	787a      	ldrb	r2, [r7, #1]
 8001384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001386:	7c3b      	ldrb	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d114      	bne.n	80013b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	332a      	adds	r3, #42	@ 0x2a
 800139c:	2203      	movs	r2, #3
 800139e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	3319      	adds	r3, #25
 80013b0:	7f3a      	ldrb	r2, [r7, #28]
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e009      	b.n	80013ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	332a      	adds	r3, #42	@ 0x2a
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	f200 8102 	bhi.w	80015d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80013d2:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080015c1 	.word	0x080015c1
 80013e0:	080014ad 	.word	0x080014ad
 80013e4:	08001537 	.word	0x08001537
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80013e8:	7c3b      	ldrb	r3, [r7, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 80f5 	bne.w	80015da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80013f0:	78bb      	ldrb	r3, [r7, #2]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d12d      	bne.n	8001452 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80013f6:	8b3b      	ldrh	r3, [r7, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	333d      	adds	r3, #61	@ 0x3d
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	333d      	adds	r3, #61	@ 0x3d
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10a      	bne.n	800143c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	332a      	adds	r3, #42	@ 0x2a
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800143a:	e0ce      	b.n	80015da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	332a      	adds	r3, #42	@ 0x2a
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
      break;
 8001450:	e0c3      	b.n	80015da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	331a      	adds	r3, #26
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 80b8 	bne.w	80015da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	333c      	adds	r3, #60	@ 0x3c
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10a      	bne.n	8001496 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	332a      	adds	r3, #42	@ 0x2a
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
      break;
 8001494:	e0a1      	b.n	80015da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	332a      	adds	r3, #42	@ 0x2a
 80014a6:	2202      	movs	r2, #2
 80014a8:	701a      	strb	r2, [r3, #0]
      break;
 80014aa:	e096      	b.n	80015da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80014ac:	78bb      	ldrb	r3, [r7, #2]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d120      	bne.n	80014f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	333d      	adds	r3, #61	@ 0x3d
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10a      	bne.n	80014de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	332a      	adds	r3, #42	@ 0x2a
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014dc:	e07e      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	332a      	adds	r3, #42	@ 0x2a
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
      break;
 80014f2:	e073      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	333c      	adds	r3, #60	@ 0x3c
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10a      	bne.n	8001520 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	332a      	adds	r3, #42	@ 0x2a
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
      break;
 800151e:	e05d      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	332a      	adds	r3, #42	@ 0x2a
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]
      break;
 8001534:	e052      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001536:	78bb      	ldrb	r3, [r7, #2]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d120      	bne.n	800157e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	333d      	adds	r3, #61	@ 0x3d
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	332a      	adds	r3, #42	@ 0x2a
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001566:	e039      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	332a      	adds	r3, #42	@ 0x2a
 8001578:	2202      	movs	r2, #2
 800157a:	701a      	strb	r2, [r3, #0]
      break;
 800157c:	e02e      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	333c      	adds	r3, #60	@ 0x3c
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10a      	bne.n	80015aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	332a      	adds	r3, #42	@ 0x2a
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
      break;
 80015a8:	e018      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	332a      	adds	r3, #42	@ 0x2a
 80015ba:	2202      	movs	r2, #2
 80015bc:	701a      	strb	r2, [r3, #0]
      break;
 80015be:	e00d      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	332a      	adds	r3, #42	@ 0x2a
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
      break;
 80015d4:	e002      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80015d6:	bf00      	nop
 80015d8:	e000      	b.n	80015dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80015da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	332c      	adds	r3, #44	@ 0x2c
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	8b39      	ldrh	r1, [r7, #24]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4403      	add	r3, r0
 8001600:	3334      	adds	r3, #52	@ 0x34
 8001602:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	334c      	adds	r3, #76	@ 0x4c
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3338      	adds	r3, #56	@ 0x38
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3315      	adds	r3, #21
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	334d      	adds	r3, #77	@ 0x4d
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	3310      	adds	r3, #16
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	1d19      	adds	r1, r3, #4
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	799b      	ldrb	r3, [r3, #6]
 800166e:	461a      	mov	r2, r3
 8001670:	f003 fbf2 	bl	8004e58 <USB_HC_StartXfer>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop

08001680 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f8e6 	bl	8004868 <USB_GetMode>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 80fb 	bne.w	800189a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 f8a9 	bl	8004800 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80f1 	beq.w	8001898 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f8a0 	bl	8004800 <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016ca:	d104      	bne.n	80016d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f890 	bl	8004800 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016ea:	d104      	bne.n	80016f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f880 	bl	8004800 <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001706:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800170a:	d104      	bne.n	8001716 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001714:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f870 	bl	8004800 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d103      	bne.n	8001732 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2202      	movs	r2, #2
 8001730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f862 	bl	8004800 <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001746:	d120      	bne.n	800178a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001750:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d113      	bne.n	800178a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001762:	2110      	movs	r1, #16
 8001764:	6938      	ldr	r0, [r7, #16]
 8001766:	f002 ff55 	bl	8004614 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800176a:	6938      	ldr	r0, [r7, #16]
 800176c:	f002 ff84 	bl	8004678 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7a5b      	ldrb	r3, [r3, #9]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d105      	bne.n	8001784 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f976 	bl	8004a70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f006 f8d5 	bl	8007934 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f836 	bl	8004800 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800179a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179e:	d102      	bne.n	80017a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f001 fd4d 	bl	8003240 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f828 	bl	8004800 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d106      	bne.n	80017c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f006 f89e 	bl	80078fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f817 	bl	8004800 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017dc:	d139      	bne.n	8001852 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fdb2 	bl	800534c <USB_HC_ReadInterrupt>
 80017e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e025      	b.n	800183c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800181a:	d106      	bne.n	800182a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f905 	bl	8001a32 <HCD_HC_IN_IRQHandler>
 8001828:	e005      	b.n	8001836 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 ff67 	bl	8002704 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	461a      	mov	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4293      	cmp	r3, r2
 8001846:	d3d3      	bcc.n	80017f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 ffd2 	bl	8004800 <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d101      	bne.n	800186a <HAL_HCD_IRQHandler+0x1ea>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_HCD_IRQHandler+0x1ec>
 800186a:	2300      	movs	r3, #0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d014      	beq.n	800189a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0210 	bic.w	r2, r2, #16
 800187e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f001 fbfe 	bl	8003082 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0210 	orr.w	r2, r2, #16
 8001894:	619a      	str	r2, [r3, #24]
 8001896:	e000      	b.n	800189a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001898:	bf00      	nop
    }
  }
}
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_HCD_Start+0x16>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e013      	b.n	80018de <HAL_HCD_Start+0x3e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f93a 	bl	8004b3e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fe32 	bl	8004538 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_HCD_Stop+0x16>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e00d      	b.n	8001918 <HAL_HCD_Stop+0x32>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fe8d 	bl	8005628 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f003 f8dc 	bl	8004aea <USB_ResetPort>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	334c      	adds	r3, #76	@ 0x4c
 8001958:	781b      	ldrb	r3, [r3, #0]
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3338      	adds	r3, #56	@ 0x38
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 f91e 	bl	8004bde <USB_GetCurrentFrame>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f8f9 	bl	8004bb0 <USB_GetHostSpeed>
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	331a      	adds	r3, #26
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	331b      	adds	r3, #27
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3325      	adds	r3, #37	@ 0x25
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3324      	adds	r3, #36	@ 0x24
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fee8 	bl	8004826 <USB_ReadChInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d11a      	bne.n	8001a96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2304      	movs	r3, #4
 8001a70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	334d      	adds	r3, #77	@ 0x4d
 8001a82:	2207      	movs	r2, #7
 8001a84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fc6d 	bl	800536e <USB_HC_Halt>
 8001a94:	e09e      	b.n	8001bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fec1 	bl	8004826 <USB_ReadChInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aae:	d11b      	bne.n	8001ae8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001abc:	461a      	mov	r2, r3
 8001abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	334d      	adds	r3, #77	@ 0x4d
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fc44 	bl	800536e <USB_HC_Halt>
 8001ae6:	e075      	b.n	8001bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fe98 	bl	8004826 <USB_ReadChInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d11a      	bne.n	8001b36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2308      	movs	r3, #8
 8001b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	334d      	adds	r3, #77	@ 0x4d
 8001b22:	2206      	movs	r2, #6
 8001b24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fc1d 	bl	800536e <USB_HC_Halt>
 8001b34:	e04e      	b.n	8001bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fe71 	bl	8004826 <USB_ReadChInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4e:	d11b      	bne.n	8001b88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	334d      	adds	r3, #77	@ 0x4d
 8001b74:	2209      	movs	r2, #9
 8001b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fbf4 	bl	800536e <USB_HC_Halt>
 8001b86:	e025      	b.n	8001bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 fe48 	bl	8004826 <USB_ReadChInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9c:	2b80      	cmp	r3, #128	@ 0x80
 8001b9e:	d119      	bne.n	8001bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bac:	461a      	mov	r2, r3
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	334d      	adds	r3, #77	@ 0x4d
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fbcd 	bl	800536e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fe22 	bl	8004826 <USB_ReadChInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bec:	d112      	bne.n	8001c14 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fbb9 	bl	800536e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c0e:	6093      	str	r3, [r2, #8]
 8001c10:	f000 bd75 	b.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fe02 	bl	8004826 <USB_ReadChInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	f040 8128 	bne.w	8001e7e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	331b      	adds	r3, #27
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d119      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	331b      	adds	r3, #27
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	0151      	lsls	r1, r2, #5
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	440a      	add	r2, r1
 8001c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c88:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01b      	beq.n	8001cca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3330      	adds	r3, #48	@ 0x30
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	1ac9      	subs	r1, r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4403      	add	r3, r0
 8001cc6:	3338      	adds	r3, #56	@ 0x38
 8001cc8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	334d      	adds	r3, #77	@ 0x4d
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3344      	adds	r3, #68	@ 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2301      	movs	r3, #1
 8001d02:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3326      	adds	r3, #38	@ 0x26
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3326      	adds	r3, #38	@ 0x26
 8001d2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d110      	bne.n	8001d52 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fb18 	bl	800536e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	6093      	str	r3, [r2, #8]
 8001d50:	e03d      	b.n	8001dce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3326      	adds	r3, #38	@ 0x26
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d00a      	beq.n	8001d7e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3326      	adds	r3, #38	@ 0x26
 8001d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d127      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	0151      	lsls	r1, r2, #5
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	440a      	add	r2, r1
 8001d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d9c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	334c      	adds	r3, #76	@ 0x4c
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	334c      	adds	r3, #76	@ 0x4c
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f005 fdc1 	bl	8007950 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d13b      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3338      	adds	r3, #56	@ 0x38
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4403      	add	r3, r0
 8001df6:	3328      	adds	r3, #40	@ 0x28
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	440b      	add	r3, r1
 8001dfc:	1e59      	subs	r1, r3, #1
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4403      	add	r3, r0
 8001e0c:	3328      	adds	r3, #40	@ 0x28
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8470 	beq.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	333c      	adds	r3, #60	@ 0x3c
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2d8      	uxtb	r0, r3
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	333c      	adds	r3, #60	@ 0x3c
 8001e46:	4602      	mov	r2, r0
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	f000 bc58 	b.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	333c      	adds	r3, #60	@ 0x3c
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2d8      	uxtb	r0, r3
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	333c      	adds	r3, #60	@ 0x3c
 8001e76:	4602      	mov	r2, r0
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	f000 bc40 	b.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fccd 	bl	8004826 <USB_ReadChInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d131      	bne.n	8001efa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	331a      	adds	r3, #26
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 841f 	bne.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	331b      	adds	r3, #27
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	334d      	adds	r3, #77	@ 0x4d
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fa3c 	bl	800536e <USB_HC_Halt>
 8001ef6:	f000 bc02 	b.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fc8f 	bl	8004826 <USB_ReadChInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	f040 8305 	bne.w	800251e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f20:	461a      	mov	r2, r3
 8001f22:	2302      	movs	r3, #2
 8001f24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	334d      	adds	r3, #77	@ 0x4d
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d114      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334d      	adds	r3, #77	@ 0x4d
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	334c      	adds	r3, #76	@ 0x4c
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e2cc      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	334d      	adds	r3, #77	@ 0x4d
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d114      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	334d      	adds	r3, #77	@ 0x4d
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	334c      	adds	r3, #76	@ 0x4c
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e2ac      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	d00b      	beq.n	8001fd4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	334d      	adds	r3, #77	@ 0x4d
 8001fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	f040 80a6 	bne.w	8002120 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	334d      	adds	r3, #77	@ 0x4d
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	@ 0x44
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4403      	add	r3, r0
 8002008:	3344      	adds	r3, #68	@ 0x44
 800200a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3344      	adds	r3, #68	@ 0x44
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d943      	bls.n	80020aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3344      	adds	r3, #68	@ 0x44
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	331a      	adds	r3, #26
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d123      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	331b      	adds	r3, #27
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	331c      	adds	r3, #28
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800208e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002092:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	334c      	adds	r3, #76	@ 0x4c
 80020a4:	2204      	movs	r2, #4
 80020a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80020a8:	e229      	b.n	80024fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334c      	adds	r3, #76	@ 0x4c
 80020ba:	2202      	movs	r2, #2
 80020bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3326      	adds	r3, #38	@ 0x26
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3326      	adds	r3, #38	@ 0x26
 80020e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	f040 8209 	bne.w	80024fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002102:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800210a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800211e:	e1ee      	b.n	80024fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	334d      	adds	r3, #77	@ 0x4d
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b05      	cmp	r3, #5
 8002134:	f040 80c8 	bne.w	80022c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	334d      	adds	r3, #77	@ 0x4d
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	331b      	adds	r3, #27
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 81ce 	bne.w	8002500 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3326      	adds	r3, #38	@ 0x26
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d16b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3348      	adds	r3, #72	@ 0x48
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1c59      	adds	r1, r3, #1
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4403      	add	r3, r0
 800219a:	3348      	adds	r3, #72	@ 0x48
 800219c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3348      	adds	r3, #72	@ 0x48
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d943      	bls.n	800223c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3348      	adds	r3, #72	@ 0x48
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	331b      	adds	r3, #27
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3344      	adds	r3, #68	@ 0x44
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d809      	bhi.n	8002206 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	331c      	adds	r3, #28
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	334c      	adds	r3, #76	@ 0x4c
 8002236:	2204      	movs	r2, #4
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e014      	b.n	8002266 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	334c      	adds	r3, #76	@ 0x4c
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e009      	b.n	8002266 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	334c      	adds	r3, #76	@ 0x4c
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3326      	adds	r3, #38	@ 0x26
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3326      	adds	r3, #38	@ 0x26
 800228c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800228e:	2b02      	cmp	r3, #2
 8002290:	f040 8136 	bne.w	8002500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80022aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e11b      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	f040 8081 	bne.w	80023e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334d      	adds	r3, #77	@ 0x4d
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331b      	adds	r3, #27
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 80fa 	bne.w	8002500 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	334c      	adds	r3, #76	@ 0x4c
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	0151      	lsls	r1, r2, #5
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	440a      	add	r2, r1
 8002336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	0151      	lsls	r1, r2, #5
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	440a      	add	r2, r1
 8002356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800235a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800235e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	0151      	lsls	r1, r2, #5
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	440a      	add	r2, r1
 8002376:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800237a:	f023 0320 	bic.w	r3, r3, #32
 800237e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3326      	adds	r3, #38	@ 0x26
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3326      	adds	r3, #38	@ 0x26
 80023a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	f040 80a9 	bne.w	8002500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e08e      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	334d      	adds	r3, #77	@ 0x4d
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d143      	bne.n	8002480 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	334c      	adds	r3, #76	@ 0x4c
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3326      	adds	r3, #38	@ 0x26
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3326      	adds	r3, #38	@ 0x26
 8002446:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002448:	2b02      	cmp	r3, #2
 800244a:	d159      	bne.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002462:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e03f      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	334d      	adds	r3, #77	@ 0x4d
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d126      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	334d      	adds	r3, #77	@ 0x4d
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3344      	adds	r3, #68	@ 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1c59      	adds	r1, r3, #1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4403      	add	r3, r0
 80024ca:	3344      	adds	r3, #68	@ 0x44
 80024cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334c      	adds	r3, #76	@ 0x4c
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e00d      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f000 8100 	beq.w	80026fc <HCD_HC_IN_IRQHandler+0xcca>
 80024fc:	e000      	b.n	8002500 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	334c      	adds	r3, #76	@ 0x4c
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f005 fa1a 	bl	8007950 <HAL_HCD_HC_NotifyURBChange_Callback>
 800251c:	e0ef      	b.n	80026fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f002 f97d 	bl	8004826 <USB_ReadChInterrupts>
 800252c:	4603      	mov	r3, r0
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d12f      	bne.n	8002596 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	2340      	movs	r3, #64	@ 0x40
 8002546:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	334d      	adds	r3, #77	@ 0x4d
 8002558:	2205      	movs	r2, #5
 800255a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	331a      	adds	r3, #26
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3344      	adds	r3, #68	@ 0x44
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f002 feed 	bl	800536e <USB_HC_Halt>
 8002594:	e0b3      	b.n	80026fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 f941 	bl	8004826 <USB_ReadChInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	f040 80a7 	bne.w	80026fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	@ 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d11b      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3344      	adds	r3, #68	@ 0x44
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	334d      	adds	r3, #77	@ 0x4d
 80025ea:	2204      	movs	r2, #4
 80025ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 feb9 	bl	800536e <USB_HC_Halt>
 80025fc:	e03f      	b.n	800267e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3326      	adds	r3, #38	@ 0x26
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3326      	adds	r3, #38	@ 0x26
 8002624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002626:	2b02      	cmp	r3, #2
 8002628:	d129      	bne.n	800267e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3344      	adds	r3, #68	@ 0x44
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HCD_HC_IN_IRQHandler+0xc2a>
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	331b      	adds	r3, #27
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d110      	bne.n	800267e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	@ 0x4d
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fe78 	bl	800536e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	331b      	adds	r3, #27
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d129      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	331b      	adds	r3, #27
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2310      	movs	r3, #16
 80026f8:	6093      	str	r3, [r2, #8]
 80026fa:	e000      	b.n	80026fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80026fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 f87f 	bl	8004826 <USB_ReadChInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d11b      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2304      	movs	r3, #4
 8002742:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	2207      	movs	r2, #7
 8002756:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fe04 	bl	800536e <USB_HC_Halt>
 8002766:	f000 bc89 	b.w	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 f857 	bl	8004826 <USB_ReadChInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 8082 	bne.w	8002888 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	2320      	movs	r3, #32
 8002794:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3319      	adds	r3, #25
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d124      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3319      	adds	r3, #25
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334c      	adds	r3, #76	@ 0x4c
 80027d0:	2202      	movs	r2, #2
 80027d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	334d      	adds	r3, #77	@ 0x4d
 80027e4:	2203      	movs	r2, #3
 80027e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fdbc 	bl	800536e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	331a      	adds	r3, #26
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	f040 8437 	bne.w	800307c <HCD_HC_OUT_IRQHandler+0x978>
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	331b      	adds	r3, #27
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 842b 	bne.w	800307c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d009      	beq.n	8002850 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	331b      	adds	r3, #27
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	334d      	adds	r3, #77	@ 0x4d
 8002860:	2203      	movs	r2, #3
 8002862:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fd7e 	bl	800536e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3344      	adds	r3, #68	@ 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e3f9      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f001 ffc8 	bl	8004826 <USB_ReadChInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800289c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a0:	d111      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fd55 	bl	800536e <USB_HC_Halt>
 80028c4:	e3da      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 ffa9 	bl	8004826 <USB_ReadChInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d168      	bne.n	80029b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3344      	adds	r3, #68	@ 0x44
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 ff93 	bl	8004826 <USB_ReadChInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d112      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3319      	adds	r3, #25
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292a:	461a      	mov	r2, r3
 800292c:	2340      	movs	r3, #64	@ 0x40
 800292e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	331b      	adds	r3, #27
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	331b      	adds	r3, #27
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	0151      	lsls	r1, r2, #5
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	440a      	add	r2, r1
 8002970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002978:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	334d      	adds	r3, #77	@ 0x4d
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fce0 	bl	800536e <USB_HC_Halt>
 80029ae:	e365      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 ff34 	bl	8004826 <USB_ReadChInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b40      	cmp	r3, #64	@ 0x40
 80029c6:	d139      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	@ 0x4d
 80029d8:	2205      	movs	r2, #5
 80029da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	331a      	adds	r3, #26
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3319      	adds	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3344      	adds	r3, #68	@ 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fca3 	bl	800536e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2340      	movs	r3, #64	@ 0x40
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	e31f      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 feee 	bl	8004826 <USB_ReadChInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d11a      	bne.n	8002a8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2308      	movs	r3, #8
 8002a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	334d      	adds	r3, #77	@ 0x4d
 8002a76:	2206      	movs	r2, #6
 8002a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fc73 	bl	800536e <USB_HC_Halt>
 8002a88:	e2f8      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fec7 	bl	8004826 <USB_ReadChInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d144      	bne.n	8002b2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3344      	adds	r3, #68	@ 0x44
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	334d      	adds	r3, #77	@ 0x4d
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3319      	adds	r3, #25
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d114      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3318      	adds	r3, #24
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3319      	adds	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fc2b 	bl	800536e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	e2a7      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fe76 	bl	8004826 <USB_ReadChInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	f040 8083 	bne.w	8002c4c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	799b      	ldrb	r3, [r3, #6]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d111      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334d      	adds	r3, #77	@ 0x4d
 8002b5e:	2207      	movs	r2, #7
 8002b60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fbff 	bl	800536e <USB_HC_Halt>
 8002b70:	e062      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	@ 0x44
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1c59      	adds	r1, r3, #1
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4403      	add	r3, r0
 8002b92:	3344      	adds	r3, #68	@ 0x44
 8002b94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3344      	adds	r3, #68	@ 0x44
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d922      	bls.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3344      	adds	r3, #68	@ 0x44
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334c      	adds	r3, #76	@ 0x4c
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334c      	adds	r3, #76	@ 0x4c
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f004 feb0 	bl	8007950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bf0:	e022      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	334c      	adds	r3, #76	@ 0x4c
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2380      	movs	r3, #128	@ 0x80
 8002c48:	6093      	str	r3, [r2, #8]
 8002c4a:	e217      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 fde6 	bl	8004826 <USB_ReadChInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c64:	d11b      	bne.n	8002c9e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	334d      	adds	r3, #77	@ 0x4d
 8002c76:	2209      	movs	r2, #9
 8002c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fb73 	bl	800536e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	e1ee      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fdbd 	bl	8004826 <USB_ReadChInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	f040 81df 	bne.w	8003076 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	334d      	adds	r3, #77	@ 0x4d
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 8093 	bne.w	8002e08 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	334d      	adds	r3, #77	@ 0x4d
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	334c      	adds	r3, #76	@ 0x4c
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3326      	adds	r3, #38	@ 0x26
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d00b      	beq.n	8002d38 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3326      	adds	r3, #38	@ 0x26
 8002d30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	f040 8190 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	799b      	ldrb	r3, [r3, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d115      	bne.n	8002d6c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333d      	adds	r3, #61	@ 0x3d
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2d8      	uxtb	r0, r3
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	333d      	adds	r3, #61	@ 0x3d
 8002d68:	4602      	mov	r2, r0
 8002d6a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	799b      	ldrb	r3, [r3, #6]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f040 8171 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3334      	adds	r3, #52	@ 0x34
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8165 	beq.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3334      	adds	r3, #52	@ 0x34
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4403      	add	r3, r0
 8002dae:	3328      	adds	r3, #40	@ 0x28
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	440b      	add	r3, r1
 8002db4:	1e59      	subs	r1, r3, #1
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4403      	add	r3, r0
 8002dc4:	3328      	adds	r3, #40	@ 0x28
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dcc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 813f 	beq.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	333d      	adds	r3, #61	@ 0x3d
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2d8      	uxtb	r0, r3
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	333d      	adds	r3, #61	@ 0x3d
 8002e02:	4602      	mov	r2, r0
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e127      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d120      	bne.n	8002e60 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	331b      	adds	r3, #27
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 8107 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334c      	adds	r3, #76	@ 0x4c
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e0fb      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d13a      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334d      	adds	r3, #77	@ 0x4d
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	334c      	adds	r3, #76	@ 0x4c
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	331b      	adds	r3, #27
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 80d1 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	331b      	adds	r3, #27
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	0151      	lsls	r1, r2, #5
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	440a      	add	r2, r1
 8002ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6053      	str	r3, [r2, #4]
 8002eea:	e0b5      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334d      	adds	r3, #77	@ 0x4d
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d114      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	@ 0x4d
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	334c      	adds	r3, #76	@ 0x4c
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e095      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	334d      	adds	r3, #77	@ 0x4d
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d114      	bne.n	8002f6c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334c      	adds	r3, #76	@ 0x4c
 8002f66:	2205      	movs	r2, #5
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e075      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d00a      	beq.n	8002f98 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334d      	adds	r3, #77	@ 0x4d
 8002f92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d170      	bne.n	800307a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	@ 0x4d
 8002fa8:	2202      	movs	r2, #2
 8002faa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3344      	adds	r3, #68	@ 0x44
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	3344      	adds	r3, #68	@ 0x44
 8002fce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d914      	bls.n	8003010 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3344      	adds	r3, #68	@ 0x44
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334c      	adds	r3, #76	@ 0x4c
 800300a:	2204      	movs	r2, #4
 800300c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800300e:	e022      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	@ 0x4c
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800303a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003042:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003056:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	334c      	adds	r3, #76	@ 0x4c
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f004 fc6e 	bl	8007950 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003074:	e002      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800307a:	bf00      	nop
  }
}
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	@ 0x28
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	0c5b      	lsrs	r3, r3, #17
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d004      	beq.n	80030c8 <HCD_RXQLVL_IRQHandler+0x46>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	f000 80b6 	beq.w	8003232 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030c6:	e0b7      	b.n	8003238 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80b3 	beq.w	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	332c      	adds	r3, #44	@ 0x2c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80a7 	beq.w	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3338      	adds	r3, #56	@ 0x38
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	18d1      	adds	r1, r2, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4403      	add	r3, r0
 800310c:	3334      	adds	r3, #52	@ 0x34
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4299      	cmp	r1, r3
 8003112:	f200 8083 	bhi.w	800321c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	332c      	adds	r3, #44	@ 0x2c
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	b292      	uxth	r2, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f001 fb0d 	bl	8004750 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	332c      	adds	r3, #44	@ 0x2c
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	18d1      	adds	r1, r2, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	332c      	adds	r3, #44	@ 0x2c
 800315c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3338      	adds	r3, #56	@ 0x38
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	18d1      	adds	r1, r2, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3338      	adds	r3, #56	@ 0x38
 8003184:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	0cdb      	lsrs	r3, r3, #19
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3328      	adds	r3, #40	@ 0x28
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13f      	bne.n	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d03c      	beq.n	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031da:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	333c      	adds	r3, #60	@ 0x3c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2d8      	uxtb	r0, r3
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	333c      	adds	r3, #60	@ 0x3c
 8003216:	4602      	mov	r2, r0
 8003218:	701a      	strb	r2, [r3, #0]
      break;
 800321a:	e00c      	b.n	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334c      	adds	r3, #76	@ 0x4c
 800322c:	2204      	movs	r2, #4
 800322e:	701a      	strb	r2, [r3, #0]
      break;
 8003230:	e001      	b.n	8003236 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003236:	bf00      	nop
  }
}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	@ 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800326c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d10b      	bne.n	8003290 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f004 fb48 	bl	8007918 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d132      	bne.n	8003300 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d126      	bne.n	80032fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7a5b      	ldrb	r3, [r3, #9]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d113      	bne.n	80032dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80032ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032be:	d106      	bne.n	80032ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fbd2 	bl	8004a70 <USB_InitFSLSPClkSel>
 80032cc:	e011      	b.n	80032f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2101      	movs	r1, #1
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fbcb 	bl	8004a70 <USB_InitFSLSPClkSel>
 80032da:	e00a      	b.n	80032f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	79db      	ldrb	r3, [r3, #7]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ea:	461a      	mov	r2, r3
 80032ec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80032f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f004 fb3a 	bl	800796c <HAL_HCD_PortEnabled_Callback>
 80032f8:	e002      	b.n	8003300 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f004 fb44 	bl	8007988 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d103      	bne.n	8003312 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e267      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d075      	beq.n	8003432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003346:	4b88      	ldr	r3, [pc, #544]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d00c      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b85      	ldr	r3, [pc, #532]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800335a:	2b08      	cmp	r3, #8
 800335c:	d112      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b82      	ldr	r3, [pc, #520]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b7e      	ldr	r3, [pc, #504]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x108>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e242      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x74>
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b70      	ldr	r3, [pc, #448]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 80033c0:	4b69      	ldr	r3, [pc, #420]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd fb76 	bl	8000ad0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fd fb72 	bl	8000ad0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e207      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xc0>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd fb62 	bl	8000ad0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd fb5e 	bl	8000ad0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1f3      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b51      	ldr	r3, [pc, #324]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0xe8>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800343e:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1c7      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4937      	ldr	r1, [pc, #220]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e03a      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_OscConfig+0x244>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd fb17 	bl	8000ad0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fd fb13 	bl	8000ad0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1a8      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4925      	ldr	r1, [pc, #148]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_RCC_OscConfig+0x244>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd faf6 	bl	8000ad0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fd faf2 	bl	8000ad0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e187      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d036      	beq.n	8003580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <HAL_RCC_OscConfig+0x248>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fd fad6 	bl	8000ad0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fd fad2 	bl	8000ad0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e167      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCC_OscConfig+0x240>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003548:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_RCC_OscConfig+0x248>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fabf 	bl	8000ad0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00e      	b.n	8003574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fd fabb 	bl	8000ad0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d907      	bls.n	8003574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e150      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
 8003570:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b88      	ldr	r3, [pc, #544]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ea      	bne.n	8003556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8097 	beq.w	80036bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b81      	ldr	r3, [pc, #516]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b77      	ldr	r3, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b74      	ldr	r3, [pc, #464]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a73      	ldr	r2, [pc, #460]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fd fa7b 	bl	8000ad0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fd fa77 	bl	8000ad0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e10c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	4b6a      	ldr	r3, [pc, #424]	@ (800379c <HAL_RCC_OscConfig+0x474>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x2ea>
 8003604:	4b64      	ldr	r3, [pc, #400]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a63      	ldr	r2, [pc, #396]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003610:	e01c      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x30c>
 800361a:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	4a5e      	ldr	r2, [pc, #376]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	@ 0x70
 8003626:	4b5c      	ldr	r3, [pc, #368]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362a:	4a5b      	ldr	r2, [pc, #364]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	@ 0x70
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003634:	4b58      	ldr	r3, [pc, #352]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a57      	ldr	r2, [pc, #348]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003640:	4b55      	ldr	r3, [pc, #340]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a54      	ldr	r2, [pc, #336]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fd fa3c 	bl	8000ad0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fa38 	bl	8000ad0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0cb      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b49      	ldr	r3, [pc, #292]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCC_OscConfig+0x334>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7fd fa26 	bl	8000ad0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fd fa22 	bl	8000ad0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0b5      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a1 	beq.w	8003808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c6:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d05c      	beq.n	800378c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d141      	bne.n	800375e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd f9f6 	bl	8000ad0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fd f9f2 	bl	8000ad0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e087      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	491b      	ldr	r1, [pc, #108]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd f9cb 	bl	8000ad0 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fd f9c7 	bl	8000ad0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e05c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x416>
 800375c:	e054      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd f9b4 	bl	8000ad0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd f9b0 	bl	8000ad0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e045      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x444>
 800378a:	e03d      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e038      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x4ec>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d121      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d11a      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	4293      	cmp	r3, r2
 80037de:	d111      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	3b01      	subs	r3, #1
 80037ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0cc      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b68      	ldr	r3, [pc, #416]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d90c      	bls.n	8003854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b65      	ldr	r3, [pc, #404]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b63      	ldr	r3, [pc, #396]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b59      	ldr	r3, [pc, #356]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a58      	ldr	r2, [pc, #352]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003876:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a52      	ldr	r2, [pc, #328]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800388e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b50      	ldr	r3, [pc, #320]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	494d      	ldr	r1, [pc, #308]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d119      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e067      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4934      	ldr	r1, [pc, #208]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003908:	f7fd f8e2 	bl	8000ad0 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fd f8de 	bl	8000ad0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e04f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d20c      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	490e      	ldr	r1, [pc, #56]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399e:	f000 f821 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	490a      	ldr	r1, [pc, #40]	@ (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	5ccb      	ldrb	r3, [r1, r3]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f842 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023c00 	.word	0x40023c00
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08008738 	.word	0x08008738
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e8:	b094      	sub	sp, #80	@ 0x50
 80039ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039fc:	4b79      	ldr	r3, [pc, #484]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d00d      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x40>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	f200 80e1 	bhi.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a16:	e0db      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b73      	ldr	r3, [pc, #460]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a1c:	e0db      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b73      	ldr	r3, [pc, #460]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x208>)
 8003a20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a22:	e0d8      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a24:	4b6f      	ldr	r3, [pc, #444]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	2200      	movs	r2, #0
 8003a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a56:	4622      	mov	r2, r4
 8003a58:	462b      	mov	r3, r5
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0159      	lsls	r1, r3, #5
 8003a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a68:	0150      	lsls	r0, r2, #5
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4621      	mov	r1, r4
 8003a70:	1a51      	subs	r1, r2, r1
 8003a72:	6139      	str	r1, [r7, #16]
 8003a74:	4629      	mov	r1, r5
 8003a76:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a92:	4651      	mov	r1, sl
 8003a94:	018a      	lsls	r2, r1, #6
 8003a96:	4651      	mov	r1, sl
 8003a98:	ebb2 0801 	subs.w	r8, r2, r1
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab6:	4690      	mov	r8, r2
 8003ab8:	4699      	mov	r9, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	eb18 0303 	adds.w	r3, r8, r3
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	eb49 0303 	adc.w	r3, r9, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	024b      	lsls	r3, r1, #9
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	024a      	lsls	r2, r1, #9
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aea:	2200      	movs	r2, #0
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003af4:	f7fc fbc4 	bl	8000280 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4613      	mov	r3, r2
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b00:	e058      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0159      	lsls	r1, r3, #5
 8003b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2e:	0150      	lsls	r0, r2, #5
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4641      	mov	r1, r8
 8003b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b54:	ebb2 040a 	subs.w	r4, r2, sl
 8003b58:	eb63 050b 	sbc.w	r5, r3, fp
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	00eb      	lsls	r3, r5, #3
 8003b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6a:	00e2      	lsls	r2, r4, #3
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	4643      	mov	r3, r8
 8003b72:	18e3      	adds	r3, r4, r3
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	464b      	mov	r3, r9
 8003b78:	eb45 0303 	adc.w	r3, r5, r3
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	028b      	lsls	r3, r1, #10
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b94:	4621      	mov	r1, r4
 8003b96:	028a      	lsls	r2, r1, #10
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	61fa      	str	r2, [r7, #28]
 8003ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba8:	f7fc fb6a 	bl	8000280 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3750      	adds	r7, #80	@ 0x50
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	007a1200 	.word	0x007a1200

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000000 	.word	0x20000000

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c0c:	f7ff fff0 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0a9b      	lsrs	r3, r3, #10
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	08008748 	.word	0x08008748

08003c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c34:	f7ff ffdc 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0b5b      	lsrs	r3, r3, #13
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08008748 	.word	0x08008748

08003c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e042      	b.n	8003cf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fc fdc6 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2224      	movs	r2, #36	@ 0x24
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f973 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	@ 0x28
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d175      	bne.n	8003e04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Transmit+0x2c>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e06e      	b.n	8003e06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2221      	movs	r2, #33	@ 0x21
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d36:	f7fc fecb 	bl	8000ad0 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d50:	d108      	bne.n	8003d64 <HAL_UART_Transmit+0x6c>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d6c:	e02e      	b.n	8003dcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2180      	movs	r1, #128	@ 0x80
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f848 	bl	8003e0e <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e03a      	b.n	8003e06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3302      	adds	r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e007      	b.n	8003dbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1cb      	bne.n	8003d6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2140      	movs	r1, #64	@ 0x40
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f814 	bl	8003e0e <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e006      	b.n	8003e06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	e03b      	b.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d037      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7fc fe52 	bl	8000ad0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e03a      	b.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d023      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d020      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d01d      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d116      	bne.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f81d 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e00f      	b.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d0b4      	beq.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	@ 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e5      	bne.n	8003efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d119      	bne.n	8003f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f58:	61ba      	str	r2, [r7, #24]
 8003f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	613b      	str	r3, [r7, #16]
   return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f7a:	bf00      	nop
 8003f7c:	3754      	adds	r7, #84	@ 0x54
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0c0      	sub	sp, #256	@ 0x100
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fe0:	f021 010c 	bic.w	r1, r1, #12
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	6999      	ldr	r1, [r3, #24]
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	ea40 0301 	orr.w	r3, r0, r1
 800400e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b8f      	ldr	r3, [pc, #572]	@ (8004254 <UART_SetConfig+0x2cc>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d005      	beq.n	8004028 <UART_SetConfig+0xa0>
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8d      	ldr	r3, [pc, #564]	@ (8004258 <UART_SetConfig+0x2d0>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d104      	bne.n	8004032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7ff fe02 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 800402c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004030:	e003      	b.n	800403a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004032:	f7ff fde9 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8004036:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004044:	f040 810c 	bne.w	8004260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004052:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	1891      	adds	r1, r2, r2
 8004060:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004062:	415b      	adcs	r3, r3
 8004064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800406a:	4621      	mov	r1, r4
 800406c:	eb12 0801 	adds.w	r8, r2, r1
 8004070:	4629      	mov	r1, r5
 8004072:	eb43 0901 	adc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004098:	462b      	mov	r3, r5
 800409a:	eb49 0303 	adc.w	r3, r9, r3
 800409e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040b6:	460b      	mov	r3, r1
 80040b8:	18db      	adds	r3, r3, r3
 80040ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80040bc:	4613      	mov	r3, r2
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040cc:	f7fc f8d8 	bl	8000280 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b61      	ldr	r3, [pc, #388]	@ (800425c <UART_SetConfig+0x2d4>)
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	011c      	lsls	r4, r3, #4
 80040de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040f8:	415b      	adcs	r3, r3
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004100:	4641      	mov	r1, r8
 8004102:	eb12 0a01 	adds.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb43 0b01 	adc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800411c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004120:	4692      	mov	sl, r2
 8004122:	469b      	mov	fp, r3
 8004124:	4643      	mov	r3, r8
 8004126:	eb1a 0303 	adds.w	r3, sl, r3
 800412a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800412e:	464b      	mov	r3, r9
 8004130:	eb4b 0303 	adc.w	r3, fp, r3
 8004134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004144:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800414c:	460b      	mov	r3, r1
 800414e:	18db      	adds	r3, r3, r3
 8004150:	643b      	str	r3, [r7, #64]	@ 0x40
 8004152:	4613      	mov	r3, r2
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
 800415a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800415e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004162:	f7fc f88d 	bl	8000280 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4611      	mov	r1, r2
 800416c:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <UART_SetConfig+0x2d4>)
 800416e:	fba3 2301 	umull	r2, r3, r3, r1
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2264      	movs	r2, #100	@ 0x64
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	1acb      	subs	r3, r1, r3
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004182:	4b36      	ldr	r3, [pc, #216]	@ (800425c <UART_SetConfig+0x2d4>)
 8004184:	fba3 2302 	umull	r2, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004190:	441c      	add	r4, r3
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800419c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041ac:	415b      	adcs	r3, r3
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041b4:	4641      	mov	r1, r8
 80041b6:	1851      	adds	r1, r2, r1
 80041b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80041ba:	4649      	mov	r1, r9
 80041bc:	414b      	adcs	r3, r1
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041cc:	4659      	mov	r1, fp
 80041ce:	00cb      	lsls	r3, r1, #3
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d6:	4651      	mov	r1, sl
 80041d8:	00ca      	lsls	r2, r1, #3
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	4642      	mov	r2, r8
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e8:	464b      	mov	r3, r9
 80041ea:	460a      	mov	r2, r1
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004200:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800421a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800421e:	f7fc f82f 	bl	8000280 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <UART_SetConfig+0x2d4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	@ 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	3332      	adds	r3, #50	@ 0x32
 800423a:	4a08      	ldr	r2, [pc, #32]	@ (800425c <UART_SetConfig+0x2d4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 0207 	and.w	r2, r3, #7
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4422      	add	r2, r4
 800424e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004250:	e106      	b.n	8004460 <UART_SetConfig+0x4d8>
 8004252:	bf00      	nop
 8004254:	40011000 	.word	0x40011000
 8004258:	40011400 	.word	0x40011400
 800425c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800426a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800426e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004272:	4642      	mov	r2, r8
 8004274:	464b      	mov	r3, r9
 8004276:	1891      	adds	r1, r2, r2
 8004278:	6239      	str	r1, [r7, #32]
 800427a:	415b      	adcs	r3, r3
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004282:	4641      	mov	r1, r8
 8004284:	1854      	adds	r4, r2, r1
 8004286:	4649      	mov	r1, r9
 8004288:	eb43 0501 	adc.w	r5, r3, r1
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	00eb      	lsls	r3, r5, #3
 8004296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429a:	00e2      	lsls	r2, r4, #3
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
 80042a0:	4643      	mov	r3, r8
 80042a2:	18e3      	adds	r3, r4, r3
 80042a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a8:	464b      	mov	r3, r9
 80042aa:	eb45 0303 	adc.w	r3, r5, r3
 80042ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ce:	4629      	mov	r1, r5
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d8:	4621      	mov	r1, r4
 80042da:	008a      	lsls	r2, r1, #2
 80042dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042e0:	f7fb ffce 	bl	8000280 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b60      	ldr	r3, [pc, #384]	@ (800446c <UART_SetConfig+0x4e4>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011c      	lsls	r4, r3, #4
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	61b9      	str	r1, [r7, #24]
 800430c:	415b      	adcs	r3, r3
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6139      	str	r1, [r7, #16]
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800435e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800436c:	4649      	mov	r1, r9
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	4641      	mov	r1, r8
 8004372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004376:	4641      	mov	r1, r8
 8004378:	008a      	lsls	r2, r1, #2
 800437a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800437e:	f7fb ff7f 	bl	8000280 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4611      	mov	r1, r2
 8004388:	4b38      	ldr	r3, [pc, #224]	@ (800446c <UART_SetConfig+0x4e4>)
 800438a:	fba3 2301 	umull	r2, r3, r3, r1
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2264      	movs	r2, #100	@ 0x64
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	1acb      	subs	r3, r1, r3
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	3332      	adds	r3, #50	@ 0x32
 800439c:	4a33      	ldr	r2, [pc, #204]	@ (800446c <UART_SetConfig+0x4e4>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a8:	441c      	add	r4, r3
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80043b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80043b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	415b      	adcs	r3, r3
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c8:	4641      	mov	r1, r8
 80043ca:	1851      	adds	r1, r2, r1
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	4649      	mov	r1, r9
 80043d0:	414b      	adcs	r3, r1
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043e0:	4659      	mov	r1, fp
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ea:	4651      	mov	r1, sl
 80043ec:	00ca      	lsls	r2, r1, #3
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	4642      	mov	r2, r8
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043fa:	464b      	mov	r3, r9
 80043fc:	460a      	mov	r2, r1
 80043fe:	eb42 0303 	adc.w	r3, r2, r3
 8004402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	663b      	str	r3, [r7, #96]	@ 0x60
 800440e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800442e:	f7fb ff27 	bl	8000280 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <UART_SetConfig+0x4e4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	@ 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	3332      	adds	r3, #50	@ 0x32
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <UART_SetConfig+0x4e4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4422      	add	r2, r4
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004466:	46bd      	mov	sp, r7
 8004468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446c:	51eb851f 	.word	0x51eb851f

08004470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004470:	b084      	sub	sp, #16
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	f107 001c 	add.w	r0, r7, #28
 800447e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004482:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004486:	2b01      	cmp	r3, #1
 8004488:	d123      	bne.n	80044d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800449e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9dc 	bl	8004884 <USB_CoreReset>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e01b      	b.n	800450a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9d0 	bl	8004884 <USB_CoreReset>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80044fc:	e005      	b.n	800450a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800450a:	7fbb      	ldrb	r3, [r7, #30]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10b      	bne.n	8004528 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f043 0206 	orr.w	r2, r3, #6
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004534:	b004      	add	sp, #16
 8004536:	4770      	bx	lr

08004538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d115      	bne.n	80045ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045aa:	200a      	movs	r0, #10
 80045ac:	f7fc fa9c 	bl	8000ae8 <HAL_Delay>
      ms += 10U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	330a      	adds	r3, #10
 80045b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f956 	bl	8004868 <USB_GetMode>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d01e      	beq.n	8004600 <USB_SetCurrentMode+0x84>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80045c6:	d9f0      	bls.n	80045aa <USB_SetCurrentMode+0x2e>
 80045c8:	e01a      	b.n	8004600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d115      	bne.n	80045fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045dc:	200a      	movs	r0, #10
 80045de:	f7fc fa83 	bl	8000ae8 <HAL_Delay>
      ms += 10U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	330a      	adds	r3, #10
 80045e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f93d 	bl	8004868 <USB_GetMode>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <USB_SetCurrentMode+0x84>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80045f8:	d9f0      	bls.n	80045dc <USB_SetCurrentMode+0x60>
 80045fa:	e001      	b.n	8004600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e005      	b.n	800460c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2bc8      	cmp	r3, #200	@ 0xc8
 8004604:	d101      	bne.n	800460a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800462e:	d901      	bls.n	8004634 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e01b      	b.n	800466c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	daf2      	bge.n	8004622 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	019b      	lsls	r3, r3, #6
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004658:	d901      	bls.n	800465e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e006      	b.n	800466c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d0f0      	beq.n	800464c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004690:	d901      	bls.n	8004696 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e018      	b.n	80046c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	daf2      	bge.n	8004684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2210      	movs	r2, #16
 80046a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046b4:	d901      	bls.n	80046ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e006      	b.n	80046c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d0f0      	beq.n	80046a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	@ 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	460b      	mov	r3, r1
 80046e4:	71fb      	strb	r3, [r7, #7]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d123      	bne.n	8004742 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046fa:	88bb      	ldrh	r3, [r7, #4]
 80046fc:	3303      	adds	r3, #3
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e018      	b.n	800473a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	031a      	lsls	r2, r3, #12
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4413      	add	r3, r2
 8004710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004714:	461a      	mov	r2, r3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	3301      	adds	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3301      	adds	r3, #1
 8004726:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3301      	adds	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3301      	adds	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d3e2      	bcc.n	8004708 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3724      	adds	r7, #36	@ 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004750:	b480      	push	{r7}
 8004752:	b08b      	sub	sp, #44	@ 0x2c
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	b29b      	uxth	r3, r3
 800476c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	e014      	b.n	80047a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	601a      	str	r2, [r3, #0]
    pDest++;
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	3301      	adds	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	3301      	adds	r3, #1
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	3301      	adds	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	3301      	adds	r3, #1
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	6a3a      	ldr	r2, [r7, #32]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3e6      	bcc.n	800477c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047ae:	8bfb      	ldrh	r3, [r7, #30]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01e      	beq.n	80047f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047be:	461a      	mov	r2, r3
 80047c0:	f107 0310 	add.w	r3, r7, #16
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	701a      	strb	r2, [r3, #0]
      i++;
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	3301      	adds	r3, #1
 80047de:	623b      	str	r3, [r7, #32]
      pDest++;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	3301      	adds	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80047e6:	8bfb      	ldrh	r3, [r7, #30]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1ea      	bne.n	80047c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	372c      	adds	r7, #44	@ 0x2c
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004818:	68fb      	ldr	r3, [r7, #12]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800485a:	68bb      	ldr	r3, [r7, #8]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0301 	and.w	r3, r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489c:	d901      	bls.n	80048a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e01b      	b.n	80048da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	daf2      	bge.n	8004890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c6:	d901      	bls.n	80048cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d0f0      	beq.n	80048ba <USB_CoreReset+0x36>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048e8:	b084      	sub	sp, #16
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004908:	461a      	mov	r2, r3
 800490a:	2300      	movs	r3, #0
 800490c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800493e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10a      	bne.n	800495c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e014      	b.n	8004986 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800496a:	f023 0304 	bic.w	r3, r3, #4
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e009      	b.n	8004986 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004986:	2110      	movs	r1, #16
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fe43 	bl	8004614 <USB_FlushTxFifo>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff fe6d 	bl	8004678 <USB_FlushRxFifo>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	e015      	b.n	80049da <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ce:	461a      	mov	r2, r3
 80049d0:	2300      	movs	r3, #0
 80049d2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	3301      	adds	r3, #1
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80049de:	461a      	mov	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d3e3      	bcc.n	80049ae <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <USB_HostInit+0x170>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d10b      	bne.n	8004a14 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <USB_HostInit+0x174>)
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a14      	ldr	r2, [pc, #80]	@ (8004a60 <USB_HostInit+0x178>)
 8004a0e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004a12:	e009      	b.n	8004a28 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2280      	movs	r2, #128	@ 0x80
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a11      	ldr	r2, [pc, #68]	@ (8004a64 <USB_HostInit+0x17c>)
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a11      	ldr	r2, [pc, #68]	@ (8004a68 <USB_HostInit+0x180>)
 8004a24:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f043 0210 	orr.w	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <USB_HostInit+0x184>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr
 8004a58:	40040000 	.word	0x40040000
 8004a5c:	01000200 	.word	0x01000200
 8004a60:	00e00300 	.word	0x00e00300
 8004a64:	00600080 	.word	0x00600080
 8004a68:	004000e0 	.word	0x004000e0
 8004a6c:	a3200008 	.word	0xa3200008

08004a70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004abe:	6053      	str	r3, [r2, #4]
 8004ac0:	e00c      	b.n	8004adc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d107      	bne.n	8004ad8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004ad4:	6053      	str	r3, [r2, #4]
 8004ad6:	e001      	b.n	8004adc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b1a:	2064      	movs	r0, #100	@ 0x64
 8004b1c:	f7fb ffe4 	bl	8000ae8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b2e:	200a      	movs	r0, #10
 8004b30:	f7fb ffda 	bl	8000ae8 <HAL_Delay>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b62:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <USB_DriveVbus+0x44>
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b80:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d109      	bne.n	8004ba2 <USB_DriveVbus+0x64>
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	0c5b      	lsrs	r3, r3, #17
 8004bce:	f003 0303 	and.w	r3, r3, #3
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	b29b      	uxth	r3, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	70fb      	strb	r3, [r7, #3]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70bb      	strb	r3, [r7, #2]
 8004c16:	4613      	mov	r3, r2
 8004c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d87c      	bhi.n	8004d38 <USB_HC_Init+0x138>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <USB_HC_Init+0x44>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004cfb 	.word	0x08004cfb
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004cbd 	.word	0x08004cbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004c66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da10      	bge.n	8004c92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004c90:	e055      	b.n	8004d3e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a6f      	ldr	r2, [pc, #444]	@ (8004e54 <USB_HC_Init+0x254>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d151      	bne.n	8004d3e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cb4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004cb8:	60d3      	str	r3, [r2, #12]
      break;
 8004cba:	e040      	b.n	8004d3e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004cce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da34      	bge.n	8004d42 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cf8:	e023      	b.n	8004d42 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	f240 2325 	movw	r3, #549	@ 0x225
 8004d0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da17      	bge.n	8004d46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d30:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004d34:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d36:	e006      	b.n	8004d46 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	77fb      	strb	r3, [r7, #31]
      break;
 8004d3c:	e004      	b.n	8004d48 <USB_HC_Init+0x148>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <USB_HC_Init+0x148>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <USB_HC_Init+0x148>
      break;
 8004d46:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d94:	4313      	orrs	r3, r2
 8004d96:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004da4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da03      	bge.n	8004db4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e001      	b.n	8004db8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fef9 	bl	8004bb0 <USB_GetHostSpeed>
 8004dbe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d106      	bne.n	8004dd6 <USB_HC_Init+0x1d6>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d003      	beq.n	8004dd6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e001      	b.n	8004dda <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dda:	787b      	ldrb	r3, [r7, #1]
 8004ddc:	059b      	lsls	r3, r3, #22
 8004dde:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004de2:	78bb      	ldrb	r3, [r7, #2]
 8004de4:	02db      	lsls	r3, r3, #11
 8004de6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dea:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004df0:	049b      	lsls	r3, r3, #18
 8004df2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004df6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004df8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dfe:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e18:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d003      	beq.n	8004e2a <USB_HC_Init+0x22a>
 8004e22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10f      	bne.n	8004e4a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e48:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40040000 	.word	0x40040000

08004e58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	@ 0x30
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e74:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff0 <USB_HC_StartXfer+0x198>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d12f      	bne.n	8004ede <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d11c      	bne.n	8004ebe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	7c9b      	ldrb	r3, [r3, #18]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <USB_HC_StartXfer+0x3c>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	7c9b      	ldrb	r3, [r3, #18]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d124      	bne.n	8004ede <USB_HC_StartXfer+0x86>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	799b      	ldrb	r3, [r3, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d120      	bne.n	8004ede <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eba:	60d3      	str	r3, [r2, #12]
 8004ebc:	e00f      	b.n	8004ede <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	791b      	ldrb	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <USB_HC_StartXfer+0x86>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	795b      	ldrb	r3, [r3, #5]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fb6b 	bl	80055b0 <USB_DoPing>
        return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e232      	b.n	8005344 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	799b      	ldrb	r3, [r3, #6]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d158      	bne.n	8004f98 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	8a92      	ldrh	r2, [r2, #20]
 8004ef8:	fb03 f202 	mul.w	r2, r3, r2
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61da      	str	r2, [r3, #28]
 8004f00:	e07c      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	7c9b      	ldrb	r3, [r3, #18]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d130      	bne.n	8004f6c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	2bbc      	cmp	r3, #188	@ 0xbc
 8004f10:	d918      	bls.n	8004f44 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	8a9b      	ldrh	r3, [r3, #20]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d003      	beq.n	8004f34 <USB_HC_StartXfer+0xdc>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d103      	bne.n	8004f3c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2202      	movs	r2, #2
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	e05f      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e05b      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d007      	beq.n	8004f64 <USB_HC_StartXfer+0x10c>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d003      	beq.n	8004f64 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e04b      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2203      	movs	r2, #3
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	e047      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10d      	bne.n	8004f8e <USB_HC_StartXfer+0x136>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	8a92      	ldrh	r2, [r2, #20]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d907      	bls.n	8004f8e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	8a92      	ldrh	r2, [r2, #20]
 8004f84:	fb03 f202 	mul.w	r2, r3, r2
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61da      	str	r2, [r3, #28]
 8004f8c:	e036      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	61da      	str	r2, [r3, #28]
 8004f96:	e031      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d018      	beq.n	8004fd2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	8a92      	ldrh	r2, [r2, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3b01      	subs	r3, #1
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	8a92      	ldrh	r2, [r2, #20]
 8004fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8004fb6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d90b      	bls.n	8004fd6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8004fbe:	8b7b      	ldrh	r3, [r7, #26]
 8004fc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	8a92      	ldrh	r2, [r2, #20]
 8004fc8:	fb03 f202 	mul.w	r2, r3, r2
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61da      	str	r2, [r3, #28]
 8004fd0:	e001      	b.n	8004fd6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	8a92      	ldrh	r2, [r2, #20]
 8004fe4:	fb03 f202 	mul.w	r2, r3, r2
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61da      	str	r2, [r3, #28]
 8004fec:	e006      	b.n	8004ffc <USB_HC_StartXfer+0x1a4>
 8004fee:	bf00      	nop
 8004ff0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005004:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005006:	04d9      	lsls	r1, r3, #19
 8005008:	4ba3      	ldr	r3, [pc, #652]	@ (8005298 <USB_HC_StartXfer+0x440>)
 800500a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800500c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	7d9b      	ldrb	r3, [r3, #22]
 8005012:	075b      	lsls	r3, r3, #29
 8005014:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005018:	69f9      	ldr	r1, [r7, #28]
 800501a:	0148      	lsls	r0, r1, #5
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	4401      	add	r1, r0
 8005020:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005024:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005026:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6999      	ldr	r1, [r3, #24]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503e:	460a      	mov	r2, r1
 8005040:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	6a3a      	ldr	r2, [r7, #32]
 800506e:	440a      	add	r2, r1
 8005070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005074:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005078:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	7e7b      	ldrb	r3, [r7, #25]
 800508a:	075b      	lsls	r3, r3, #29
 800508c:	69f9      	ldr	r1, [r7, #28]
 800508e:	0148      	lsls	r0, r1, #5
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	4401      	add	r1, r0
 8005094:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	799b      	ldrb	r3, [r3, #6]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 80c3 	bne.w	800522c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	7c5b      	ldrb	r3, [r3, #17]
 80050aa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80050b0:	4313      	orrs	r3, r2
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	6a3a      	ldr	r2, [r7, #32]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80050be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80050c2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80050e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	79db      	ldrb	r3, [r3, #7]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d123      	bne.n	8005134 <USB_HC_StartXfer+0x2dc>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11f      	bne.n	8005134 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	6a3a      	ldr	r2, [r7, #32]
 8005108:	440a      	add	r2, r1
 800510a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800510e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005112:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	440a      	add	r2, r1
 800512a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800512e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005132:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	7c9b      	ldrb	r3, [r3, #18]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d003      	beq.n	8005144 <USB_HC_StartXfer+0x2ec>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	7c9b      	ldrb	r3, [r3, #18]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d117      	bne.n	8005174 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005148:	2b01      	cmp	r3, #1
 800514a:	d113      	bne.n	8005174 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10f      	bne.n	8005174 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800516e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005172:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	7c9b      	ldrb	r3, [r3, #18]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d162      	bne.n	8005242 <USB_HC_StartXfer+0x3ea>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	78db      	ldrb	r3, [r3, #3]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d15e      	bne.n	8005242 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	3b01      	subs	r3, #1
 800518a:	2b03      	cmp	r3, #3
 800518c:	d858      	bhi.n	8005240 <USB_HC_StartXfer+0x3e8>
 800518e:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <USB_HC_StartXfer+0x33c>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	0800520b 	.word	0x0800520b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c2:	6053      	str	r3, [r2, #4]
          break;
 80051c4:	e03d      	b.n	8005242 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051e0:	f043 030e 	orr.w	r3, r3, #14
 80051e4:	6053      	str	r3, [r2, #4]
          break;
 80051e6:	e02c      	b.n	8005242 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005206:	6053      	str	r3, [r2, #4]
          break;
 8005208:	e01b      	b.n	8005242 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	440a      	add	r2, r1
 8005220:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005228:	6053      	str	r3, [r2, #4]
          break;
 800522a:	e00a      	b.n	8005242 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6053      	str	r3, [r2, #4]
 800523e:	e000      	b.n	8005242 <USB_HC_StartXfer+0x3ea>
          break;
 8005240:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005258:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	78db      	ldrb	r3, [r3, #3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e003      	b.n	8005274 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005272:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800527a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005288:	461a      	mov	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e055      	b.n	8005344 <USB_HC_StartXfer+0x4ec>
 8005298:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d14e      	bne.n	8005342 <USB_HC_StartXfer+0x4ea>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d04a      	beq.n	8005342 <USB_HC_StartXfer+0x4ea>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	79db      	ldrb	r3, [r3, #7]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d146      	bne.n	8005342 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	7c9b      	ldrb	r3, [r3, #18]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d831      	bhi.n	8005320 <USB_HC_StartXfer+0x4c8>
 80052bc:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <USB_HC_StartXfer+0x46c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052f9 	.word	0x080052f9
 80052cc:	080052d5 	.word	0x080052d5
 80052d0:	080052f9 	.word	0x080052f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	3303      	adds	r3, #3
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80052de:	8afa      	ldrh	r2, [r7, #22]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d91c      	bls.n	8005324 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80052f6:	e015      	b.n	8005324 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	3303      	adds	r3, #3
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005302:	8afa      	ldrh	r2, [r7, #22]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	b29b      	uxth	r3, r3
 800530e:	429a      	cmp	r2, r3
 8005310:	d90a      	bls.n	8005328 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	619a      	str	r2, [r3, #24]
        }
        break;
 800531e:	e003      	b.n	8005328 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005320:	bf00      	nop
 8005322:	e002      	b.n	800532a <USB_HC_StartXfer+0x4d2>
        break;
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <USB_HC_StartXfer+0x4d2>
        break;
 8005328:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	785a      	ldrb	r2, [r3, #1]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	b29b      	uxth	r3, r3
 8005338:	2000      	movs	r0, #0
 800533a:	9000      	str	r0, [sp, #0]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff f9c9 	bl	80046d4 <USB_WritePacket>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3728      	adds	r7, #40	@ 0x28
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	b29b      	uxth	r3, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800536e:	b480      	push	{r7}
 8005370:	b089      	sub	sp, #36	@ 0x24
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0c9b      	lsrs	r3, r3, #18
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	0fdb      	lsrs	r3, r3, #31
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	0fdb      	lsrs	r3, r3, #31
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d10d      	bne.n	80053f0 <USB_HC_Halt+0x82>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <USB_HC_Halt+0x82>
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d002      	beq.n	80053ec <USB_HC_Halt+0x7e>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d101      	bne.n	80053f0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e0d8      	b.n	80055a2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <USB_HC_Halt+0x8e>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d173      	bne.n	80054e4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005416:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800541a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d14a      	bne.n	80054be <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d133      	bne.n	800549c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800544e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005452:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	440a      	add	r2, r1
 800546a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800546e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005472:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	3301      	adds	r3, #1
 8005478:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005480:	d82e      	bhi.n	80054e0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005494:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005498:	d0ec      	beq.n	8005474 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800549a:	e081      	b.n	80055a0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054bc:	e070      	b.n	80055a0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054de:	e05f      	b.n	80055a0 <USB_HC_Halt+0x232>
            break;
 80054e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054e2:	e05d      	b.n	80055a0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005502:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d133      	bne.n	800557c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800552e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005532:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800554e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005552:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	3301      	adds	r3, #1
 8005558:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005560:	d81d      	bhi.n	800559e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005578:	d0ec      	beq.n	8005554 <USB_HC_Halt+0x1e6>
 800557a:	e011      	b.n	80055a0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	440a      	add	r2, r1
 8005592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e000      	b.n	80055a0 <USB_HC_Halt+0x232>
          break;
 800559e:	bf00      	nop
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3724      	adds	r7, #36	@ 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	04da      	lsls	r2, r3, #19
 80055cc:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <USB_DoPing+0x74>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005600:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	1ff80000 	.word	0x1ff80000

08005628 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fe ff8c 	bl	800455a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005642:	2110      	movs	r1, #16
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7fe ffe5 	bl	8004614 <USB_FlushTxFifo>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff f80f 	bl	8004678 <USB_FlushRxFifo>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e01f      	b.n	80056aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005680:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005688:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005690:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569e:	461a      	mov	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b0f      	cmp	r3, #15
 80056ae:	d9dc      	bls.n	800566a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	e034      	b.n	8005720 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056fc:	d80c      	bhi.n	8005718 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005714:	d0ec      	beq.n	80056f0 <USB_StopHost+0xc8>
 8005716:	e000      	b.n	800571a <USB_StopHost+0xf2>
        break;
 8005718:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	3301      	adds	r3, #1
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d9c7      	bls.n	80056b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800572c:	461a      	mov	r2, r3
 800572e:	f04f 33ff 	mov.w	r3, #4294967295
 8005732:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f04f 32ff 	mov.w	r2, #4294967295
 800573a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fe fefb 	bl	8004538 <USB_EnableGlobalInt>

  return ret;
 8005742:	7ffb      	ldrb	r3, [r7, #31]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b089      	sub	sp, #36	@ 0x24
 8005750:	af04      	add	r7, sp, #16
 8005752:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8005754:	2302      	movs	r3, #2
 8005756:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 800575c:	23ff      	movs	r3, #255	@ 0xff
 800575e:	2203      	movs	r2, #3
 8005760:	2101      	movs	r1, #1
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fbb6 	bl	8005ed4 <USBH_FindInterface>
 8005768:	4603      	mov	r3, r0
 800576a:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	2bff      	cmp	r3, #255	@ 0xff
 8005770:	d102      	bne.n	8005778 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8005772:	2302      	movs	r3, #2
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	e0fc      	b.n	8005972 <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb8d 	bl	8005e9c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005788:	201c      	movs	r0, #28
 800578a:	f002 fb01 	bl	8007d90 <malloc>
 800578e:	4603      	mov	r3, r0
 8005790:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0e6      	b.n	8005974 <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 80057a6:	221c      	movs	r2, #28
 80057a8:	2100      	movs	r1, #0
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f002 fbce 	bl	8007f4c <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80057b6:	4619      	mov	r1, r3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	231a      	movs	r3, #26
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da1c      	bge.n	8005808 <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80057d4:	4619      	mov	r1, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	231a      	movs	r3, #26
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	4413      	add	r3, r2
 80057e0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80057f0:	4619      	mov	r1, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	231a      	movs	r3, #26
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	811a      	strh	r2, [r3, #8]
 8005806:	e01b      	b.n	8005840 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800580e:	4619      	mov	r1, r3
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	231a      	movs	r3, #26
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800582a:	4619      	mov	r1, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	231a      	movs	r3, #26
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005846:	4619      	mov	r1, r3
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	231a      	movs	r3, #26
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b25b      	sxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	da1c      	bge.n	8005898 <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005864:	4619      	mov	r1, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	231a      	movs	r3, #26
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005880:	4619      	mov	r1, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	231a      	movs	r3, #26
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	811a      	strh	r2, [r3, #8]
 8005896:	e01b      	b.n	80058d0 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800589e:	4619      	mov	r1, r3
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	231a      	movs	r3, #26
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80058ba:	4619      	mov	r1, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	231a      	movs	r3, #26
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80058ca:	881a      	ldrh	r2, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	78db      	ldrb	r3, [r3, #3]
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fe89 	bl	80075ee <USBH_AllocPipe>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fe7f 	bl	80075ee <USBH_AllocPipe>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	7899      	ldrb	r1, [r3, #2]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	78d8      	ldrb	r0, [r3, #3]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	88d2      	ldrh	r2, [r2, #6]
 8005910:	9202      	str	r2, [sp, #8]
 8005912:	2202      	movs	r2, #2
 8005914:	9201      	str	r2, [sp, #4]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	4623      	mov	r3, r4
 800591a:	4602      	mov	r2, r0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fe37 	bl	8007590 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	7859      	ldrb	r1, [r3, #1]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	7918      	ldrb	r0, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	8912      	ldrh	r2, [r2, #8]
 800593a:	9202      	str	r2, [sp, #8]
 800593c:	2202      	movs	r2, #2
 800593e:	9201      	str	r2, [sp, #4]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4623      	mov	r3, r4
 8005944:	4602      	mov	r2, r0
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fe22 	bl	8007590 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2200      	movs	r2, #0
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f002 f992 	bl	8007c84 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	789b      	ldrb	r3, [r3, #2]
 8005964:	2200      	movs	r2, #0
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f002 f98b 	bl	8007c84 <USBH_LL_SetToggle>
		status = USBH_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	bd90      	pop	{r4, r7, pc}

0800597c <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00e      	beq.n	80059b4 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	789b      	ldrb	r3, [r3, #2]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fe16 	bl	80075ce <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	789b      	ldrb	r3, [r3, #2]
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 fe41 	bl	8007630 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fe03 	bl	80075ce <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fe2e 	bl	8007630 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f002 f9d6 	bl	8007da0 <free>
		phost->pActiveClass->pData = 0;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059fa:	2200      	movs	r2, #0
 80059fc:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005a16:	2102      	movs	r1, #2
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3

	return USBH_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b0b      	cmp	r3, #11
 8005a40:	d10e      	bne.n	8005a60 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fdbd 	bl	80075ce <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	789b      	ldrb	r3, [r3, #2]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fdb7 	bl	80075ce <USBH_ClosePipe>
  }
  return USBH_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d010      	beq.n	8005aae <USBH_MIDI_Process+0x44>
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	dc1b      	bgt.n	8005ac8 <USBH_MIDI_Process+0x5e>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <USBH_MIDI_Process+0x30>
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d003      	beq.n	8005aa0 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8005a98:	e016      	b.n	8005ac8 <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
		break;
 8005a9e:	e016      	b.n	8005ace <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f84f 	bl	8005b44 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8bd 	bl	8005c26 <MIDI_ProcessReception>
		break;
 8005aac:	e00f      	b.n	8005ace <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ffe7 	bl	8006a84 <USBH_ClrFeature>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
		break;
 8005ac6:	e001      	b.n	8005acc <USBH_MIDI_Process+0x62>
		break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <USBH_MIDI_Process+0x64>
		break;
 8005acc:	bf00      	nop

	}

	return status;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <USBH_MIDI_Receive+0x2c>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10d      	bne.n	8005b36 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2203      	movs	r2, #3
 8005b30:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	7e1b      	ldrb	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d002      	beq.n	8005b68 <MIDI_ProcessTransmission+0x24>
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d021      	beq.n	8005baa <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8005b66:	e05a      	b.n	8005c1e <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8a9a      	ldrh	r2, [r3, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88db      	ldrh	r3, [r3, #6]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d90b      	bls.n	8005b8c <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	68d9      	ldr	r1, [r3, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88da      	ldrh	r2, [r3, #6]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	789b      	ldrb	r3, [r3, #2]
 8005b80:	2001      	movs	r0, #1
 8005b82:	9000      	str	r0, [sp, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fcc0 	bl	800750a <USBH_BulkSendData>
 8005b8a:	e00a      	b.n	8005ba2 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68d9      	ldr	r1, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8a9a      	ldrh	r2, [r3, #20]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	789b      	ldrb	r3, [r3, #2]
 8005b98:	2001      	movs	r0, #1
 8005b9a:	9000      	str	r0, [sp, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fcb4 	bl	800750a <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	761a      	strb	r2, [r3, #24]
		break;
 8005ba8:	e039      	b.n	8005c1e <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	789b      	ldrb	r3, [r3, #2]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f002 f83d 	bl	8007c30 <USBH_LL_GetURBState>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d127      	bne.n	8005c10 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8a9a      	ldrh	r2, [r3, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88db      	ldrh	r3, [r3, #6]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90f      	bls.n	8005bec <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8a9a      	ldrh	r2, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88db      	ldrh	r3, [r3, #6]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	88d2      	ldrh	r2, [r2, #6]
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e002      	b.n	8005bf2 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8a9b      	ldrh	r3, [r3, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	761a      	strb	r2, [r3, #24]
		break;
 8005c00:	e00c      	b.n	8005c1c <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f866 	bl	8005cda <USBH_MIDI_TransmitCallback>
		break;
 8005c0e:	e005      	b.n	8005c1c <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d102      	bne.n	8005c1c <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	761a      	strb	r2, [r3, #24]
		break;
 8005c1c:	bf00      	nop
	}
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7e5b      	ldrb	r3, [r3, #25]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d002      	beq.n	8005c4a <MIDI_ProcessReception+0x24>
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d00d      	beq.n	8005c64 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8005c48:	e043      	b.n	8005cd2 <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6919      	ldr	r1, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	891a      	ldrh	r2, [r3, #8]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fc7c 	bl	8007554 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	765a      	strb	r2, [r3, #25]
		break;
 8005c62:	e036      	b.n	8005cd2 <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 ffe0 	bl	8007c30 <USBH_LL_GetURBState>
 8005c70:	4603      	mov	r3, r0
 8005c72:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d12a      	bne.n	8005cd0 <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 ff43 	bl	8007b0c <USBH_LL_GetLastXferSize>
 8005c86:	4603      	mov	r3, r0
 8005c88:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8adb      	ldrh	r3, [r3, #22]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd15      	ble.n	8005cc4 <MIDI_ProcessReception+0x9e>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	891b      	ldrh	r3, [r3, #8]
 8005c9c:	893a      	ldrh	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8ada      	ldrh	r2, [r3, #22]
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	893b      	ldrh	r3, [r7, #8]
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	765a      	strb	r2, [r3, #25]
		break;
 8005cc2:	e005      	b.n	8005cd0 <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fd12 	bl	80076f4 <USBH_MIDI_ReceiveCallback>
		break;
 8005cd0:	bf00      	nop
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]

}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e029      	b.n	8005d5a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	79fa      	ldrb	r2, [r7, #7]
 8005d0a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f81f 	bl	8005d62 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f001 fe26 	bl	80079a4 <USBH_LL_Init>

  return USBH_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e009      	b.n	8005d88 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	33e0      	adds	r3, #224	@ 0xe0
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d9f2      	bls.n	8005d74 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e009      	b.n	8005da8 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dae:	d3f1      	bcc.n	8005d94 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2240      	movs	r2, #64	@ 0x40
 8005dd4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	331c      	adds	r3, #28
 8005e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f002 f8a0 	bl	8007f4c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f002 f897 	bl	8007f4c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8005e24:	2212      	movs	r2, #18
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f002 f88f 	bl	8007f4c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005e34:	223e      	movs	r2, #62	@ 0x3e
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f002 f887 	bl	8007f4c <memset>

  return USBH_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	33de      	adds	r3, #222	@ 0xde
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e004      	b.n	8005e8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e84:	2302      	movs	r3, #2
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e001      	b.n	8005e8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d204      	bcs.n	8005ec2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8005ec0:	e001      	b.n	8005ec6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	70fb      	strb	r3, [r7, #3]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70bb      	strb	r3, [r7, #2]
 8005eea:	4613      	mov	r3, r2
 8005eec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005efc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005efe:	e025      	b.n	8005f4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	221a      	movs	r2, #26
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	3308      	adds	r3, #8
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3302      	adds	r3, #2
 8005f10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	795b      	ldrb	r3, [r3, #5]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d002      	beq.n	8005f22 <USBH_FindInterface+0x4e>
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2bff      	cmp	r3, #255	@ 0xff
 8005f20:	d111      	bne.n	8005f46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f26:	78ba      	ldrb	r2, [r7, #2]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d002      	beq.n	8005f32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f2c:	78bb      	ldrb	r3, [r7, #2]
 8005f2e:	2bff      	cmp	r3, #255	@ 0xff
 8005f30:	d109      	bne.n	8005f46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f36:	787a      	ldrb	r2, [r7, #1]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d002      	beq.n	8005f42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f3c:	787b      	ldrb	r3, [r7, #1]
 8005f3e:	2bff      	cmp	r3, #255	@ 0xff
 8005f40:	d101      	bne.n	8005f46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	e006      	b.n	8005f54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d9d6      	bls.n	8005f00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f52:	23ff      	movs	r3, #255	@ 0xff
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fd57 	bl	8007a1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005f6e:	2101      	movs	r1, #1
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fe70 	bl	8007c56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af04      	add	r7, sp, #16
 8005f86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d102      	bne.n	8005fa2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b0b      	cmp	r3, #11
 8005faa:	f200 81bb 	bhi.w	8006324 <USBH_Process+0x3a4>
 8005fae:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <USBH_Process+0x34>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	08006017 	.word	0x08006017
 8005fbc:	0800607f 	.word	0x0800607f
 8005fc0:	080062bf 	.word	0x080062bf
 8005fc4:	08006325 	.word	0x08006325
 8005fc8:	0800611f 	.word	0x0800611f
 8005fcc:	08006265 	.word	0x08006265
 8005fd0:	08006155 	.word	0x08006155
 8005fd4:	08006175 	.word	0x08006175
 8005fd8:	08006193 	.word	0x08006193
 8005fdc:	080061d7 	.word	0x080061d7
 8005fe0:	080062a7 	.word	0x080062a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 819b 	beq.w	8006328 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ff8:	20c8      	movs	r0, #200	@ 0xc8
 8005ffa:	f001 fe76 	bl	8007cea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fd69 	bl	8007ad6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006014:	e188      	b.n	8006328 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800602e:	e18a      	b.n	8006346 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006036:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800603a:	d914      	bls.n	8006066 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006042:	3301      	adds	r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006052:	2b03      	cmp	r3, #3
 8006054:	d903      	bls.n	800605e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	220d      	movs	r2, #13
 800605a:	701a      	strb	r2, [r3, #0]
      break;
 800605c:	e173      	b.n	8006346 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
      break;
 8006064:	e16f      	b.n	8006346 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800606c:	f103 020a 	add.w	r2, r3, #10
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006076:	200a      	movs	r0, #10
 8006078:	f001 fe37 	bl	8007cea <USBH_Delay>
      break;
 800607c:	e163      	b.n	8006346 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800608e:	2104      	movs	r1, #4
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006094:	2064      	movs	r0, #100	@ 0x64
 8006096:	f001 fe28 	bl	8007cea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fcf4 	bl	8007a88 <USBH_LL_GetSpeed>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2205      	movs	r2, #5
 80060ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80060b0:	2100      	movs	r1, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fa9b 	bl	80075ee <USBH_AllocPipe>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060c0:	2180      	movs	r1, #128	@ 0x80
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fa93 	bl	80075ee <USBH_AllocPipe>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7919      	ldrb	r1, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060e4:	9202      	str	r2, [sp, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	9201      	str	r2, [sp, #4]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fa4d 	bl	8007590 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7959      	ldrb	r1, [r3, #5]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	9201      	str	r2, [sp, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	4603      	mov	r3, r0
 8006114:	2200      	movs	r2, #0
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fa3a 	bl	8007590 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800611c:	e113      	b.n	8006346 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f916 	bl	8006350 <USBH_HandleEnum>
 8006124:	4603      	mov	r3, r0
 8006126:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	f040 80fd 	bne.w	800632c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006140:	2b01      	cmp	r3, #1
 8006142:	d103      	bne.n	800614c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2208      	movs	r2, #8
 8006148:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800614a:	e0ef      	b.n	800632c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2207      	movs	r2, #7
 8006150:	701a      	strb	r2, [r3, #0]
      break;
 8006152:	e0eb      	b.n	800632c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80e8 	beq.w	8006330 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006166:	2101      	movs	r1, #1
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006172:	e0dd      	b.n	8006330 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fc3a 	bl	80069f6 <USBH_SetCfg>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 80d5 	bne.w	8006334 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2209      	movs	r2, #9
 800618e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006190:	e0d0      	b.n	8006334 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fc4a 	bl	8006a3c <USBH_SetFeature>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	220a      	movs	r2, #10
 80061b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061ba:	e0bd      	b.n	8006338 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	f040 80b9 	bne.w	8006338 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	220a      	movs	r2, #10
 80061ca:	701a      	strb	r2, [r3, #0]
      break;
 80061cc:	e0b4      	b.n	8006338 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	220a      	movs	r2, #10
 80061d2:	701a      	strb	r2, [r3, #0]
      break;
 80061d4:	e0b0      	b.n	8006338 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80ad 	beq.w	800633c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
 80061ee:	e016      	b.n	800621e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061f0:	7bfa      	ldrb	r2, [r7, #15]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32de      	adds	r2, #222	@ 0xde
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	791a      	ldrb	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006202:	429a      	cmp	r2, r3
 8006204:	d108      	bne.n	8006218 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006206:	7bfa      	ldrb	r2, [r7, #15]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	32de      	adds	r2, #222	@ 0xde
 800620c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006216:	e005      	b.n	8006224 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	3301      	adds	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0e5      	beq.n	80061f0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2206      	movs	r2, #6
 8006244:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800624c:	2103      	movs	r1, #3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006252:	e073      	b.n	800633c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	220d      	movs	r2, #13
 8006258:	701a      	strb	r2, [r3, #0]
      break;
 800625a:	e06f      	b.n	800633c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	220d      	movs	r2, #13
 8006260:	701a      	strb	r2, [r3, #0]
      break;
 8006262:	e06b      	b.n	800633c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d017      	beq.n	800629e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	4603      	mov	r3, r0
 800627c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	220b      	movs	r2, #11
 800628a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800628c:	e058      	b.n	8006340 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d154      	bne.n	8006340 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	220d      	movs	r2, #13
 800629a:	701a      	strb	r2, [r3, #0]
      break;
 800629c:	e050      	b.n	8006340 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	220d      	movs	r2, #13
 80062a2:	701a      	strb	r2, [r3, #0]
      break;
 80062a4:	e04c      	b.n	8006340 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d049      	beq.n	8006344 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
      }
      break;
 80062bc:	e042      	b.n	8006344 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fd4b 	bl	8005d62 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80062fa:	2105      	movs	r1, #5
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d107      	bne.n	800631c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fe23 	bl	8005f60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800631a:	e014      	b.n	8006346 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fb7d 	bl	8007a1c <USBH_LL_Start>
      break;
 8006322:	e010      	b.n	8006346 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006324:	bf00      	nop
 8006326:	e00e      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 8006328:	bf00      	nop
 800632a:	e00c      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 800632c:	bf00      	nop
 800632e:	e00a      	b.n	8006346 <USBH_Process+0x3c6>
    break;
 8006330:	bf00      	nop
 8006332:	e008      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 8006334:	bf00      	nop
 8006336:	e006      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 8006338:	bf00      	nop
 800633a:	e004      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 800633c:	bf00      	nop
 800633e:	e002      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <USBH_Process+0x3c6>
      break;
 8006344:	bf00      	nop
  }
  return USBH_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af04      	add	r7, sp, #16
 8006356:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800635c:	2301      	movs	r3, #1
 800635e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b07      	cmp	r3, #7
 8006366:	f200 81bd 	bhi.w	80066e4 <USBH_HandleEnum+0x394>
 800636a:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <USBH_HandleEnum+0x20>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006391 	.word	0x08006391
 8006374:	0800644b 	.word	0x0800644b
 8006378:	080064b5 	.word	0x080064b5
 800637c:	0800653f 	.word	0x0800653f
 8006380:	080065a9 	.word	0x080065a9
 8006384:	08006619 	.word	0x08006619
 8006388:	0800665f 	.word	0x0800665f
 800638c:	080066a5 	.word	0x080066a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006390:	2108      	movs	r1, #8
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa4c 	bl	8006830 <USBH_Get_DevDesc>
 8006398:	4603      	mov	r3, r0
 800639a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d12e      	bne.n	8006400 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7919      	ldrb	r1, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80063c6:	9202      	str	r2, [sp, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4603      	mov	r3, r0
 80063d0:	2280      	movs	r2, #128	@ 0x80
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 f8dc 	bl	8007590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7959      	ldrb	r1, [r3, #5]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063ec:	9202      	str	r2, [sp, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	9201      	str	r2, [sp, #4]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	4603      	mov	r3, r0
 80063f6:	2200      	movs	r2, #0
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f8c9 	bl	8007590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063fe:	e173      	b.n	80066e8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b03      	cmp	r3, #3
 8006404:	f040 8170 	bne.w	80066e8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800640e:	3301      	adds	r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800641e:	2b03      	cmp	r3, #3
 8006420:	d903      	bls.n	800642a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	220d      	movs	r2, #13
 8006426:	701a      	strb	r2, [r3, #0]
      break;
 8006428:	e15e      	b.n	80066e8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	795b      	ldrb	r3, [r3, #5]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f8fd 	bl	8007630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	791b      	ldrb	r3, [r3, #4]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f8f7 	bl	8007630 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
      break;
 8006448:	e14e      	b.n	80066e8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800644a:	2112      	movs	r1, #18
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9ef 	bl	8006830 <USBH_Get_DevDesc>
 8006452:	4603      	mov	r3, r0
 8006454:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006462:	e143      	b.n	80066ec <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b03      	cmp	r3, #3
 8006468:	f040 8140 	bne.w	80066ec <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006472:	3301      	adds	r3, #1
 8006474:	b2da      	uxtb	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006482:	2b03      	cmp	r3, #3
 8006484:	d903      	bls.n	800648e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	220d      	movs	r2, #13
 800648a:	701a      	strb	r2, [r3, #0]
      break;
 800648c:	e12e      	b.n	80066ec <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	795b      	ldrb	r3, [r3, #5]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f8cb 	bl	8007630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 f8c5 	bl	8007630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
      break;
 80064b2:	e11b      	b.n	80066ec <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80064b4:	2101      	movs	r1, #1
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa79 	bl	80069ae <USBH_SetAddress>
 80064bc:	4603      	mov	r3, r0
 80064be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d130      	bne.n	8006528 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80064c6:	2002      	movs	r0, #2
 80064c8:	f001 fc0f 	bl	8007cea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2203      	movs	r2, #3
 80064d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7919      	ldrb	r1, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064ee:	9202      	str	r2, [sp, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	9201      	str	r2, [sp, #4]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4603      	mov	r3, r0
 80064f8:	2280      	movs	r2, #128	@ 0x80
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f848 	bl	8007590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7959      	ldrb	r1, [r3, #5]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006514:	9202      	str	r2, [sp, #8]
 8006516:	2200      	movs	r2, #0
 8006518:	9201      	str	r2, [sp, #4]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4603      	mov	r3, r0
 800651e:	2200      	movs	r2, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 f835 	bl	8007590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006526:	e0e3      	b.n	80066f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b03      	cmp	r3, #3
 800652c:	f040 80e0 	bne.w	80066f0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	220d      	movs	r2, #13
 8006534:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	705a      	strb	r2, [r3, #1]
      break;
 800653c:	e0d8      	b.n	80066f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800653e:	2109      	movs	r1, #9
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9a1 	bl	8006888 <USBH_Get_CfgDesc>
 8006546:	4603      	mov	r3, r0
 8006548:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2204      	movs	r2, #4
 8006554:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006556:	e0cd      	b.n	80066f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	2b03      	cmp	r3, #3
 800655c:	f040 80ca 	bne.w	80066f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006566:	3301      	adds	r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006576:	2b03      	cmp	r3, #3
 8006578:	d903      	bls.n	8006582 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	220d      	movs	r2, #13
 800657e:	701a      	strb	r2, [r3, #0]
      break;
 8006580:	e0b8      	b.n	80066f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	795b      	ldrb	r3, [r3, #5]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 f851 	bl	8007630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	791b      	ldrb	r3, [r3, #4]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f84b 	bl	8007630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
      break;
 80065a6:	e0a5      	b.n	80066f4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f969 	bl	8006888 <USBH_Get_CfgDesc>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2205      	movs	r2, #5
 80065c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065c6:	e097      	b.n	80066f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	f040 8094 	bne.w	80066f8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d903      	bls.n	80065f2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	220d      	movs	r2, #13
 80065ee:	701a      	strb	r2, [r3, #0]
      break;
 80065f0:	e082      	b.n	80066f8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	795b      	ldrb	r3, [r3, #5]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 f819 	bl	8007630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	791b      	ldrb	r3, [r3, #4]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f813 	bl	8007630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
      break;
 8006616:	e06f      	b.n	80066f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800661e:	2b00      	cmp	r3, #0
 8006620:	d019      	beq.n	8006656 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800662e:	23ff      	movs	r3, #255	@ 0xff
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f953 	bl	80068dc <USBH_Get_StringDesc>
 8006636:	4603      	mov	r3, r0
 8006638:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2206      	movs	r2, #6
 8006644:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006646:	e059      	b.n	80066fc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d156      	bne.n	80066fc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2206      	movs	r2, #6
 8006652:	705a      	strb	r2, [r3, #1]
      break;
 8006654:	e052      	b.n	80066fc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2206      	movs	r2, #6
 800665a:	705a      	strb	r2, [r3, #1]
      break;
 800665c:	e04e      	b.n	80066fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006664:	2b00      	cmp	r3, #0
 8006666:	d019      	beq.n	800669c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006674:	23ff      	movs	r3, #255	@ 0xff
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f930 	bl	80068dc <USBH_Get_StringDesc>
 800667c:	4603      	mov	r3, r0
 800667e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d103      	bne.n	800668e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2207      	movs	r2, #7
 800668a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800668c:	e038      	b.n	8006700 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d135      	bne.n	8006700 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2207      	movs	r2, #7
 8006698:	705a      	strb	r2, [r3, #1]
      break;
 800669a:	e031      	b.n	8006700 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2207      	movs	r2, #7
 80066a0:	705a      	strb	r2, [r3, #1]
      break;
 80066a2:	e02d      	b.n	8006700 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d017      	beq.n	80066de <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80066ba:	23ff      	movs	r3, #255	@ 0xff
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f90d 	bl	80068dc <USBH_Get_StringDesc>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80066d0:	e018      	b.n	8006704 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d115      	bne.n	8006704 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
      break;
 80066dc:	e012      	b.n	8006704 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
      break;
 80066e2:	e00f      	b.n	8006704 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80066e4:	bf00      	nop
 80066e6:	e00e      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066e8:	bf00      	nop
 80066ea:	e00c      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066ec:	bf00      	nop
 80066ee:	e00a      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066f0:	bf00      	nop
 80066f2:	e008      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066f4:	bf00      	nop
 80066f6:	e006      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066f8:	bf00      	nop
 80066fa:	e004      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <USBH_HandleEnum+0x3b6>
      break;
 8006704:	bf00      	nop
  }
  return Status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f804 	bl	8006752 <USBH_HandleSof>
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b0b      	cmp	r3, #11
 8006762:	d10a      	bne.n	800677a <USBH_HandleSof+0x28>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
  }
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006792:	bf00      	nop
}
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80067ae:	bf00      	nop
}
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f922 	bl	8007a52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	791b      	ldrb	r3, [r3, #4]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 ff0b 	bl	8007630 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	795b      	ldrb	r3, [r3, #5]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 ff05 	bl	8007630 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800683c:	887b      	ldrh	r3, [r7, #2]
 800683e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006842:	d901      	bls.n	8006848 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006844:	2303      	movs	r3, #3
 8006846:	e01b      	b.n	8006880 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800684e:	887b      	ldrh	r3, [r7, #2]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006858:	2100      	movs	r1, #0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f872 	bl	8006944 <USBH_GetDescriptor>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006870:	887a      	ldrh	r2, [r7, #2]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f929 	bl	8006acc <USBH_ParseDevDesc>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	331c      	adds	r3, #28
 8006898:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a0:	d901      	bls.n	80068a6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e016      	b.n	80068d4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80068a6:	887b      	ldrh	r3, [r7, #2]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f846 	bl	8006944 <USBH_GetDescriptor>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80068c2:	887b      	ldrh	r3, [r7, #2]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9af 	bl	8006c2c <USBH_ParseCfgDesc>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	461a      	mov	r2, r3
 80068e8:	460b      	mov	r3, r1
 80068ea:	72fb      	strb	r3, [r7, #11]
 80068ec:	4613      	mov	r3, r2
 80068ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f6:	d802      	bhi.n	80068fe <USBH_Get_StringDesc+0x22>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01c      	b.n	800693c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800690a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006912:	893b      	ldrh	r3, [r7, #8]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	460b      	mov	r3, r1
 8006918:	2100      	movs	r1, #0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f812 	bl	8006944 <USBH_GetDescriptor>
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006930:	893a      	ldrh	r2, [r7, #8]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fb8d 	bl	8007054 <USBH_ParseStringDesc>
  }

  return status;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	607b      	str	r3, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	72fb      	strb	r3, [r7, #11]
 8006952:	4613      	mov	r3, r2
 8006954:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	789b      	ldrb	r3, [r3, #2]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d11c      	bne.n	8006998 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2206      	movs	r2, #6
 800696e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	893a      	ldrh	r2, [r7, #8]
 8006974:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006976:	893b      	ldrh	r3, [r7, #8]
 8006978:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800697c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006980:	d104      	bne.n	800698c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f240 4209 	movw	r2, #1033	@ 0x409
 8006988:	829a      	strh	r2, [r3, #20]
 800698a:	e002      	b.n	8006992 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8b3a      	ldrh	r2, [r7, #24]
 8006996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006998:	8b3b      	ldrh	r3, [r7, #24]
 800699a:	461a      	mov	r2, r3
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fba5 	bl	80070ee <USBH_CtlReq>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	789b      	ldrb	r3, [r3, #2]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d10f      	bne.n	80069e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2205      	movs	r2, #5
 80069cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fb81 	bl	80070ee <USBH_CtlReq>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	789b      	ldrb	r3, [r3, #2]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10e      	bne.n	8006a28 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2209      	movs	r2, #9
 8006a14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	887a      	ldrh	r2, [r7, #2]
 8006a1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb5e 	bl	80070ee <USBH_CtlReq>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	789b      	ldrb	r3, [r3, #2]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb3a 	bl	80070ee <USBH_CtlReq>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	789b      	ldrb	r3, [r3, #2]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10f      	bne.n	8006ab8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fb16 	bl	80070ee <USBH_CtlReq>
 8006ac2:	4603      	mov	r3, r0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006ae0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e094      	b.n	8006c1a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785a      	ldrb	r2, [r3, #1]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	3302      	adds	r3, #2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3303      	adds	r3, #3
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	791a      	ldrb	r2, [r3, #4]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	795a      	ldrb	r2, [r3, #5]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	799a      	ldrb	r2, [r3, #6]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	79da      	ldrb	r2, [r3, #7]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d11b      	bne.n	8006b86 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	79db      	ldrb	r3, [r3, #7]
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	dc0f      	bgt.n	8006b76 <USBH_ParseDevDesc+0xaa>
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	db0f      	blt.n	8006b7a <USBH_ParseDevDesc+0xae>
 8006b5a:	3b08      	subs	r3, #8
 8006b5c:	4a32      	ldr	r2, [pc, #200]	@ (8006c28 <USBH_ParseDevDesc+0x15c>)
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <USBH_ParseDevDesc+0xb6>
 8006b74:	e001      	b.n	8006b7a <USBH_ParseDevDesc+0xae>
 8006b76:	2b40      	cmp	r3, #64	@ 0x40
 8006b78:	d003      	beq.n	8006b82 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	71da      	strb	r2, [r3, #7]
        break;
 8006b80:	e000      	b.n	8006b84 <USBH_ParseDevDesc+0xb8>
        break;
 8006b82:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006b84:	e00e      	b.n	8006ba4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d107      	bne.n	8006ba0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	79db      	ldrb	r3, [r3, #7]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d005      	beq.n	8006ba4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	71da      	strb	r2, [r3, #7]
 8006b9e:	e001      	b.n	8006ba4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006ba4:	88fb      	ldrh	r3, [r7, #6]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d936      	bls.n	8006c18 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	3308      	adds	r3, #8
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3309      	adds	r3, #9
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	330a      	adds	r3, #10
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	330b      	adds	r3, #11
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	330c      	adds	r3, #12
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	330d      	adds	r3, #13
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	7b9a      	ldrb	r2, [r3, #14]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	7bda      	ldrb	r2, [r3, #15]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	7c1a      	ldrb	r2, [r3, #16]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	7c5a      	ldrb	r2, [r3, #17]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	01000101 	.word	0x01000101

08006c2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08c      	sub	sp, #48	@ 0x30
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006c40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e0da      	b.n	8006e14 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	d002      	beq.n	8006c70 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	2209      	movs	r2, #9
 8006c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	785a      	ldrb	r2, [r3, #1]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3302      	adds	r3, #2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	3303      	adds	r3, #3
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9a:	bf28      	it	cs
 8006c9c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	791a      	ldrb	r2, [r3, #4]
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	795a      	ldrb	r2, [r3, #5]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	799a      	ldrb	r2, [r3, #6]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	79da      	ldrb	r2, [r3, #7]
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	7a1a      	ldrb	r2, [r3, #8]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	f240 809d 	bls.w	8006e10 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006cd6:	2309      	movs	r3, #9
 8006cd8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006cde:	e081      	b.n	8006de4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ce0:	f107 0316 	add.w	r3, r7, #22
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce8:	f000 f9e7 	bl	80070ba <USBH_GetNextDesc>
 8006cec:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d176      	bne.n	8006de4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b09      	cmp	r3, #9
 8006cfc:	d002      	beq.n	8006d04 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2209      	movs	r2, #9
 8006d02:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d08:	221a      	movs	r2, #26
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	3308      	adds	r3, #8
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	4413      	add	r3, r2
 8006d14:	3302      	adds	r3, #2
 8006d16:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d1a:	69f8      	ldr	r0, [r7, #28]
 8006d1c:	f000 f87e 	bl	8006e1c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d2a:	e043      	b.n	8006db4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d2c:	f107 0316 	add.w	r3, r7, #22
 8006d30:	4619      	mov	r1, r3
 8006d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d34:	f000 f9c1 	bl	80070ba <USBH_GetNextDesc>
 8006d38:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	d138      	bne.n	8006db4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	795b      	ldrb	r3, [r3, #5]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d113      	bne.n	8006d72 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d003      	beq.n	8006d5a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	799b      	ldrb	r3, [r3, #6]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d10b      	bne.n	8006d72 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	79db      	ldrb	r3, [r3, #7]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <USBH_ParseCfgDesc+0x14e>
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b09      	cmp	r3, #9
 8006d68:	d007      	beq.n	8006d7a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	2209      	movs	r2, #9
 8006d6e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d70:	e003      	b.n	8006d7a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	2207      	movs	r2, #7
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	e000      	b.n	8006d7c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d7a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006d84:	3201      	adds	r2, #1
 8006d86:	00d2      	lsls	r2, r2, #3
 8006d88:	211a      	movs	r1, #26
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	3308      	adds	r3, #8
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	4413      	add	r3, r2
 8006d96:	3304      	adds	r3, #4
 8006d98:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d9c:	69b9      	ldr	r1, [r7, #24]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f870 	bl	8006e84 <USBH_ParseEPDesc>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8006daa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006dae:	3301      	adds	r3, #1
 8006db0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d204      	bcs.n	8006dca <USBH_ParseCfgDesc+0x19e>
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	885a      	ldrh	r2, [r3, #2]
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d8b0      	bhi.n	8006d2c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d201      	bcs.n	8006dda <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e01c      	b.n	8006e14 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8006dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dde:	3301      	adds	r3, #1
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d805      	bhi.n	8006df8 <USBH_ParseCfgDesc+0x1cc>
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	885a      	ldrh	r2, [r3, #2]
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	f63f af74 	bhi.w	8006ce0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	791b      	ldrb	r3, [r3, #4]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	bf28      	it	cs
 8006e00:	2302      	movcs	r3, #2
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d201      	bcs.n	8006e10 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e001      	b.n	8006e14 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8006e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3730      	adds	r7, #48	@ 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785a      	ldrb	r2, [r3, #1]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	789a      	ldrb	r2, [r3, #2]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	78da      	ldrb	r2, [r3, #3]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	bf28      	it	cs
 8006e50:	2302      	movcs	r3, #2
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	795a      	ldrb	r2, [r3, #5]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	799a      	ldrb	r2, [r3, #6]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	79da      	ldrb	r2, [r3, #7]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	7a1a      	ldrb	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	721a      	strb	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	785a      	ldrb	r2, [r3, #1]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	789a      	ldrb	r2, [r3, #2]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	78da      	ldrb	r2, [r3, #3]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3305      	adds	r3, #5
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	799a      	ldrb	r2, [r3, #6]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	889b      	ldrh	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee6:	d804      	bhi.n	8006ef2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8006eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef0:	d901      	bls.n	8006ef6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d136      	bne.n	8006f6e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	78db      	ldrb	r3, [r3, #3]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d108      	bne.n	8006f1e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	889b      	ldrh	r3, [r3, #4]
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f14:	f240 8097 	bls.w	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	75fb      	strb	r3, [r7, #23]
 8006f1c:	e093      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	78db      	ldrb	r3, [r3, #3]
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	889b      	ldrh	r3, [r3, #4]
 8006f2e:	2b40      	cmp	r3, #64	@ 0x40
 8006f30:	f240 8089 	bls.w	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006f34:	2303      	movs	r3, #3
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	e085      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	78db      	ldrb	r3, [r3, #3]
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d005      	beq.n	8006f52 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d10a      	bne.n	8006f68 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	799b      	ldrb	r3, [r3, #6]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <USBH_ParseEPDesc+0xde>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	799b      	ldrb	r3, [r3, #6]
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d970      	bls.n	8007044 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006f66:	e06d      	b.n	8007044 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	75fb      	strb	r3, [r7, #23]
 8006f6c:	e06b      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d13c      	bne.n	8006ff2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	78db      	ldrb	r3, [r3, #3]
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d005      	beq.n	8006f90 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	78db      	ldrb	r3, [r3, #3]
 8006f88:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	889b      	ldrh	r3, [r3, #4]
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d956      	bls.n	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006f9c:	e053      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d10e      	bne.n	8006fc8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	799b      	ldrb	r3, [r3, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d803      	bhi.n	8006fc2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8006fbe:	2b40      	cmp	r3, #64	@ 0x40
 8006fc0:	d941      	bls.n	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	75fb      	strb	r3, [r7, #23]
 8006fc6:	e03e      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	78db      	ldrb	r3, [r3, #3]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d10b      	bne.n	8006fec <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	799b      	ldrb	r3, [r3, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <USBH_ParseEPDesc+0x162>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	889b      	ldrh	r3, [r3, #4]
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe4:	d32f      	bcc.n	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	75fb      	strb	r3, [r7, #23]
 8006fea:	e02c      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006fec:	2303      	movs	r3, #3
 8006fee:	75fb      	strb	r3, [r7, #23]
 8006ff0:	e029      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d120      	bne.n	800703e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	78db      	ldrb	r3, [r3, #3]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	889b      	ldrh	r3, [r3, #4]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d01a      	beq.n	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007010:	2303      	movs	r3, #3
 8007012:	75fb      	strb	r3, [r7, #23]
 8007014:	e017      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b03      	cmp	r3, #3
 8007020:	d10a      	bne.n	8007038 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	799b      	ldrb	r3, [r3, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <USBH_ParseEPDesc+0x1ae>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	889b      	ldrh	r3, [r3, #4]
 800702e:	2b08      	cmp	r3, #8
 8007030:	d909      	bls.n	8007046 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007032:	2303      	movs	r3, #3
 8007034:	75fb      	strb	r3, [r7, #23]
 8007036:	e006      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007038:	2303      	movs	r3, #3
 800703a:	75fb      	strb	r3, [r7, #23]
 800703c:	e003      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800703e:	2303      	movs	r3, #3
 8007040:	75fb      	strb	r3, [r7, #23]
 8007042:	e000      	b.n	8007046 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007044:	bf00      	nop
  }

  return status;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d120      	bne.n	80070ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	1e9a      	subs	r2, r3, #2
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	4293      	cmp	r3, r2
 8007076:	bf28      	it	cs
 8007078:	4613      	movcs	r3, r2
 800707a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3302      	adds	r3, #2
 8007080:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007082:	2300      	movs	r3, #0
 8007084:	82fb      	strh	r3, [r7, #22]
 8007086:	e00b      	b.n	80070a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007088:	8afb      	ldrh	r3, [r7, #22]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	781a      	ldrb	r2, [r3, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3301      	adds	r3, #1
 8007098:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800709a:	8afb      	ldrh	r3, [r7, #22]
 800709c:	3302      	adds	r3, #2
 800709e:	82fb      	strh	r3, [r7, #22]
 80070a0:	8afa      	ldrh	r2, [r7, #22]
 80070a2:	8abb      	ldrh	r3, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d3ef      	bcc.n	8007088 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
  }
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	4413      	add	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80070fc:	2301      	movs	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	789b      	ldrb	r3, [r3, #2]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d002      	beq.n	800710e <USBH_CtlReq+0x20>
 8007108:	2b02      	cmp	r3, #2
 800710a:	d00f      	beq.n	800712c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800710c:	e027      	b.n	800715e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2202      	movs	r2, #2
 8007124:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007126:	2301      	movs	r3, #1
 8007128:	75fb      	strb	r3, [r7, #23]
      break;
 800712a:	e018      	b.n	800715e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f81b 	bl	8007168 <USBH_HandleControl>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <USBH_CtlReq+0x54>
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d106      	bne.n	8007150 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	761a      	strb	r2, [r3, #24]
      break;
 800714e:	e005      	b.n	800715c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d102      	bne.n	800715c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	709a      	strb	r2, [r3, #2]
      break;
 800715c:	bf00      	nop
  }
  return status;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007174:	2300      	movs	r3, #0
 8007176:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7e1b      	ldrb	r3, [r3, #24]
 800717c:	3b01      	subs	r3, #1
 800717e:	2b0a      	cmp	r3, #10
 8007180:	f200 8156 	bhi.w	8007430 <USBH_HandleControl+0x2c8>
 8007184:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <USBH_HandleControl+0x24>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071b9 	.word	0x080071b9
 8007190:	080071d3 	.word	0x080071d3
 8007194:	0800723d 	.word	0x0800723d
 8007198:	08007263 	.word	0x08007263
 800719c:	0800729b 	.word	0x0800729b
 80071a0:	080072c5 	.word	0x080072c5
 80071a4:	08007317 	.word	0x08007317
 80071a8:	08007339 	.word	0x08007339
 80071ac:	08007375 	.word	0x08007375
 80071b0:	0800739b 	.word	0x0800739b
 80071b4:	080073d9 	.word	0x080073d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f103 0110 	add.w	r1, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	795b      	ldrb	r3, [r3, #5]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f943 	bl	8007450 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	761a      	strb	r2, [r3, #24]
      break;
 80071d0:	e139      	b.n	8007446 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fd29 	bl	8007c30 <USBH_LL_GetURBState>
 80071de:	4603      	mov	r3, r0
 80071e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11e      	bne.n	8007226 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7c1b      	ldrb	r3, [r3, #16]
 80071ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8adb      	ldrh	r3, [r3, #22]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80071fa:	7b7b      	ldrb	r3, [r7, #13]
 80071fc:	2b80      	cmp	r3, #128	@ 0x80
 80071fe:	d103      	bne.n	8007208 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2203      	movs	r2, #3
 8007204:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007206:	e115      	b.n	8007434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2205      	movs	r2, #5
 800720c:	761a      	strb	r2, [r3, #24]
      break;
 800720e:	e111      	b.n	8007434 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007210:	7b7b      	ldrb	r3, [r7, #13]
 8007212:	2b80      	cmp	r3, #128	@ 0x80
 8007214:	d103      	bne.n	800721e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2209      	movs	r2, #9
 800721a:	761a      	strb	r2, [r3, #24]
      break;
 800721c:	e10a      	b.n	8007434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2207      	movs	r2, #7
 8007222:	761a      	strb	r2, [r3, #24]
      break;
 8007224:	e106      	b.n	8007434 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b04      	cmp	r3, #4
 800722a:	d003      	beq.n	8007234 <USBH_HandleControl+0xcc>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b02      	cmp	r3, #2
 8007230:	f040 8100 	bne.w	8007434 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	220b      	movs	r2, #11
 8007238:	761a      	strb	r2, [r3, #24]
      break;
 800723a:	e0fb      	b.n	8007434 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007242:	b29a      	uxth	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6899      	ldr	r1, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	899a      	ldrh	r2, [r3, #12]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	791b      	ldrb	r3, [r3, #4]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f93a 	bl	80074ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2204      	movs	r2, #4
 800725e:	761a      	strb	r2, [r3, #24]
      break;
 8007260:	e0f1      	b.n	8007446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	791b      	ldrb	r3, [r3, #4]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fce1 	bl	8007c30 <USBH_LL_GetURBState>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2209      	movs	r2, #9
 800727c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b05      	cmp	r3, #5
 8007282:	d102      	bne.n	800728a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007284:	2303      	movs	r3, #3
 8007286:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007288:	e0d6      	b.n	8007438 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b04      	cmp	r3, #4
 800728e:	f040 80d3 	bne.w	8007438 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220b      	movs	r2, #11
 8007296:	761a      	strb	r2, [r3, #24]
      break;
 8007298:	e0ce      	b.n	8007438 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6899      	ldr	r1, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	899a      	ldrh	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	795b      	ldrb	r3, [r3, #5]
 80072a6:	2001      	movs	r0, #1
 80072a8:	9000      	str	r0, [sp, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f8ea 	bl	8007484 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2206      	movs	r2, #6
 80072c0:	761a      	strb	r2, [r3, #24]
      break;
 80072c2:	e0c0      	b.n	8007446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	795b      	ldrb	r3, [r3, #5]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fcb0 	bl	8007c30 <USBH_LL_GetURBState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d103      	bne.n	80072e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2207      	movs	r2, #7
 80072de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072e0:	e0ac      	b.n	800743c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b05      	cmp	r3, #5
 80072e6:	d105      	bne.n	80072f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	220c      	movs	r2, #12
 80072ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80072ee:	2303      	movs	r3, #3
 80072f0:	73fb      	strb	r3, [r7, #15]
      break;
 80072f2:	e0a3      	b.n	800743c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d103      	bne.n	8007302 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2205      	movs	r2, #5
 80072fe:	761a      	strb	r2, [r3, #24]
      break;
 8007300:	e09c      	b.n	800743c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b04      	cmp	r3, #4
 8007306:	f040 8099 	bne.w	800743c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	220b      	movs	r2, #11
 800730e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007310:	2302      	movs	r3, #2
 8007312:	73fb      	strb	r3, [r7, #15]
      break;
 8007314:	e092      	b.n	800743c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f8d5 	bl	80074ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800732a:	b29a      	uxth	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2208      	movs	r2, #8
 8007334:	761a      	strb	r2, [r3, #24]

      break;
 8007336:	e086      	b.n	8007446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	791b      	ldrb	r3, [r3, #4]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fc76 	bl	8007c30 <USBH_LL_GetURBState>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	220d      	movs	r2, #13
 8007352:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007358:	e072      	b.n	8007440 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b04      	cmp	r3, #4
 800735e:	d103      	bne.n	8007368 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	220b      	movs	r2, #11
 8007364:	761a      	strb	r2, [r3, #24]
      break;
 8007366:	e06b      	b.n	8007440 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b05      	cmp	r3, #5
 800736c:	d168      	bne.n	8007440 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800736e:	2303      	movs	r3, #3
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	e065      	b.n	8007440 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	795b      	ldrb	r3, [r3, #5]
 8007378:	2201      	movs	r2, #1
 800737a:	9200      	str	r2, [sp, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	2100      	movs	r1, #0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f87f 	bl	8007484 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	220a      	movs	r2, #10
 8007396:	761a      	strb	r2, [r3, #24]
      break;
 8007398:	e055      	b.n	8007446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	795b      	ldrb	r3, [r3, #5]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fc45 	bl	8007c30 <USBH_LL_GetURBState>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	220d      	movs	r2, #13
 80073b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073ba:	e043      	b.n	8007444 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d103      	bne.n	80073ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2209      	movs	r2, #9
 80073c6:	761a      	strb	r2, [r3, #24]
      break;
 80073c8:	e03c      	b.n	8007444 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d139      	bne.n	8007444 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	220b      	movs	r2, #11
 80073d4:	761a      	strb	r2, [r3, #24]
      break;
 80073d6:	e035      	b.n	8007444 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	7e5b      	ldrb	r3, [r3, #25]
 80073dc:	3301      	adds	r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	765a      	strb	r2, [r3, #25]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7e5b      	ldrb	r3, [r3, #25]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d806      	bhi.n	80073fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80073f8:	e025      	b.n	8007446 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007400:	2106      	movs	r1, #6
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	795b      	ldrb	r3, [r3, #5]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f90c 	bl	8007630 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f906 	bl	8007630 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	73fb      	strb	r3, [r7, #15]
      break;
 800742e:	e00a      	b.n	8007446 <USBH_HandleControl+0x2de>

    default:
      break;
 8007430:	bf00      	nop
 8007432:	e008      	b.n	8007446 <USBH_HandleControl+0x2de>
      break;
 8007434:	bf00      	nop
 8007436:	e006      	b.n	8007446 <USBH_HandleControl+0x2de>
      break;
 8007438:	bf00      	nop
 800743a:	e004      	b.n	8007446 <USBH_HandleControl+0x2de>
      break;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <USBH_HandleControl+0x2de>
      break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <USBH_HandleControl+0x2de>
      break;
 8007444:	bf00      	nop
  }

  return status;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af04      	add	r7, sp, #16
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800745e:	79f9      	ldrb	r1, [r7, #7]
 8007460:	2300      	movs	r3, #0
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	2308      	movs	r3, #8
 8007466:	9302      	str	r3, [sp, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fbaa 	bl	8007bce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af04      	add	r7, sp, #16
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	460b      	mov	r3, r1
 8007494:	80fb      	strh	r3, [r7, #6]
 8007496:	4613      	mov	r3, r2
 8007498:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074a8:	7979      	ldrb	r1, [r7, #5]
 80074aa:	7e3b      	ldrb	r3, [r7, #24]
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	9302      	str	r3, [sp, #8]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	2301      	movs	r3, #1
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fb85 	bl	8007bce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af04      	add	r7, sp, #16
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	4611      	mov	r1, r2
 80074da:	461a      	mov	r2, r3
 80074dc:	460b      	mov	r3, r1
 80074de:	80fb      	strh	r3, [r7, #6]
 80074e0:	4613      	mov	r3, r2
 80074e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074e4:	7979      	ldrb	r1, [r7, #5]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	9302      	str	r3, [sp, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	2301      	movs	r3, #1
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	2201      	movs	r2, #1
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fb67 	bl	8007bce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007500:	2300      	movs	r3, #0

}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b088      	sub	sp, #32
 800750e:	af04      	add	r7, sp, #16
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	4611      	mov	r1, r2
 8007516:	461a      	mov	r2, r3
 8007518:	460b      	mov	r3, r1
 800751a:	80fb      	strh	r3, [r7, #6]
 800751c:	4613      	mov	r3, r2
 800751e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800752e:	7979      	ldrb	r1, [r7, #5]
 8007530:	7e3b      	ldrb	r3, [r7, #24]
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	2301      	movs	r3, #1
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2302      	movs	r3, #2
 8007542:	2200      	movs	r2, #0
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fb42 	bl	8007bce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af04      	add	r7, sp, #16
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	460b      	mov	r3, r1
 8007564:	80fb      	strh	r3, [r7, #6]
 8007566:	4613      	mov	r3, r2
 8007568:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800756a:	7979      	ldrb	r1, [r7, #5]
 800756c:	2300      	movs	r3, #0
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	2301      	movs	r3, #1
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2302      	movs	r3, #2
 800757e:	2201      	movs	r2, #1
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fb24 	bl	8007bce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af04      	add	r7, sp, #16
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	70fb      	strb	r3, [r7, #3]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70bb      	strb	r3, [r7, #2]
 80075a6:	4613      	mov	r3, r2
 80075a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80075aa:	7878      	ldrb	r0, [r7, #1]
 80075ac:	78ba      	ldrb	r2, [r7, #2]
 80075ae:	78f9      	ldrb	r1, [r7, #3]
 80075b0:	8b3b      	ldrh	r3, [r7, #24]
 80075b2:	9302      	str	r3, [sp, #8]
 80075b4:	7d3b      	ldrb	r3, [r7, #20]
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	7c3b      	ldrb	r3, [r7, #16]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4603      	mov	r3, r0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fab7 	bl	8007b32 <USBH_LL_OpenPipe>

  return USBH_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fad6 	bl	8007b90 <USBH_LL_ClosePipe>

  return USBH_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f836 	bl	800766c <USBH_GetFreePipe>
 8007600:	4603      	mov	r3, r0
 8007602:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800760a:	4293      	cmp	r3, r2
 800760c:	d00a      	beq.n	8007624 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	89fb      	ldrh	r3, [r7, #14]
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	33e0      	adds	r3, #224	@ 0xe0
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007624:	89fb      	ldrh	r3, [r7, #14]
 8007626:	b2db      	uxtb	r3, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2b0f      	cmp	r3, #15
 8007640:	d80d      	bhi.n	800765e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	33e0      	adds	r3, #224	@ 0xe0
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	33e0      	adds	r3, #224	@ 0xe0
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
 800767c:	e00f      	b.n	800769e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	33e0      	adds	r3, #224	@ 0xe0
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	b29b      	uxth	r3, r3
 8007696:	e007      	b.n	80076a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	3301      	adds	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b0f      	cmp	r3, #15
 80076a2:	d9ec      	bls.n	800767e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80076a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <MIDI_Application>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MIDI_Application(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
	if (Appli_state == APPLICATION_READY)
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <MIDI_Application+0x34>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d107      	bne.n	80076d0 <MIDI_Application+0x1c>
	{
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 80076c0:	2240      	movs	r2, #64	@ 0x40
 80076c2:	490a      	ldr	r1, [pc, #40]	@ (80076ec <MIDI_Application+0x38>)
 80076c4:	480a      	ldr	r0, [pc, #40]	@ (80076f0 <MIDI_Application+0x3c>)
 80076c6:	f7fe fa12 	bl	8005aee <USBH_MIDI_Receive>
		Appli_state = APPLICATION_START;
 80076ca:	4b07      	ldr	r3, [pc, #28]	@ (80076e8 <MIDI_Application+0x34>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
	}
	if (Appli_state == APPLICATION_START)
	{
		//....pffff......grrrrr......
	}
	if (Appli_state == APPLICATION_DISCONNECT)
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <MIDI_Application+0x34>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d105      	bne.n	80076e4 <MIDI_Application+0x30>
	{
		Appli_state = APPLICATION_IDLE;
 80076d8:	4b03      	ldr	r3, [pc, #12]	@ (80076e8 <MIDI_Application+0x34>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80076de:	4804      	ldr	r0, [pc, #16]	@ (80076f0 <MIDI_Application+0x3c>)
 80076e0:	f7fe f9a1 	bl	8005a26 <USBH_MIDI_Stop>
	}
}
 80076e4:	bf00      	nop
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000544 	.word	0x20000544
 80076ec:	2000012c 	.word	0x2000012c
 80076f0:	2000016c 	.word	0x2000016c

080076f4 <USBH_MIDI_ReceiveCallback>:

void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 80076fc:	2240      	movs	r2, #64	@ 0x40
 80076fe:	4916      	ldr	r1, [pc, #88]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 8007700:	4816      	ldr	r0, [pc, #88]	@ (800775c <USBH_MIDI_ReceiveCallback+0x68>)
 8007702:	f7fe f9f4 	bl	8005aee <USBH_MIDI_Receive>
    HAL_UART_Transmit(&huart2, MIDI_RX_Buffer, RX_BUFF_SIZE, HAL_MAX_DELAY);
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	2240      	movs	r2, #64	@ 0x40
 800770c:	4912      	ldr	r1, [pc, #72]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 800770e:	4814      	ldr	r0, [pc, #80]	@ (8007760 <USBH_MIDI_ReceiveCallback+0x6c>)
 8007710:	f7fc faf2 	bl	8003cf8 <HAL_UART_Transmit>
    sprintf(buffer, "%02X %02X %02X %02X\r\n", MIDI_RX_Buffer[0], MIDI_RX_Buffer[1], MIDI_RX_Buffer[2], MIDI_RX_Buffer[3]);
 8007714:	4b10      	ldr	r3, [pc, #64]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	4b0f      	ldr	r3, [pc, #60]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	4618      	mov	r0, r3
 8007720:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 8007722:	789b      	ldrb	r3, [r3, #2]
 8007724:	461a      	mov	r2, r3
 8007726:	4b0c      	ldr	r3, [pc, #48]	@ (8007758 <USBH_MIDI_ReceiveCallback+0x64>)
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	9200      	str	r2, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	460a      	mov	r2, r1
 8007732:	490c      	ldr	r1, [pc, #48]	@ (8007764 <USBH_MIDI_ReceiveCallback+0x70>)
 8007734:	480c      	ldr	r0, [pc, #48]	@ (8007768 <USBH_MIDI_ReceiveCallback+0x74>)
 8007736:	f000 fbe9 	bl	8007f0c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY);
 800773a:	480b      	ldr	r0, [pc, #44]	@ (8007768 <USBH_MIDI_ReceiveCallback+0x74>)
 800773c:	f7f8 fd48 	bl	80001d0 <strlen>
 8007740:	4603      	mov	r3, r0
 8007742:	b29a      	uxth	r2, r3
 8007744:	f04f 33ff 	mov.w	r3, #4294967295
 8007748:	4907      	ldr	r1, [pc, #28]	@ (8007768 <USBH_MIDI_ReceiveCallback+0x74>)
 800774a:	4808      	ldr	r0, [pc, #32]	@ (800776c <USBH_MIDI_ReceiveCallback+0x78>)
 800774c:	f7fc fad4 	bl	8003cf8 <HAL_UART_Transmit>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2000012c 	.word	0x2000012c
 800775c:	2000016c 	.word	0x2000016c
 8007760:	20000098 	.word	0x20000098
 8007764:	08008720 	.word	0x08008720
 8007768:	20000548 	.word	0x20000548
 800776c:	200000e0 	.word	0x200000e0

08007770 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007774:	2201      	movs	r2, #1
 8007776:	4910      	ldr	r1, [pc, #64]	@ (80077b8 <MX_USB_HOST_Init+0x48>)
 8007778:	4810      	ldr	r0, [pc, #64]	@ (80077bc <MX_USB_HOST_Init+0x4c>)
 800777a:	f7fe fab8 	bl	8005cee <USBH_Init>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007784:	f7f9 f814 	bl	80007b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8007788:	490d      	ldr	r1, [pc, #52]	@ (80077c0 <MX_USB_HOST_Init+0x50>)
 800778a:	480c      	ldr	r0, [pc, #48]	@ (80077bc <MX_USB_HOST_Init+0x4c>)
 800778c:	f7fe fb5c 	bl	8005e48 <USBH_RegisterClass>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007796:	f7f9 f80b 	bl	80007b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800779a:	4808      	ldr	r0, [pc, #32]	@ (80077bc <MX_USB_HOST_Init+0x4c>)
 800779c:	f7fe fbe0 	bl	8005f60 <USBH_Start>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80077a6:	f7f9 f803 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 80077aa:	2240      	movs	r2, #64	@ 0x40
 80077ac:	4905      	ldr	r1, [pc, #20]	@ (80077c4 <MX_USB_HOST_Init+0x54>)
 80077ae:	4803      	ldr	r0, [pc, #12]	@ (80077bc <MX_USB_HOST_Init+0x4c>)
 80077b0:	f7fe f99d 	bl	8005aee <USBH_MIDI_Receive>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80077b4:	bf00      	nop
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	2000016c 	.word	0x2000016c
 80077c0:	2000000c 	.word	0x2000000c
 80077c4:	2000012c 	.word	0x2000012c

080077c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80077cc:	4802      	ldr	r0, [pc, #8]	@ (80077d8 <MX_USB_HOST_Process+0x10>)
 80077ce:	f7fe fbd7 	bl	8005f80 <USBH_Process>
}
 80077d2:	bf00      	nop
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	2000016c 	.word	0x2000016c

080077dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d819      	bhi.n	8007824 <USBH_UserProcess+0x48>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <USBH_UserProcess+0x1c>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007825 	.word	0x08007825
 80077fc:	08007815 	.word	0x08007815
 8007800:	08007825 	.word	0x08007825
 8007804:	0800781d 	.word	0x0800781d
 8007808:	0800780d 	.word	0x0800780d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800780c:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <USBH_UserProcess+0x58>)
 800780e:	2203      	movs	r2, #3
 8007810:	701a      	strb	r2, [r3, #0]
  break;
 8007812:	e008      	b.n	8007826 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007814:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <USBH_UserProcess+0x58>)
 8007816:	2202      	movs	r2, #2
 8007818:	701a      	strb	r2, [r3, #0]
  break;
 800781a:	e004      	b.n	8007826 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <USBH_UserProcess+0x58>)
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
  break;
 8007822:	e000      	b.n	8007826 <USBH_UserProcess+0x4a>

  default:
  break;
 8007824:	bf00      	nop
  }
  MIDI_Application();
 8007826:	f7ff ff45 	bl	80076b4 <MIDI_Application>
  /* USER CODE END CALL_BACK_1 */
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000544 	.word	0x20000544

08007838 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	@ 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007858:	d147      	bne.n	80078ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	4b25      	ldr	r3, [pc, #148]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007862:	4a24      	ldr	r2, [pc, #144]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 8007864:	f043 0301 	orr.w	r3, r3, #1
 8007868:	6313      	str	r3, [r2, #48]	@ 0x30
 800786a:	4b22      	ldr	r3, [pc, #136]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800787a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007884:	f107 0314 	add.w	r3, r7, #20
 8007888:	4619      	mov	r1, r3
 800788a:	481b      	ldr	r0, [pc, #108]	@ (80078f8 <HAL_HCD_MspInit+0xc0>)
 800788c:	f7f9 fa62 	bl	8000d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007890:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007896:	2302      	movs	r3, #2
 8007898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800789e:	2303      	movs	r3, #3
 80078a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078a2:	230a      	movs	r3, #10
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	4812      	ldr	r0, [pc, #72]	@ (80078f8 <HAL_HCD_MspInit+0xc0>)
 80078ae:	f7f9 fa51 	bl	8000d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078b2:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 80078b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b6:	4a0f      	ldr	r2, [pc, #60]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 80078b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	4a0b      	ldr	r2, [pc, #44]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 80078c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <HAL_HCD_MspInit+0xbc>)
 80078d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	2043      	movs	r0, #67	@ 0x43
 80078e0:	f7f9 fa01 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078e4:	2043      	movs	r0, #67	@ 0x43
 80078e6:	f7f9 fa1a 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078ea:	bf00      	nop
 80078ec:	3728      	adds	r7, #40	@ 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020000 	.word	0x40020000

080078fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe ff0f 	bl	800672e <USBH_LL_IncTimer>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe ff47 	bl	80067ba <USBH_LL_Connect>
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe ff50 	bl	80067e8 <USBH_LL_Disconnect>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
 800795c:	4613      	mov	r3, r2
 800795e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe ff01 	bl	8006782 <USBH_LL_PortEnabled>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe ff01 	bl	800679e <USBH_LL_PortDisabled>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d12a      	bne.n	8007a0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80079b6:	4a18      	ldr	r2, [pc, #96]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079c2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079c6:	4b14      	ldr	r3, [pc, #80]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80079cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80079ce:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079d0:	2208      	movs	r2, #8
 80079d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80079d4:	4b10      	ldr	r3, [pc, #64]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079d6:	2201      	movs	r2, #1
 80079d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079da:	4b0f      	ldr	r3, [pc, #60]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079dc:	2200      	movs	r2, #0
 80079de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80079e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079e2:	2202      	movs	r2, #2
 80079e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80079ec:	480a      	ldr	r0, [pc, #40]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079ee:	f7f9 fb66 	bl	80010be <HAL_HCD_Init>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079f8:	f7f8 feda 	bl	80007b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079fc:	4806      	ldr	r0, [pc, #24]	@ (8007a18 <USBH_LL_Init+0x74>)
 80079fe:	f7f9 ffc7 	bl	8001990 <HAL_HCD_GetCurrentFrame>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe fe82 	bl	8006710 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000568 	.word	0x20000568

08007a1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f9 ff34 	bl	80018a0 <HAL_HCD_Start>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f95e 	bl	8007d00 <USBH_Get_USB_Status>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7f9 ff3c 	bl	80018e6 <HAL_HCD_Stop>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f943 	bl	8007d00 <USBH_Get_USB_Status>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7f9 ff86 	bl	80019ac <HAL_HCD_GetCurrentSpeed>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d00c      	beq.n	8007ac0 <USBH_LL_GetSpeed+0x38>
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d80d      	bhi.n	8007ac6 <USBH_LL_GetSpeed+0x3e>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <USBH_LL_GetSpeed+0x2c>
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d003      	beq.n	8007aba <USBH_LL_GetSpeed+0x32>
 8007ab2:	e008      	b.n	8007ac6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e008      	b.n	8007acc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e005      	b.n	8007acc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	e002      	b.n	8007acc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aca:	bf00      	nop
  }
  return  speed;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7f9 ff17 	bl	8001920 <HAL_HCD_ResetPort>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f901 	bl	8007d00 <USBH_Get_USB_Status>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f9 ff1f 	bl	8001966 <HAL_HCD_HC_GetXferCount>
 8007b28:	4603      	mov	r3, r0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b32:	b590      	push	{r4, r7, lr}
 8007b34:	b089      	sub	sp, #36	@ 0x24
 8007b36:	af04      	add	r7, sp, #16
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4603      	mov	r3, r0
 8007b42:	70fb      	strb	r3, [r7, #3]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70bb      	strb	r3, [r7, #2]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007b5a:	787c      	ldrb	r4, [r7, #1]
 8007b5c:	78ba      	ldrb	r2, [r7, #2]
 8007b5e:	78f9      	ldrb	r1, [r7, #3]
 8007b60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4623      	mov	r3, r4
 8007b72:	f7f9 fb0b 	bl	800118c <HAL_HCD_HC_Init>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f8bf 	bl	8007d00 <USBH_Get_USB_Status>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}

08007b90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	4611      	mov	r1, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7f9 fba4 	bl	80012fc <HAL_HCD_HC_Halt>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f8a0 	bl	8007d00 <USBH_Get_USB_Status>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007bce:	b590      	push	{r4, r7, lr}
 8007bd0:	b089      	sub	sp, #36	@ 0x24
 8007bd2:	af04      	add	r7, sp, #16
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	70fb      	strb	r3, [r7, #3]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70bb      	strb	r3, [r7, #2]
 8007be4:	4613      	mov	r3, r2
 8007be6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007bf6:	787c      	ldrb	r4, [r7, #1]
 8007bf8:	78ba      	ldrb	r2, [r7, #2]
 8007bfa:	78f9      	ldrb	r1, [r7, #3]
 8007bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4623      	mov	r3, r4
 8007c12:	f7f9 fb97 	bl	8001344 <HAL_HCD_HC_SubmitRequest>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f86f 	bl	8007d00 <USBH_Get_USB_Status>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd90      	pop	{r4, r7, pc}

08007c30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7f9 fe78 	bl	800193c <HAL_HCD_HC_GetURBState>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d103      	bne.n	8007c74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f872 	bl	8007d58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c74:	20c8      	movs	r0, #200	@ 0xc8
 8007c76:	f7f8 ff37 	bl	8000ae8 <HAL_Delay>
  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
 8007c90:	4613      	mov	r3, r2
 8007c92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	3317      	adds	r3, #23
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	68f9      	ldr	r1, [r7, #12]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	333c      	adds	r3, #60	@ 0x3c
 8007cc2:	78ba      	ldrb	r2, [r7, #2]
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e009      	b.n	8007cdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	333d      	adds	r3, #61	@ 0x3d
 8007cd8:	78ba      	ldrb	r2, [r7, #2]
 8007cda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f8 fef8 	bl	8000ae8 <HAL_Delay>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d817      	bhi.n	8007d44 <USBH_Get_USB_Status+0x44>
 8007d14:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <USBH_Get_USB_Status+0x1c>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d33 	.word	0x08007d33
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d3f 	.word	0x08007d3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	e00b      	b.n	8007d4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d32:	2302      	movs	r3, #2
 8007d34:	73fb      	strb	r3, [r7, #15]
    break;
 8007d36:	e008      	b.n	8007d4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3c:	e005      	b.n	8007d4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	73fb      	strb	r3, [r7, #15]
    break;
 8007d42:	e002      	b.n	8007d4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d44:	2302      	movs	r3, #2
 8007d46:	73fb      	strb	r3, [r7, #15]
    break;
 8007d48:	bf00      	nop
  }
  return usb_status;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
 8007d70:	e001      	b.n	8007d76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4803      	ldr	r0, [pc, #12]	@ (8007d8c <MX_DriverVbusFS+0x34>)
 8007d7e:	f7f9 f985 	bl	800108c <HAL_GPIO_WritePin>
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40020800 	.word	0x40020800

08007d90 <malloc>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <malloc+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f000 b82d 	b.w	8007df4 <_malloc_r>
 8007d9a:	bf00      	nop
 8007d9c:	2000002c 	.word	0x2000002c

08007da0 <free>:
 8007da0:	4b02      	ldr	r3, [pc, #8]	@ (8007dac <free+0xc>)
 8007da2:	4601      	mov	r1, r0
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f000 b90f 	b.w	8007fc8 <_free_r>
 8007daa:	bf00      	nop
 8007dac:	2000002c 	.word	0x2000002c

08007db0 <sbrk_aligned>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4e0f      	ldr	r6, [pc, #60]	@ (8007df0 <sbrk_aligned+0x40>)
 8007db4:	460c      	mov	r4, r1
 8007db6:	6831      	ldr	r1, [r6, #0]
 8007db8:	4605      	mov	r5, r0
 8007dba:	b911      	cbnz	r1, 8007dc2 <sbrk_aligned+0x12>
 8007dbc:	f000 f8ce 	bl	8007f5c <_sbrk_r>
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 f8c9 	bl	8007f5c <_sbrk_r>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d103      	bne.n	8007dd6 <sbrk_aligned+0x26>
 8007dce:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d0f8      	beq.n	8007dd2 <sbrk_aligned+0x22>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 f8ba 	bl	8007f5c <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1f2      	bne.n	8007dd2 <sbrk_aligned+0x22>
 8007dec:	e7ef      	b.n	8007dce <sbrk_aligned+0x1e>
 8007dee:	bf00      	nop
 8007df0:	20000948 	.word	0x20000948

08007df4 <_malloc_r>:
 8007df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df8:	1ccd      	adds	r5, r1, #3
 8007dfa:	f025 0503 	bic.w	r5, r5, #3
 8007dfe:	3508      	adds	r5, #8
 8007e00:	2d0c      	cmp	r5, #12
 8007e02:	bf38      	it	cc
 8007e04:	250c      	movcc	r5, #12
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	4606      	mov	r6, r0
 8007e0a:	db01      	blt.n	8007e10 <_malloc_r+0x1c>
 8007e0c:	42a9      	cmp	r1, r5
 8007e0e:	d904      	bls.n	8007e1a <_malloc_r+0x26>
 8007e10:	230c      	movs	r3, #12
 8007e12:	6033      	str	r3, [r6, #0]
 8007e14:	2000      	movs	r0, #0
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef0 <_malloc_r+0xfc>
 8007e1e:	f000 f869 	bl	8007ef4 <__malloc_lock>
 8007e22:	f8d8 3000 	ldr.w	r3, [r8]
 8007e26:	461c      	mov	r4, r3
 8007e28:	bb44      	cbnz	r4, 8007e7c <_malloc_r+0x88>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ffbf 	bl	8007db0 <sbrk_aligned>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	4604      	mov	r4, r0
 8007e36:	d158      	bne.n	8007eea <_malloc_r+0xf6>
 8007e38:	f8d8 4000 	ldr.w	r4, [r8]
 8007e3c:	4627      	mov	r7, r4
 8007e3e:	2f00      	cmp	r7, #0
 8007e40:	d143      	bne.n	8007eca <_malloc_r+0xd6>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d04b      	beq.n	8007ede <_malloc_r+0xea>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	eb04 0903 	add.w	r9, r4, r3
 8007e50:	f000 f884 	bl	8007f5c <_sbrk_r>
 8007e54:	4581      	cmp	r9, r0
 8007e56:	d142      	bne.n	8007ede <_malloc_r+0xea>
 8007e58:	6821      	ldr	r1, [r4, #0]
 8007e5a:	1a6d      	subs	r5, r5, r1
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ffa6 	bl	8007db0 <sbrk_aligned>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d03a      	beq.n	8007ede <_malloc_r+0xea>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	442b      	add	r3, r5
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	bb62      	cbnz	r2, 8007ed0 <_malloc_r+0xdc>
 8007e76:	f8c8 7000 	str.w	r7, [r8]
 8007e7a:	e00f      	b.n	8007e9c <_malloc_r+0xa8>
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	1b52      	subs	r2, r2, r5
 8007e80:	d420      	bmi.n	8007ec4 <_malloc_r+0xd0>
 8007e82:	2a0b      	cmp	r2, #11
 8007e84:	d917      	bls.n	8007eb6 <_malloc_r+0xc2>
 8007e86:	1961      	adds	r1, r4, r5
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	6025      	str	r5, [r4, #0]
 8007e8c:	bf18      	it	ne
 8007e8e:	6059      	strne	r1, [r3, #4]
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	bf08      	it	eq
 8007e94:	f8c8 1000 	streq.w	r1, [r8]
 8007e98:	5162      	str	r2, [r4, r5]
 8007e9a:	604b      	str	r3, [r1, #4]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 f82f 	bl	8007f00 <__malloc_unlock>
 8007ea2:	f104 000b 	add.w	r0, r4, #11
 8007ea6:	1d23      	adds	r3, r4, #4
 8007ea8:	f020 0007 	bic.w	r0, r0, #7
 8007eac:	1ac2      	subs	r2, r0, r3
 8007eae:	bf1c      	itt	ne
 8007eb0:	1a1b      	subne	r3, r3, r0
 8007eb2:	50a3      	strne	r3, [r4, r2]
 8007eb4:	e7af      	b.n	8007e16 <_malloc_r+0x22>
 8007eb6:	6862      	ldr	r2, [r4, #4]
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	bf0c      	ite	eq
 8007ebc:	f8c8 2000 	streq.w	r2, [r8]
 8007ec0:	605a      	strne	r2, [r3, #4]
 8007ec2:	e7eb      	b.n	8007e9c <_malloc_r+0xa8>
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	6864      	ldr	r4, [r4, #4]
 8007ec8:	e7ae      	b.n	8007e28 <_malloc_r+0x34>
 8007eca:	463c      	mov	r4, r7
 8007ecc:	687f      	ldr	r7, [r7, #4]
 8007ece:	e7b6      	b.n	8007e3e <_malloc_r+0x4a>
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d1fb      	bne.n	8007ed0 <_malloc_r+0xdc>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6053      	str	r3, [r2, #4]
 8007edc:	e7de      	b.n	8007e9c <_malloc_r+0xa8>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f80c 	bl	8007f00 <__malloc_unlock>
 8007ee8:	e794      	b.n	8007e14 <_malloc_r+0x20>
 8007eea:	6005      	str	r5, [r0, #0]
 8007eec:	e7d6      	b.n	8007e9c <_malloc_r+0xa8>
 8007eee:	bf00      	nop
 8007ef0:	2000094c 	.word	0x2000094c

08007ef4 <__malloc_lock>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	@ (8007efc <__malloc_lock+0x8>)
 8007ef6:	f000 b865 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007efa:	bf00      	nop
 8007efc:	20000a8c 	.word	0x20000a8c

08007f00 <__malloc_unlock>:
 8007f00:	4801      	ldr	r0, [pc, #4]	@ (8007f08 <__malloc_unlock+0x8>)
 8007f02:	f000 b860 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007f06:	bf00      	nop
 8007f08:	20000a8c 	.word	0x20000a8c

08007f0c <siprintf>:
 8007f0c:	b40e      	push	{r1, r2, r3}
 8007f0e:	b500      	push	{lr}
 8007f10:	b09c      	sub	sp, #112	@ 0x70
 8007f12:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f14:	9002      	str	r0, [sp, #8]
 8007f16:	9006      	str	r0, [sp, #24]
 8007f18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f1c:	4809      	ldr	r0, [pc, #36]	@ (8007f44 <siprintf+0x38>)
 8007f1e:	9107      	str	r1, [sp, #28]
 8007f20:	9104      	str	r1, [sp, #16]
 8007f22:	4909      	ldr	r1, [pc, #36]	@ (8007f48 <siprintf+0x3c>)
 8007f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f28:	9105      	str	r1, [sp, #20]
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	a902      	add	r1, sp, #8
 8007f30:	f000 f8f0 	bl	8008114 <_svfiprintf_r>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	2200      	movs	r2, #0
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	b01c      	add	sp, #112	@ 0x70
 8007f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f40:	b003      	add	sp, #12
 8007f42:	4770      	bx	lr
 8007f44:	2000002c 	.word	0x2000002c
 8007f48:	ffff0208 	.word	0xffff0208

08007f4c <memset>:
 8007f4c:	4402      	add	r2, r0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d100      	bne.n	8007f56 <memset+0xa>
 8007f54:	4770      	bx	lr
 8007f56:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5a:	e7f9      	b.n	8007f50 <memset+0x4>

08007f5c <_sbrk_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	@ (8007f78 <_sbrk_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f000 fbbc 	bl	80086e4 <_sbrk>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_sbrk_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_sbrk_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20000a88 	.word	0x20000a88

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	@ (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 fbb6 	bl	8008700 <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	0800878c 	.word	0x0800878c
 8007fb8:	0800878c 	.word	0x0800878c
 8007fbc:	0800878c 	.word	0x0800878c
 8007fc0:	08008790 	.word	0x08008790

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <_free_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4605      	mov	r5, r0
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d041      	beq.n	8008054 <_free_r+0x8c>
 8007fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd4:	1f0c      	subs	r4, r1, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bfb8      	it	lt
 8007fda:	18e4      	addlt	r4, r4, r3
 8007fdc:	f7ff ff8a 	bl	8007ef4 <__malloc_lock>
 8007fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8008058 <_free_r+0x90>)
 8007fe2:	6813      	ldr	r3, [r2, #0]
 8007fe4:	b933      	cbnz	r3, 8007ff4 <_free_r+0x2c>
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	6014      	str	r4, [r2, #0]
 8007fea:	4628      	mov	r0, r5
 8007fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff0:	f7ff bf86 	b.w	8007f00 <__malloc_unlock>
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	d908      	bls.n	800800a <_free_r+0x42>
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	1821      	adds	r1, r4, r0
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	bf01      	itttt	eq
 8008000:	6819      	ldreq	r1, [r3, #0]
 8008002:	685b      	ldreq	r3, [r3, #4]
 8008004:	1809      	addeq	r1, r1, r0
 8008006:	6021      	streq	r1, [r4, #0]
 8008008:	e7ed      	b.n	8007fe6 <_free_r+0x1e>
 800800a:	461a      	mov	r2, r3
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	b10b      	cbz	r3, 8008014 <_free_r+0x4c>
 8008010:	42a3      	cmp	r3, r4
 8008012:	d9fa      	bls.n	800800a <_free_r+0x42>
 8008014:	6811      	ldr	r1, [r2, #0]
 8008016:	1850      	adds	r0, r2, r1
 8008018:	42a0      	cmp	r0, r4
 800801a:	d10b      	bne.n	8008034 <_free_r+0x6c>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	4401      	add	r1, r0
 8008020:	1850      	adds	r0, r2, r1
 8008022:	4283      	cmp	r3, r0
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	d1e0      	bne.n	8007fea <_free_r+0x22>
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	6053      	str	r3, [r2, #4]
 800802e:	4408      	add	r0, r1
 8008030:	6010      	str	r0, [r2, #0]
 8008032:	e7da      	b.n	8007fea <_free_r+0x22>
 8008034:	d902      	bls.n	800803c <_free_r+0x74>
 8008036:	230c      	movs	r3, #12
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	e7d6      	b.n	8007fea <_free_r+0x22>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	1821      	adds	r1, r4, r0
 8008040:	428b      	cmp	r3, r1
 8008042:	bf04      	itt	eq
 8008044:	6819      	ldreq	r1, [r3, #0]
 8008046:	685b      	ldreq	r3, [r3, #4]
 8008048:	6063      	str	r3, [r4, #4]
 800804a:	bf04      	itt	eq
 800804c:	1809      	addeq	r1, r1, r0
 800804e:	6021      	streq	r1, [r4, #0]
 8008050:	6054      	str	r4, [r2, #4]
 8008052:	e7ca      	b.n	8007fea <_free_r+0x22>
 8008054:	bd38      	pop	{r3, r4, r5, pc}
 8008056:	bf00      	nop
 8008058:	2000094c 	.word	0x2000094c

0800805c <__ssputs_r>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	688e      	ldr	r6, [r1, #8]
 8008062:	461f      	mov	r7, r3
 8008064:	42be      	cmp	r6, r7
 8008066:	680b      	ldr	r3, [r1, #0]
 8008068:	4682      	mov	sl, r0
 800806a:	460c      	mov	r4, r1
 800806c:	4690      	mov	r8, r2
 800806e:	d82d      	bhi.n	80080cc <__ssputs_r+0x70>
 8008070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008078:	d026      	beq.n	80080c8 <__ssputs_r+0x6c>
 800807a:	6965      	ldr	r5, [r4, #20]
 800807c:	6909      	ldr	r1, [r1, #16]
 800807e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008082:	eba3 0901 	sub.w	r9, r3, r1
 8008086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800808a:	1c7b      	adds	r3, r7, #1
 800808c:	444b      	add	r3, r9
 800808e:	106d      	asrs	r5, r5, #1
 8008090:	429d      	cmp	r5, r3
 8008092:	bf38      	it	cc
 8008094:	461d      	movcc	r5, r3
 8008096:	0553      	lsls	r3, r2, #21
 8008098:	d527      	bpl.n	80080ea <__ssputs_r+0x8e>
 800809a:	4629      	mov	r1, r5
 800809c:	f7ff feaa 	bl	8007df4 <_malloc_r>
 80080a0:	4606      	mov	r6, r0
 80080a2:	b360      	cbz	r0, 80080fe <__ssputs_r+0xa2>
 80080a4:	6921      	ldr	r1, [r4, #16]
 80080a6:	464a      	mov	r2, r9
 80080a8:	f000 fad8 	bl	800865c <memcpy>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	6126      	str	r6, [r4, #16]
 80080ba:	6165      	str	r5, [r4, #20]
 80080bc:	444e      	add	r6, r9
 80080be:	eba5 0509 	sub.w	r5, r5, r9
 80080c2:	6026      	str	r6, [r4, #0]
 80080c4:	60a5      	str	r5, [r4, #8]
 80080c6:	463e      	mov	r6, r7
 80080c8:	42be      	cmp	r6, r7
 80080ca:	d900      	bls.n	80080ce <__ssputs_r+0x72>
 80080cc:	463e      	mov	r6, r7
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	4632      	mov	r2, r6
 80080d2:	4641      	mov	r1, r8
 80080d4:	f000 faa8 	bl	8008628 <memmove>
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	1b9b      	subs	r3, r3, r6
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	4433      	add	r3, r6
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	2000      	movs	r0, #0
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	462a      	mov	r2, r5
 80080ec:	f000 fac4 	bl	8008678 <_realloc_r>
 80080f0:	4606      	mov	r6, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1e0      	bne.n	80080b8 <__ssputs_r+0x5c>
 80080f6:	6921      	ldr	r1, [r4, #16]
 80080f8:	4650      	mov	r0, sl
 80080fa:	f7ff ff65 	bl	8007fc8 <_free_r>
 80080fe:	230c      	movs	r3, #12
 8008100:	f8ca 3000 	str.w	r3, [sl]
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	e7e9      	b.n	80080e6 <__ssputs_r+0x8a>
	...

08008114 <_svfiprintf_r>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	4698      	mov	r8, r3
 800811a:	898b      	ldrh	r3, [r1, #12]
 800811c:	061b      	lsls	r3, r3, #24
 800811e:	b09d      	sub	sp, #116	@ 0x74
 8008120:	4607      	mov	r7, r0
 8008122:	460d      	mov	r5, r1
 8008124:	4614      	mov	r4, r2
 8008126:	d510      	bpl.n	800814a <_svfiprintf_r+0x36>
 8008128:	690b      	ldr	r3, [r1, #16]
 800812a:	b973      	cbnz	r3, 800814a <_svfiprintf_r+0x36>
 800812c:	2140      	movs	r1, #64	@ 0x40
 800812e:	f7ff fe61 	bl	8007df4 <_malloc_r>
 8008132:	6028      	str	r0, [r5, #0]
 8008134:	6128      	str	r0, [r5, #16]
 8008136:	b930      	cbnz	r0, 8008146 <_svfiprintf_r+0x32>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	b01d      	add	sp, #116	@ 0x74
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	2340      	movs	r3, #64	@ 0x40
 8008148:	616b      	str	r3, [r5, #20]
 800814a:	2300      	movs	r3, #0
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	2320      	movs	r3, #32
 8008150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008154:	f8cd 800c 	str.w	r8, [sp, #12]
 8008158:	2330      	movs	r3, #48	@ 0x30
 800815a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082f8 <_svfiprintf_r+0x1e4>
 800815e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008162:	f04f 0901 	mov.w	r9, #1
 8008166:	4623      	mov	r3, r4
 8008168:	469a      	mov	sl, r3
 800816a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816e:	b10a      	cbz	r2, 8008174 <_svfiprintf_r+0x60>
 8008170:	2a25      	cmp	r2, #37	@ 0x25
 8008172:	d1f9      	bne.n	8008168 <_svfiprintf_r+0x54>
 8008174:	ebba 0b04 	subs.w	fp, sl, r4
 8008178:	d00b      	beq.n	8008192 <_svfiprintf_r+0x7e>
 800817a:	465b      	mov	r3, fp
 800817c:	4622      	mov	r2, r4
 800817e:	4629      	mov	r1, r5
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ff6b 	bl	800805c <__ssputs_r>
 8008186:	3001      	adds	r0, #1
 8008188:	f000 80a7 	beq.w	80082da <_svfiprintf_r+0x1c6>
 800818c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818e:	445a      	add	r2, fp
 8008190:	9209      	str	r2, [sp, #36]	@ 0x24
 8008192:	f89a 3000 	ldrb.w	r3, [sl]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 809f 	beq.w	80082da <_svfiprintf_r+0x1c6>
 800819c:	2300      	movs	r3, #0
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a6:	f10a 0a01 	add.w	sl, sl, #1
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	9307      	str	r3, [sp, #28]
 80081ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b4:	4654      	mov	r4, sl
 80081b6:	2205      	movs	r2, #5
 80081b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081bc:	484e      	ldr	r0, [pc, #312]	@ (80082f8 <_svfiprintf_r+0x1e4>)
 80081be:	f7f8 f80f 	bl	80001e0 <memchr>
 80081c2:	9a04      	ldr	r2, [sp, #16]
 80081c4:	b9d8      	cbnz	r0, 80081fe <_svfiprintf_r+0xea>
 80081c6:	06d0      	lsls	r0, r2, #27
 80081c8:	bf44      	itt	mi
 80081ca:	2320      	movmi	r3, #32
 80081cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d0:	0711      	lsls	r1, r2, #28
 80081d2:	bf44      	itt	mi
 80081d4:	232b      	movmi	r3, #43	@ 0x2b
 80081d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081da:	f89a 3000 	ldrb.w	r3, [sl]
 80081de:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e0:	d015      	beq.n	800820e <_svfiprintf_r+0xfa>
 80081e2:	9a07      	ldr	r2, [sp, #28]
 80081e4:	4654      	mov	r4, sl
 80081e6:	2000      	movs	r0, #0
 80081e8:	f04f 0c0a 	mov.w	ip, #10
 80081ec:	4621      	mov	r1, r4
 80081ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f2:	3b30      	subs	r3, #48	@ 0x30
 80081f4:	2b09      	cmp	r3, #9
 80081f6:	d94b      	bls.n	8008290 <_svfiprintf_r+0x17c>
 80081f8:	b1b0      	cbz	r0, 8008228 <_svfiprintf_r+0x114>
 80081fa:	9207      	str	r2, [sp, #28]
 80081fc:	e014      	b.n	8008228 <_svfiprintf_r+0x114>
 80081fe:	eba0 0308 	sub.w	r3, r0, r8
 8008202:	fa09 f303 	lsl.w	r3, r9, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	46a2      	mov	sl, r4
 800820c:	e7d2      	b.n	80081b4 <_svfiprintf_r+0xa0>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	1d19      	adds	r1, r3, #4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	9103      	str	r1, [sp, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfbb      	ittet	lt
 800821a:	425b      	neglt	r3, r3
 800821c:	f042 0202 	orrlt.w	r2, r2, #2
 8008220:	9307      	strge	r3, [sp, #28]
 8008222:	9307      	strlt	r3, [sp, #28]
 8008224:	bfb8      	it	lt
 8008226:	9204      	strlt	r2, [sp, #16]
 8008228:	7823      	ldrb	r3, [r4, #0]
 800822a:	2b2e      	cmp	r3, #46	@ 0x2e
 800822c:	d10a      	bne.n	8008244 <_svfiprintf_r+0x130>
 800822e:	7863      	ldrb	r3, [r4, #1]
 8008230:	2b2a      	cmp	r3, #42	@ 0x2a
 8008232:	d132      	bne.n	800829a <_svfiprintf_r+0x186>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9203      	str	r2, [sp, #12]
 800823c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008240:	3402      	adds	r4, #2
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008308 <_svfiprintf_r+0x1f4>
 8008248:	7821      	ldrb	r1, [r4, #0]
 800824a:	2203      	movs	r2, #3
 800824c:	4650      	mov	r0, sl
 800824e:	f7f7 ffc7 	bl	80001e0 <memchr>
 8008252:	b138      	cbz	r0, 8008264 <_svfiprintf_r+0x150>
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	eba0 000a 	sub.w	r0, r0, sl
 800825a:	2240      	movs	r2, #64	@ 0x40
 800825c:	4082      	lsls	r2, r0
 800825e:	4313      	orrs	r3, r2
 8008260:	3401      	adds	r4, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	4824      	ldr	r0, [pc, #144]	@ (80082fc <_svfiprintf_r+0x1e8>)
 800826a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826e:	2206      	movs	r2, #6
 8008270:	f7f7 ffb6 	bl	80001e0 <memchr>
 8008274:	2800      	cmp	r0, #0
 8008276:	d036      	beq.n	80082e6 <_svfiprintf_r+0x1d2>
 8008278:	4b21      	ldr	r3, [pc, #132]	@ (8008300 <_svfiprintf_r+0x1ec>)
 800827a:	bb1b      	cbnz	r3, 80082c4 <_svfiprintf_r+0x1b0>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	3307      	adds	r3, #7
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828a:	4433      	add	r3, r6
 800828c:	9309      	str	r3, [sp, #36]	@ 0x24
 800828e:	e76a      	b.n	8008166 <_svfiprintf_r+0x52>
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	460c      	mov	r4, r1
 8008296:	2001      	movs	r0, #1
 8008298:	e7a8      	b.n	80081ec <_svfiprintf_r+0xd8>
 800829a:	2300      	movs	r3, #0
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f04f 0c0a 	mov.w	ip, #10
 80082a6:	4620      	mov	r0, r4
 80082a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ac:	3a30      	subs	r2, #48	@ 0x30
 80082ae:	2a09      	cmp	r2, #9
 80082b0:	d903      	bls.n	80082ba <_svfiprintf_r+0x1a6>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c6      	beq.n	8008244 <_svfiprintf_r+0x130>
 80082b6:	9105      	str	r1, [sp, #20]
 80082b8:	e7c4      	b.n	8008244 <_svfiprintf_r+0x130>
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	4604      	mov	r4, r0
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7f0      	b.n	80082a6 <_svfiprintf_r+0x192>
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <_svfiprintf_r+0x1f0>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	4638      	mov	r0, r7
 80082d0:	f3af 8000 	nop.w
 80082d4:	1c42      	adds	r2, r0, #1
 80082d6:	4606      	mov	r6, r0
 80082d8:	d1d6      	bne.n	8008288 <_svfiprintf_r+0x174>
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	065b      	lsls	r3, r3, #25
 80082de:	f53f af2d 	bmi.w	800813c <_svfiprintf_r+0x28>
 80082e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e4:	e72c      	b.n	8008140 <_svfiprintf_r+0x2c>
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <_svfiprintf_r+0x1f0>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	4638      	mov	r0, r7
 80082f2:	f000 f879 	bl	80083e8 <_printf_i>
 80082f6:	e7ed      	b.n	80082d4 <_svfiprintf_r+0x1c0>
 80082f8:	08008750 	.word	0x08008750
 80082fc:	0800875a 	.word	0x0800875a
 8008300:	00000000 	.word	0x00000000
 8008304:	0800805d 	.word	0x0800805d
 8008308:	08008756 	.word	0x08008756

0800830c <_printf_common>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	4616      	mov	r6, r2
 8008312:	4698      	mov	r8, r3
 8008314:	688a      	ldr	r2, [r1, #8]
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800831c:	4293      	cmp	r3, r2
 800831e:	bfb8      	it	lt
 8008320:	4613      	movlt	r3, r2
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008328:	4607      	mov	r7, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b10a      	cbz	r2, 8008332 <_printf_common+0x26>
 800832e:	3301      	adds	r3, #1
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	0699      	lsls	r1, r3, #26
 8008336:	bf42      	ittt	mi
 8008338:	6833      	ldrmi	r3, [r6, #0]
 800833a:	3302      	addmi	r3, #2
 800833c:	6033      	strmi	r3, [r6, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	f015 0506 	ands.w	r5, r5, #6
 8008344:	d106      	bne.n	8008354 <_printf_common+0x48>
 8008346:	f104 0a19 	add.w	sl, r4, #25
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	6832      	ldr	r2, [r6, #0]
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	42ab      	cmp	r3, r5
 8008352:	dc26      	bgt.n	80083a2 <_printf_common+0x96>
 8008354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	3b00      	subs	r3, #0
 800835c:	bf18      	it	ne
 800835e:	2301      	movne	r3, #1
 8008360:	0692      	lsls	r2, r2, #26
 8008362:	d42b      	bmi.n	80083bc <_printf_common+0xb0>
 8008364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008368:	4641      	mov	r1, r8
 800836a:	4638      	mov	r0, r7
 800836c:	47c8      	blx	r9
 800836e:	3001      	adds	r0, #1
 8008370:	d01e      	beq.n	80083b0 <_printf_common+0xa4>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	f003 0306 	and.w	r3, r3, #6
 800837a:	2b04      	cmp	r3, #4
 800837c:	bf02      	ittt	eq
 800837e:	68e5      	ldreq	r5, [r4, #12]
 8008380:	6833      	ldreq	r3, [r6, #0]
 8008382:	1aed      	subeq	r5, r5, r3
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	bf0c      	ite	eq
 8008388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800838c:	2500      	movne	r5, #0
 800838e:	4293      	cmp	r3, r2
 8008390:	bfc4      	itt	gt
 8008392:	1a9b      	subgt	r3, r3, r2
 8008394:	18ed      	addgt	r5, r5, r3
 8008396:	2600      	movs	r6, #0
 8008398:	341a      	adds	r4, #26
 800839a:	42b5      	cmp	r5, r6
 800839c:	d11a      	bne.n	80083d4 <_printf_common+0xc8>
 800839e:	2000      	movs	r0, #0
 80083a0:	e008      	b.n	80083b4 <_printf_common+0xa8>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4652      	mov	r2, sl
 80083a6:	4641      	mov	r1, r8
 80083a8:	4638      	mov	r0, r7
 80083aa:	47c8      	blx	r9
 80083ac:	3001      	adds	r0, #1
 80083ae:	d103      	bne.n	80083b8 <_printf_common+0xac>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7c6      	b.n	800834a <_printf_common+0x3e>
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	2030      	movs	r0, #48	@ 0x30
 80083c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083c6:	4422      	add	r2, r4
 80083c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083d0:	3302      	adds	r3, #2
 80083d2:	e7c7      	b.n	8008364 <_printf_common+0x58>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4622      	mov	r2, r4
 80083d8:	4641      	mov	r1, r8
 80083da:	4638      	mov	r0, r7
 80083dc:	47c8      	blx	r9
 80083de:	3001      	adds	r0, #1
 80083e0:	d0e6      	beq.n	80083b0 <_printf_common+0xa4>
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7d9      	b.n	800839a <_printf_common+0x8e>
	...

080083e8 <_printf_i>:
 80083e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	7e0f      	ldrb	r7, [r1, #24]
 80083ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083f0:	2f78      	cmp	r7, #120	@ 0x78
 80083f2:	4691      	mov	r9, r2
 80083f4:	4680      	mov	r8, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	469a      	mov	sl, r3
 80083fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083fe:	d807      	bhi.n	8008410 <_printf_i+0x28>
 8008400:	2f62      	cmp	r7, #98	@ 0x62
 8008402:	d80a      	bhi.n	800841a <_printf_i+0x32>
 8008404:	2f00      	cmp	r7, #0
 8008406:	f000 80d2 	beq.w	80085ae <_printf_i+0x1c6>
 800840a:	2f58      	cmp	r7, #88	@ 0x58
 800840c:	f000 80b9 	beq.w	8008582 <_printf_i+0x19a>
 8008410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008418:	e03a      	b.n	8008490 <_printf_i+0xa8>
 800841a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800841e:	2b15      	cmp	r3, #21
 8008420:	d8f6      	bhi.n	8008410 <_printf_i+0x28>
 8008422:	a101      	add	r1, pc, #4	@ (adr r1, 8008428 <_printf_i+0x40>)
 8008424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008428:	08008481 	.word	0x08008481
 800842c:	08008495 	.word	0x08008495
 8008430:	08008411 	.word	0x08008411
 8008434:	08008411 	.word	0x08008411
 8008438:	08008411 	.word	0x08008411
 800843c:	08008411 	.word	0x08008411
 8008440:	08008495 	.word	0x08008495
 8008444:	08008411 	.word	0x08008411
 8008448:	08008411 	.word	0x08008411
 800844c:	08008411 	.word	0x08008411
 8008450:	08008411 	.word	0x08008411
 8008454:	08008595 	.word	0x08008595
 8008458:	080084bf 	.word	0x080084bf
 800845c:	0800854f 	.word	0x0800854f
 8008460:	08008411 	.word	0x08008411
 8008464:	08008411 	.word	0x08008411
 8008468:	080085b7 	.word	0x080085b7
 800846c:	08008411 	.word	0x08008411
 8008470:	080084bf 	.word	0x080084bf
 8008474:	08008411 	.word	0x08008411
 8008478:	08008411 	.word	0x08008411
 800847c:	08008557 	.word	0x08008557
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6032      	str	r2, [r6, #0]
 8008488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800848c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008490:	2301      	movs	r3, #1
 8008492:	e09d      	b.n	80085d0 <_printf_i+0x1e8>
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	1d19      	adds	r1, r3, #4
 800849a:	6031      	str	r1, [r6, #0]
 800849c:	0606      	lsls	r6, r0, #24
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0xbc>
 80084a0:	681d      	ldr	r5, [r3, #0]
 80084a2:	e003      	b.n	80084ac <_printf_i+0xc4>
 80084a4:	0645      	lsls	r5, r0, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0xb8>
 80084a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	da03      	bge.n	80084b8 <_printf_i+0xd0>
 80084b0:	232d      	movs	r3, #45	@ 0x2d
 80084b2:	426d      	negs	r5, r5
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b8:	4859      	ldr	r0, [pc, #356]	@ (8008620 <_printf_i+0x238>)
 80084ba:	230a      	movs	r3, #10
 80084bc:	e011      	b.n	80084e2 <_printf_i+0xfa>
 80084be:	6821      	ldr	r1, [r4, #0]
 80084c0:	6833      	ldr	r3, [r6, #0]
 80084c2:	0608      	lsls	r0, r1, #24
 80084c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084c8:	d402      	bmi.n	80084d0 <_printf_i+0xe8>
 80084ca:	0649      	lsls	r1, r1, #25
 80084cc:	bf48      	it	mi
 80084ce:	b2ad      	uxthmi	r5, r5
 80084d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084d2:	4853      	ldr	r0, [pc, #332]	@ (8008620 <_printf_i+0x238>)
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	bf14      	ite	ne
 80084d8:	230a      	movne	r3, #10
 80084da:	2308      	moveq	r3, #8
 80084dc:	2100      	movs	r1, #0
 80084de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084e2:	6866      	ldr	r6, [r4, #4]
 80084e4:	60a6      	str	r6, [r4, #8]
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	bfa2      	ittt	ge
 80084ea:	6821      	ldrge	r1, [r4, #0]
 80084ec:	f021 0104 	bicge.w	r1, r1, #4
 80084f0:	6021      	strge	r1, [r4, #0]
 80084f2:	b90d      	cbnz	r5, 80084f8 <_printf_i+0x110>
 80084f4:	2e00      	cmp	r6, #0
 80084f6:	d04b      	beq.n	8008590 <_printf_i+0x1a8>
 80084f8:	4616      	mov	r6, r2
 80084fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80084fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008502:	5dc7      	ldrb	r7, [r0, r7]
 8008504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008508:	462f      	mov	r7, r5
 800850a:	42bb      	cmp	r3, r7
 800850c:	460d      	mov	r5, r1
 800850e:	d9f4      	bls.n	80084fa <_printf_i+0x112>
 8008510:	2b08      	cmp	r3, #8
 8008512:	d10b      	bne.n	800852c <_printf_i+0x144>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	07df      	lsls	r7, r3, #31
 8008518:	d508      	bpl.n	800852c <_printf_i+0x144>
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	6861      	ldr	r1, [r4, #4]
 800851e:	4299      	cmp	r1, r3
 8008520:	bfde      	ittt	le
 8008522:	2330      	movle	r3, #48	@ 0x30
 8008524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800852c:	1b92      	subs	r2, r2, r6
 800852e:	6122      	str	r2, [r4, #16]
 8008530:	f8cd a000 	str.w	sl, [sp]
 8008534:	464b      	mov	r3, r9
 8008536:	aa03      	add	r2, sp, #12
 8008538:	4621      	mov	r1, r4
 800853a:	4640      	mov	r0, r8
 800853c:	f7ff fee6 	bl	800830c <_printf_common>
 8008540:	3001      	adds	r0, #1
 8008542:	d14a      	bne.n	80085da <_printf_i+0x1f2>
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	b004      	add	sp, #16
 800854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f043 0320 	orr.w	r3, r3, #32
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	4833      	ldr	r0, [pc, #204]	@ (8008624 <_printf_i+0x23c>)
 8008558:	2778      	movs	r7, #120	@ 0x78
 800855a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	6831      	ldr	r1, [r6, #0]
 8008562:	061f      	lsls	r7, r3, #24
 8008564:	f851 5b04 	ldr.w	r5, [r1], #4
 8008568:	d402      	bmi.n	8008570 <_printf_i+0x188>
 800856a:	065f      	lsls	r7, r3, #25
 800856c:	bf48      	it	mi
 800856e:	b2ad      	uxthmi	r5, r5
 8008570:	6031      	str	r1, [r6, #0]
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	bf44      	itt	mi
 8008576:	f043 0320 	orrmi.w	r3, r3, #32
 800857a:	6023      	strmi	r3, [r4, #0]
 800857c:	b11d      	cbz	r5, 8008586 <_printf_i+0x19e>
 800857e:	2310      	movs	r3, #16
 8008580:	e7ac      	b.n	80084dc <_printf_i+0xf4>
 8008582:	4827      	ldr	r0, [pc, #156]	@ (8008620 <_printf_i+0x238>)
 8008584:	e7e9      	b.n	800855a <_printf_i+0x172>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f023 0320 	bic.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	e7f6      	b.n	800857e <_printf_i+0x196>
 8008590:	4616      	mov	r6, r2
 8008592:	e7bd      	b.n	8008510 <_printf_i+0x128>
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	6825      	ldr	r5, [r4, #0]
 8008598:	6961      	ldr	r1, [r4, #20]
 800859a:	1d18      	adds	r0, r3, #4
 800859c:	6030      	str	r0, [r6, #0]
 800859e:	062e      	lsls	r6, r5, #24
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	d501      	bpl.n	80085a8 <_printf_i+0x1c0>
 80085a4:	6019      	str	r1, [r3, #0]
 80085a6:	e002      	b.n	80085ae <_printf_i+0x1c6>
 80085a8:	0668      	lsls	r0, r5, #25
 80085aa:	d5fb      	bpl.n	80085a4 <_printf_i+0x1bc>
 80085ac:	8019      	strh	r1, [r3, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	4616      	mov	r6, r2
 80085b4:	e7bc      	b.n	8008530 <_printf_i+0x148>
 80085b6:	6833      	ldr	r3, [r6, #0]
 80085b8:	1d1a      	adds	r2, r3, #4
 80085ba:	6032      	str	r2, [r6, #0]
 80085bc:	681e      	ldr	r6, [r3, #0]
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7f7 fe0c 	bl	80001e0 <memchr>
 80085c8:	b108      	cbz	r0, 80085ce <_printf_i+0x1e6>
 80085ca:	1b80      	subs	r0, r0, r6
 80085cc:	6060      	str	r0, [r4, #4]
 80085ce:	6863      	ldr	r3, [r4, #4]
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	2300      	movs	r3, #0
 80085d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d8:	e7aa      	b.n	8008530 <_printf_i+0x148>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	4632      	mov	r2, r6
 80085de:	4649      	mov	r1, r9
 80085e0:	4640      	mov	r0, r8
 80085e2:	47d0      	blx	sl
 80085e4:	3001      	adds	r0, #1
 80085e6:	d0ad      	beq.n	8008544 <_printf_i+0x15c>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	079b      	lsls	r3, r3, #30
 80085ec:	d413      	bmi.n	8008616 <_printf_i+0x22e>
 80085ee:	68e0      	ldr	r0, [r4, #12]
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	4298      	cmp	r0, r3
 80085f4:	bfb8      	it	lt
 80085f6:	4618      	movlt	r0, r3
 80085f8:	e7a6      	b.n	8008548 <_printf_i+0x160>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4632      	mov	r2, r6
 80085fe:	4649      	mov	r1, r9
 8008600:	4640      	mov	r0, r8
 8008602:	47d0      	blx	sl
 8008604:	3001      	adds	r0, #1
 8008606:	d09d      	beq.n	8008544 <_printf_i+0x15c>
 8008608:	3501      	adds	r5, #1
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	9903      	ldr	r1, [sp, #12]
 800860e:	1a5b      	subs	r3, r3, r1
 8008610:	42ab      	cmp	r3, r5
 8008612:	dcf2      	bgt.n	80085fa <_printf_i+0x212>
 8008614:	e7eb      	b.n	80085ee <_printf_i+0x206>
 8008616:	2500      	movs	r5, #0
 8008618:	f104 0619 	add.w	r6, r4, #25
 800861c:	e7f5      	b.n	800860a <_printf_i+0x222>
 800861e:	bf00      	nop
 8008620:	08008761 	.word	0x08008761
 8008624:	08008772 	.word	0x08008772

08008628 <memmove>:
 8008628:	4288      	cmp	r0, r1
 800862a:	b510      	push	{r4, lr}
 800862c:	eb01 0402 	add.w	r4, r1, r2
 8008630:	d902      	bls.n	8008638 <memmove+0x10>
 8008632:	4284      	cmp	r4, r0
 8008634:	4623      	mov	r3, r4
 8008636:	d807      	bhi.n	8008648 <memmove+0x20>
 8008638:	1e43      	subs	r3, r0, #1
 800863a:	42a1      	cmp	r1, r4
 800863c:	d008      	beq.n	8008650 <memmove+0x28>
 800863e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008646:	e7f8      	b.n	800863a <memmove+0x12>
 8008648:	4402      	add	r2, r0
 800864a:	4601      	mov	r1, r0
 800864c:	428a      	cmp	r2, r1
 800864e:	d100      	bne.n	8008652 <memmove+0x2a>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800865a:	e7f7      	b.n	800864c <memmove+0x24>

0800865c <memcpy>:
 800865c:	440a      	add	r2, r1
 800865e:	4291      	cmp	r1, r2
 8008660:	f100 33ff 	add.w	r3, r0, #4294967295
 8008664:	d100      	bne.n	8008668 <memcpy+0xc>
 8008666:	4770      	bx	lr
 8008668:	b510      	push	{r4, lr}
 800866a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008672:	4291      	cmp	r1, r2
 8008674:	d1f9      	bne.n	800866a <memcpy+0xe>
 8008676:	bd10      	pop	{r4, pc}

08008678 <_realloc_r>:
 8008678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867c:	4680      	mov	r8, r0
 800867e:	4615      	mov	r5, r2
 8008680:	460c      	mov	r4, r1
 8008682:	b921      	cbnz	r1, 800868e <_realloc_r+0x16>
 8008684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008688:	4611      	mov	r1, r2
 800868a:	f7ff bbb3 	b.w	8007df4 <_malloc_r>
 800868e:	b92a      	cbnz	r2, 800869c <_realloc_r+0x24>
 8008690:	f7ff fc9a 	bl	8007fc8 <_free_r>
 8008694:	2400      	movs	r4, #0
 8008696:	4620      	mov	r0, r4
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	f000 f81a 	bl	80086d4 <_malloc_usable_size_r>
 80086a0:	4285      	cmp	r5, r0
 80086a2:	4606      	mov	r6, r0
 80086a4:	d802      	bhi.n	80086ac <_realloc_r+0x34>
 80086a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086aa:	d8f4      	bhi.n	8008696 <_realloc_r+0x1e>
 80086ac:	4629      	mov	r1, r5
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7ff fba0 	bl	8007df4 <_malloc_r>
 80086b4:	4607      	mov	r7, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d0ec      	beq.n	8008694 <_realloc_r+0x1c>
 80086ba:	42b5      	cmp	r5, r6
 80086bc:	462a      	mov	r2, r5
 80086be:	4621      	mov	r1, r4
 80086c0:	bf28      	it	cs
 80086c2:	4632      	movcs	r2, r6
 80086c4:	f7ff ffca 	bl	800865c <memcpy>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4640      	mov	r0, r8
 80086cc:	f7ff fc7c 	bl	8007fc8 <_free_r>
 80086d0:	463c      	mov	r4, r7
 80086d2:	e7e0      	b.n	8008696 <_realloc_r+0x1e>

080086d4 <_malloc_usable_size_r>:
 80086d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d8:	1f18      	subs	r0, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfbc      	itt	lt
 80086de:	580b      	ldrlt	r3, [r1, r0]
 80086e0:	18c0      	addlt	r0, r0, r3
 80086e2:	4770      	bx	lr

080086e4 <_sbrk>:
 80086e4:	4a04      	ldr	r2, [pc, #16]	@ (80086f8 <_sbrk+0x14>)
 80086e6:	6811      	ldr	r1, [r2, #0]
 80086e8:	4603      	mov	r3, r0
 80086ea:	b909      	cbnz	r1, 80086f0 <_sbrk+0xc>
 80086ec:	4903      	ldr	r1, [pc, #12]	@ (80086fc <_sbrk+0x18>)
 80086ee:	6011      	str	r1, [r2, #0]
 80086f0:	6810      	ldr	r0, [r2, #0]
 80086f2:	4403      	add	r3, r0
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	4770      	bx	lr
 80086f8:	20000a90 	.word	0x20000a90
 80086fc:	20000a98 	.word	0x20000a98

08008700 <_init>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr

0800870c <_fini>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr


[STM32F4DISCO] USBMIDI to SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a8c  08007a8c  00008a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a94  08007a94  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a98  08007a98  00008a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007a9c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  2000007c  08007b18  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08007b18  0000991c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f263  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4d  00000000  00000000  0001830f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ff  00000000  00000000  0001bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224a3  00000000  00000000  0001c67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe27  00000000  00000000  0003eb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c673d  00000000  00000000  0004e949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  001150cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00118720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a0c 	.word	0x08007a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007a0c 	.word	0x08007a0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 f9e6 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80c 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f89e 	bl	80006bc <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000580:	f006 fa7c 	bl	8006a7c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f870 	bl	8000668 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000588:	f006 faa4 	bl	8006ad4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    MIDI_Application();
 800058c:	f006 fa20 	bl	80069d0 <MIDI_Application>
    MX_USB_HOST_Process();
 8000590:	bf00      	nop
 8000592:	e7f9      	b.n	8000588 <main+0x18>

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 fe58 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f9e2 	bl	80029e4 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 f899 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fc39 	bl	8002ec0 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 f882 	bl	800075c <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f002 fe2e 	bl	8003300 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f857 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200004bc 	.word	0x200004bc
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x98>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	480b      	ldr	r0, [pc, #44]	@ (8000758 <MX_GPIO_Init+0x9c>)
 800072c:	f000 fc4e 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000730:	2301      	movs	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0x9c>)
 8000748:	f000 faa4 	bl	8000c94 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020800 	.word	0x40020800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6453      	str	r3, [r2, #68]	@ 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007aa:	2007      	movs	r0, #7
 80007ac:	f000 fa30 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	@ (8000840 <HAL_UART_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12b      	bne.n	8000836 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <HAL_UART_MspInit+0x88>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_UART_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <HAL_UART_MspInit+0x88>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000816:	230c      	movs	r3, #12
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000826:	2307      	movs	r3, #7
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <HAL_UART_MspInit+0x8c>)
 8000832:	f000 fa2f 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	@ 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	bf00      	nop
 8000860:	e7fd      	b.n	800085e <HardFault_Handler+0x4>

08000862 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000866:	bf00      	nop
 8000868:	e7fd      	b.n	8000866 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <BusFault_Handler+0x4>

08000872 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f89e 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <OTG_FS_IRQHandler+0x10>)
 80008b6:	f000 fe31 	bl	800151c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000050c 	.word	0x2000050c

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <SystemInit+0x28>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ce:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <SystemInit+0x28>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <SystemInit+0x28>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008de:	609a      	str	r2, [r3, #8]
#endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008f6:	e003      	b.n	8000900 <LoopCopyDataInit>

080008f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008fe:	3104      	adds	r1, #4

08000900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000908:	d3f6      	bcc.n	80008f8 <CopyDataInit>
  ldr  r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800090c:	e002      	b.n	8000914 <LoopFillZerobss>

0800090e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800090e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000910:	f842 3b04 	str.w	r3, [r2], #4

08000914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000918:	d3f9      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800091a:	f7ff ffd3 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f006 fcb3 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fe25 	bl	8000570 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800092c:	08007a9c 	.word	0x08007a9c
  ldr  r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000934:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000938:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800093c:	2000091c 	.word	0x2000091c

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f94f 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff fef8 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f967 	bl	8000c7a <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f92f 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000098 	.word	0x20000098

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000098 	.word	0x20000098

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	@ (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	@ (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	@ (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	@ 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff29 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff3e 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff31 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa2 	bl	8000bcc <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e16b      	b.n	8000f88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 815a 	bne.w	8000f82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00b      	beq.n	8000cee <HAL_GPIO_Init+0x5a>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d007      	beq.n	8000cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce2:	2b11      	cmp	r3, #17
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0xfc>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b12      	cmp	r3, #18
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80b4 	beq.w	8000f82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b60      	ldr	r3, [pc, #384]	@ (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a5f      	ldr	r2, [pc, #380]	@ (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa4 <HAL_GPIO_Init+0x310>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a52      	ldr	r2, [pc, #328]	@ (8000fa8 <HAL_GPIO_Init+0x314>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d02b      	beq.n	8000eba <HAL_GPIO_Init+0x226>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a51      	ldr	r2, [pc, #324]	@ (8000fac <HAL_GPIO_Init+0x318>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x222>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a50      	ldr	r2, [pc, #320]	@ (8000fb0 <HAL_GPIO_Init+0x31c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x21e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb4 <HAL_GPIO_Init+0x320>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x21a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x216>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4d      	ldr	r2, [pc, #308]	@ (8000fbc <HAL_GPIO_Init+0x328>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x212>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <HAL_GPIO_Init+0x32c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x20e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x20a>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e00e      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	@ (8000fa4 <HAL_GPIO_Init+0x310>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eda:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efe:	4a32      	ldr	r2, [pc, #200]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f28:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f ae90 	bls.w	8000cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	@ 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	40021c00 	.word	0x40021c00
 8000fc8:	40013c00 	.word	0x40013c00

08000fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fdc:	787b      	ldrb	r3, [r7, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe8:	e003      	b.n	8000ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	041a      	lsls	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001000:	b08f      	sub	sp, #60	@ 0x3c
 8001002:	af0a      	add	r7, sp, #40	@ 0x28
 8001004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e054      	b.n	80010ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f005 fd8a 	bl	8006b44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2203      	movs	r2, #3
 8001034:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800103c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ffc8 	bl	8003fe4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	687e      	ldr	r6, [r7, #4]
 800105c:	466d      	mov	r5, sp
 800105e:	f106 0410 	add.w	r4, r6, #16
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001072:	1d33      	adds	r3, r6, #4
 8001074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f002 ff42 	bl	8003f00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f002 ffbf 	bl	8004006 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	687e      	ldr	r6, [r7, #4]
 8001090:	466d      	mov	r5, sp
 8001092:	f106 0410 	add.w	r4, r6, #16
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010a6:	1d33      	adds	r3, r6, #4
 80010a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010aa:	6838      	ldr	r0, [r7, #0]
 80010ac:	f003 f8d2 	bl	8004254 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b089      	sub	sp, #36	@ 0x24
 80010c6:	af04      	add	r7, sp, #16
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	70fb      	strb	r3, [r7, #3]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70bb      	strb	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_HCD_HC_Init+0x28>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e07f      	b.n	80011ea <HAL_HCD_HC_Init+0x128>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	333d      	adds	r3, #61	@ 0x3d
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3338      	adds	r3, #56	@ 0x38
 8001116:	787a      	ldrb	r2, [r7, #1]
 8001118:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800111a:	78fa      	ldrb	r2, [r7, #3]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	3340      	adds	r3, #64	@ 0x40
 800112a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800112c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800112e:	78fa      	ldrb	r2, [r7, #3]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3339      	adds	r3, #57	@ 0x39
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	333f      	adds	r3, #63	@ 0x3f
 8001152:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	78bb      	ldrb	r3, [r7, #2]
 800115c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001160:	b2d8      	uxtb	r0, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	333a      	adds	r3, #58	@ 0x3a
 8001170:	4602      	mov	r2, r0
 8001172:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001174:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001178:	2b00      	cmp	r3, #0
 800117a:	da0a      	bge.n	8001192 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	333b      	adds	r3, #59	@ 0x3b
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e009      	b.n	80011a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	333b      	adds	r3, #59	@ 0x3b
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	333c      	adds	r3, #60	@ 0x3c
 80011b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	787c      	ldrb	r4, [r7, #1]
 80011c2:	78ba      	ldrb	r2, [r7, #2]
 80011c4:	78f9      	ldrb	r1, [r7, #3]
 80011c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4623      	mov	r3, r4
 80011d8:	f003 f9be 	bl	8004558 <USB_HC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}

080011f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_HCD_HC_Halt+0x1e>
 800120c:	2302      	movs	r3, #2
 800120e:	e00f      	b.n	8001230 <HAL_HCD_HC_Halt+0x3e>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fbf6 	bl	8004a12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4603      	mov	r3, r0
 8001248:	70fb      	strb	r3, [r7, #3]
 800124a:	460b      	mov	r3, r1
 800124c:	70bb      	strb	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001252:	78fa      	ldrb	r2, [r7, #3]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	333b      	adds	r3, #59	@ 0x3b
 8001262:	78ba      	ldrb	r2, [r7, #2]
 8001264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	333f      	adds	r3, #63	@ 0x3f
 8001276:	787a      	ldrb	r2, [r7, #1]
 8001278:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800127a:	7c3b      	ldrb	r3, [r7, #16]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d114      	bne.n	80012aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	3342      	adds	r3, #66	@ 0x42
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001294:	78fa      	ldrb	r2, [r7, #3]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	440b      	add	r3, r1
 80012a2:	333d      	adds	r3, #61	@ 0x3d
 80012a4:	7f3a      	ldrb	r2, [r7, #28]
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e009      	b.n	80012be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3342      	adds	r3, #66	@ 0x42
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80012be:	787b      	ldrb	r3, [r7, #1]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	f200 80d6 	bhi.w	8001472 <HAL_HCD_HC_SubmitRequest+0x23a>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	0800145d 	.word	0x0800145d
 80012d4:	08001349 	.word	0x08001349
 80012d8:	080013d3 	.word	0x080013d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80012dc:	7c3b      	ldrb	r3, [r7, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f040 80c9 	bne.w	8001476 <HAL_HCD_HC_SubmitRequest+0x23e>
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80c5 	bne.w	8001476 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80012ec:	8b3b      	ldrh	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	3351      	adds	r3, #81	@ 0x51
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	3351      	adds	r3, #81	@ 0x51
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10a      	bne.n	8001332 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	3342      	adds	r3, #66	@ 0x42
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001330:	e0a1      	b.n	8001476 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001332:	78fa      	ldrb	r2, [r7, #3]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3342      	adds	r3, #66	@ 0x42
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
      break;
 8001346:	e096      	b.n	8001476 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001348:	78bb      	ldrb	r3, [r7, #2]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d120      	bne.n	8001390 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3351      	adds	r3, #81	@ 0x51
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10a      	bne.n	800137a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001364:	78fa      	ldrb	r2, [r7, #3]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	3342      	adds	r3, #66	@ 0x42
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001378:	e07e      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3342      	adds	r3, #66	@ 0x42
 800138a:	2202      	movs	r2, #2
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e073      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3350      	adds	r3, #80	@ 0x50
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10a      	bne.n	80013bc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3342      	adds	r3, #66	@ 0x42
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
      break;
 80013ba:	e05d      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	3342      	adds	r3, #66	@ 0x42
 80013cc:	2202      	movs	r2, #2
 80013ce:	701a      	strb	r2, [r3, #0]
      break;
 80013d0:	e052      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80013d2:	78bb      	ldrb	r3, [r7, #2]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d120      	bne.n	800141a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3351      	adds	r3, #81	@ 0x51
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3342      	adds	r3, #66	@ 0x42
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001402:	e039      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3342      	adds	r3, #66	@ 0x42
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
      break;
 8001418:	e02e      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3350      	adds	r3, #80	@ 0x50
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10a      	bne.n	8001446 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3342      	adds	r3, #66	@ 0x42
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
      break;
 8001444:	e018      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001446:	78fa      	ldrb	r2, [r7, #3]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	3342      	adds	r3, #66	@ 0x42
 8001456:	2202      	movs	r2, #2
 8001458:	701a      	strb	r2, [r3, #0]
      break;
 800145a:	e00d      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3342      	adds	r3, #66	@ 0x42
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
      break;
 8001470:	e002      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001476:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	3344      	adds	r3, #68	@ 0x44
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	8b39      	ldrh	r1, [r7, #24]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4403      	add	r3, r0
 800149c:	3348      	adds	r3, #72	@ 0x48
 800149e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	335c      	adds	r3, #92	@ 0x5c
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	334c      	adds	r3, #76	@ 0x4c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3339      	adds	r3, #57	@ 0x39
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	335d      	adds	r3, #93	@ 0x5d
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	3338      	adds	r3, #56	@ 0x38
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	18d1      	adds	r1, r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	f003 f92e 	bl	800476c <USB_HC_StartXfer>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop

0800151c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fe4b 	bl	80041ce <USB_GetMode>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	f040 80ef 	bne.w	800171e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fe2f 	bl	80041a8 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80e5 	beq.w	800171c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fe26 	bl	80041a8 <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001566:	d104      	bne.n	8001572 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001570:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fe16 	bl	80041a8 <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001586:	d104      	bne.n	8001592 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fe06 	bl	80041a8 <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80015a6:	d104      	bne.n	80015b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fdf6 	bl	80041a8 <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d103      	bne.n	80015ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2202      	movs	r2, #2
 80015cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fde8 	bl	80041a8 <USB_ReadInterrupts>
 80015d8:	4603      	mov	r3, r0
 80015da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015e2:	d115      	bne.n	8001610 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f005 fb1e 	bl	8006c40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fede 	bl	80043cc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fdc7 	bl	80041a8 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001624:	d102      	bne.n	800162c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f001 f968 	bl	80028fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fdb9 	bl	80041a8 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b08      	cmp	r3, #8
 800163e:	d106      	bne.n	800164e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f005 fae1 	bl	8006c08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2208      	movs	r2, #8
 800164c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fda8 	bl	80041a8 <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001662:	d138      	bne.n	80016d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f003 f9c1 	bl	80049f0 <USB_HC_ReadInterrupt>
 800166e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e025      	b.n	80016c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d018      	beq.n	80016bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800169c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016a0:	d106      	bne.n	80016b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8cf 	bl	800184c <HCD_HC_IN_IRQHandler>
 80016ae:	e005      	b.n	80016bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fcfd 	bl	80020b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3d4      	bcc.n	8001676 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fd64 	bl	80041a8 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d101      	bne.n	80016ee <HAL_HCD_IRQHandler+0x1d2>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_HCD_IRQHandler+0x1d4>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d014      	beq.n	800171e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0210 	bic.w	r2, r2, #16
 8001702:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f001 f84b 	bl	80027a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0210 	orr.w	r2, r2, #16
 8001718:	619a      	str	r2, [r3, #24]
 800171a:	e000      	b.n	800171e <HAL_HCD_IRQHandler+0x202>
      return;
 800171c:	bf00      	nop
    }
  }
}
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_HCD_Start+0x16>
 8001736:	2302      	movs	r3, #2
 8001738:	e013      	b.n	8001762 <HAL_HCD_Start+0x3e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fc3b 	bl	8003fc2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fe9e 	bl	8004494 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_HCD_Stop+0x16>
 800177c:	2302      	movs	r3, #2
 800177e:	e00d      	b.n	800179c <HAL_HCD_Stop+0x32>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fa7b 	bl	8004c88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fe45 	bl	8004440 <USB_ResetPort>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	335c      	adds	r3, #92	@ 0x5c
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	334c      	adds	r3, #76	@ 0x4c
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fe87 	bl	8004534 <USB_GetCurrentFrame>
 8001826:	4603      	mov	r3, r0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fe62 	bl	8004506 <USB_GetHostSpeed>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b04      	cmp	r3, #4
 800187a:	d119      	bne.n	80018b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001888:	461a      	mov	r2, r3
 800188a:	2304      	movs	r3, #4
 800188c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4413      	add	r3, r2
 8001896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	0151      	lsls	r1, r2, #5
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	440a      	add	r2, r1
 80018a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	60d3      	str	r3, [r2, #12]
 80018ae:	e0ce      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c6:	d12c      	bne.n	8001922 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018d4:	461a      	mov	r2, r3
 80018d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	335d      	adds	r3, #93	@ 0x5d
 80018ec:	2207      	movs	r2, #7
 80018ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	0151      	lsls	r1, r2, #5
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	440a      	add	r2, r1
 8001906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f879 	bl	8004a12 <USB_HC_Halt>
 8001920:	e095      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b20      	cmp	r3, #32
 8001936:	d109      	bne.n	800194c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001944:	461a      	mov	r2, r3
 8001946:	2320      	movs	r3, #32
 8001948:	6093      	str	r3, [r2, #8]
 800194a:	e080      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b08      	cmp	r3, #8
 8001960:	d134      	bne.n	80019cc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4413      	add	r3, r2
 800196a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	0151      	lsls	r1, r2, #5
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	440a      	add	r2, r1
 8001978:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	335d      	adds	r3, #93	@ 0x5d
 8001992:	2205      	movs	r2, #5
 8001994:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019a2:	461a      	mov	r2, r3
 80019a4:	2310      	movs	r3, #16
 80019a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019b4:	461a      	mov	r2, r3
 80019b6:	2308      	movs	r3, #8
 80019b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f824 	bl	8004a12 <USB_HC_Halt>
 80019ca:	e040      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e2:	d134      	bne.n	8001a4e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	0151      	lsls	r1, r2, #5
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	440a      	add	r2, r1
 80019fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 ffff 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a20:	461a      	mov	r2, r3
 8001a22:	2310      	movs	r3, #16
 8001a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	335d      	adds	r3, #93	@ 0x5d
 8001a36:	2208      	movs	r2, #8
 8001a38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a46:	461a      	mov	r2, r3
 8001a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a64:	d122      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	0151      	lsls	r1, r2, #5
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 ffbe 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001aaa:	e300      	b.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	f040 80fd 	bne.w	8001cbe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3348      	adds	r3, #72	@ 0x48
 8001adc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	0159      	lsls	r1, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001af0:	1ad1      	subs	r1, r2, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4403      	add	r3, r0
 8001b00:	334c      	adds	r3, #76	@ 0x4c
 8001b02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	335d      	adds	r3, #93	@ 0x5d
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3358      	adds	r3, #88	@ 0x58
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	333f      	adds	r3, #63	@ 0x3f
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00a      	beq.n	8001b6a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	333f      	adds	r3, #63	@ 0x3f
 8001b64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d121      	bne.n	8001bae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	0151      	lsls	r1, r2, #5
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	440a      	add	r2, r1
 8001b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 ff3c 	bl	8004a12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2310      	movs	r3, #16
 8001baa:	6093      	str	r3, [r2, #8]
 8001bac:	e070      	b.n	8001c90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	333f      	adds	r3, #63	@ 0x3f
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d12a      	bne.n	8001c1a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	0151      	lsls	r1, r2, #5
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	440a      	add	r2, r1
 8001bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001be2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	335c      	adds	r3, #92	@ 0x5c
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	335c      	adds	r3, #92	@ 0x5c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4601      	mov	r1, r0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f005 f822 	bl	8006c5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c18:	e03a      	b.n	8001c90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	333f      	adds	r3, #63	@ 0x3f
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d12f      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	335c      	adds	r3, #92	@ 0x5c
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	3350      	adds	r3, #80	@ 0x50
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f083 0301 	eor.w	r3, r3, #1
 8001c5a:	b2d8      	uxtb	r0, r3
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3350      	adds	r3, #80	@ 0x50
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	b2d8      	uxtb	r0, r3
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	335c      	adds	r3, #92	@ 0x5c
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4601      	mov	r1, r0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f004 ffe6 	bl	8006c5c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3350      	adds	r3, #80	@ 0x50
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3350      	adds	r3, #80	@ 0x50
 8001cb8:	4602      	mov	r2, r0
 8001cba:	701a      	strb	r2, [r3, #0]
}
 8001cbc:	e1f7      	b.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f040 811a 	bne.w	8001f0a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	0151      	lsls	r1, r2, #5
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	440a      	add	r2, r1
 8001cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001cf0:	f023 0302 	bic.w	r3, r3, #2
 8001cf4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	335d      	adds	r3, #93	@ 0x5d
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10a      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	335c      	adds	r3, #92	@ 0x5c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e0d9      	b.n	8001ed6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	335d      	adds	r3, #93	@ 0x5d
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10a      	bne.n	8001d4e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	335c      	adds	r3, #92	@ 0x5c
 8001d48:	2205      	movs	r2, #5
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e0c3      	b.n	8001ed6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	335d      	adds	r3, #93	@ 0x5d
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d00a      	beq.n	8001d7a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	335d      	adds	r3, #93	@ 0x5d
 8001d74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d156      	bne.n	8001e28 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	3358      	adds	r3, #88	@ 0x58
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	1c59      	adds	r1, r3, #1
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4403      	add	r3, r0
 8001d9c:	3358      	adds	r3, #88	@ 0x58
 8001d9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3358      	adds	r3, #88	@ 0x58
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d914      	bls.n	8001de0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3358      	adds	r3, #88	@ 0x58
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	335c      	adds	r3, #92	@ 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e009      	b.n	8001df4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	335c      	adds	r3, #92	@ 0x5c
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e056      	b.n	8001ed6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	335d      	adds	r3, #93	@ 0x5d
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d123      	bne.n	8001e86 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	335c      	adds	r3, #92	@ 0x5c
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e027      	b.n	8001ed6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	335d      	adds	r3, #93	@ 0x5d
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b07      	cmp	r3, #7
 8001e9a:	d11c      	bne.n	8001ed6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3358      	adds	r3, #88	@ 0x58
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4403      	add	r3, r0
 8001ebe:	3358      	adds	r3, #88	@ 0x58
 8001ec0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335c      	adds	r3, #92	@ 0x5c
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	b2d8      	uxtb	r0, r3
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	335c      	adds	r3, #92	@ 0x5c
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4601      	mov	r1, r0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f004 feaa 	bl	8006c5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f08:	e0d1      	b.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1c:	2b80      	cmp	r3, #128	@ 0x80
 8001f1e:	d13e      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	0151      	lsls	r1, r2, #5
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	440a      	add	r2, r1
 8001f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3358      	adds	r3, #88	@ 0x58
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4403      	add	r3, r0
 8001f62:	3358      	adds	r3, #88	@ 0x58
 8001f64:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	335d      	adds	r3, #93	@ 0x5d
 8001f76:	2206      	movs	r2, #6
 8001f78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fd44 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f96:	461a      	mov	r2, r3
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	6093      	str	r3, [r2, #8]
}
 8001f9c:	e087      	b.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d17c      	bne.n	80020ae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333f      	adds	r3, #63	@ 0x3f
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d122      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3358      	adds	r3, #88	@ 0x58
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	0151      	lsls	r1, r2, #5
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fd02 	bl	8004a12 <USB_HC_Halt>
 800200e:	e045      	b.n	800209c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	333f      	adds	r3, #63	@ 0x3f
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	333f      	adds	r3, #63	@ 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002038:	2b02      	cmp	r3, #2
 800203a:	d12f      	bne.n	800209c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3358      	adds	r3, #88	@ 0x58
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d121      	bne.n	800209c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	335d      	adds	r3, #93	@ 0x5d
 8002068:	2203      	movs	r2, #3
 800206a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	0151      	lsls	r1, r2, #5
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	440a      	add	r2, r1
 8002082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fcbb 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a8:	461a      	mov	r2, r3
 80020aa:	2310      	movs	r3, #16
 80020ac:	6093      	str	r3, [r2, #8]
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d119      	bne.n	800211a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f2:	461a      	mov	r2, r3
 80020f4:	2304      	movs	r3, #4
 80020f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	0151      	lsls	r1, r2, #5
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	440a      	add	r2, r1
 800210e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002118:	e33e      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d141      	bne.n	80021b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213c:	461a      	mov	r2, r3
 800213e:	2320      	movs	r3, #32
 8002140:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	333d      	adds	r3, #61	@ 0x3d
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f040 831f 	bne.w	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	333d      	adds	r3, #61	@ 0x3d
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335c      	adds	r3, #92	@ 0x5c
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	440a      	add	r2, r1
 8002198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fc30 	bl	8004a12 <USB_HC_Halt>
}
 80021b2:	e2f1      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b40      	cmp	r3, #64	@ 0x40
 80021c8:	d13f      	bne.n	800224a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	335d      	adds	r3, #93	@ 0x5d
 80021da:	2204      	movs	r2, #4
 80021dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	333d      	adds	r3, #61	@ 0x3d
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3358      	adds	r3, #88	@ 0x58
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fbee 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	2340      	movs	r3, #64	@ 0x40
 8002246:	6093      	str	r3, [r2, #8]
}
 8002248:	e2a6      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002260:	d122      	bne.n	80022a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	0151      	lsls	r1, r2, #5
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	440a      	add	r2, r1
 8002278:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fbc0 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800229e:	461a      	mov	r2, r3
 80022a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022a4:	6093      	str	r3, [r2, #8]
}
 80022a6:	e277      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d135      	bne.n	800232a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3358      	adds	r3, #88	@ 0x58
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fb88 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2301      	movs	r3, #1
 8002312:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	335d      	adds	r3, #93	@ 0x5d
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
}
 8002328:	e236      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d12b      	bne.n	8002398 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2308      	movs	r3, #8
 8002350:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	0151      	lsls	r1, r2, #5
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	440a      	add	r2, r1
 8002368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fb48 	bl	8004a12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	335d      	adds	r3, #93	@ 0x5d
 8002392:	2205      	movs	r2, #5
 8002394:	701a      	strb	r2, [r3, #0]
}
 8002396:	e1ff      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d155      	bne.n	800245a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	3358      	adds	r3, #88	@ 0x58
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	335d      	adds	r3, #93	@ 0x5d
 80023d2:	2203      	movs	r2, #3
 80023d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	333d      	adds	r3, #61	@ 0x3d
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d114      	bne.n	8002416 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	333c      	adds	r3, #60	@ 0x3c
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	333d      	adds	r3, #61	@ 0x3d
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	0151      	lsls	r1, r2, #5
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	440a      	add	r2, r1
 800242c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fae6 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2310      	movs	r3, #16
 8002456:	6093      	str	r3, [r2, #8]
}
 8002458:	e19e      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d12b      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	440a      	add	r2, r1
 8002486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fab9 	bl	8004a12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	335d      	adds	r3, #93	@ 0x5d
 80024b0:	2206      	movs	r2, #6
 80024b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	6093      	str	r3, [r2, #8]
}
 80024c6:	e167      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024de:	d135      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	0151      	lsls	r1, r2, #5
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	440a      	add	r2, r1
 80024f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fa81 	bl	8004a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2310      	movs	r3, #16
 8002520:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002534:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	335d      	adds	r3, #93	@ 0x5d
 8002546:	2208      	movs	r2, #8
 8002548:	701a      	strb	r2, [r3, #0]
}
 800254a:	e125      	b.n	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	f040 811a 	bne.w	8002798 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	0151      	lsls	r1, r2, #5
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	440a      	add	r2, r1
 800257a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800257e:	f023 0302 	bic.w	r3, r3, #2
 8002582:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	335d      	adds	r3, #93	@ 0x5d
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d137      	bne.n	800260a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	335c      	adds	r3, #92	@ 0x5c
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	333f      	adds	r3, #63	@ 0x3f
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d00b      	beq.n	80025dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	333f      	adds	r3, #63	@ 0x3f
 80025d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	f040 80c5 	bne.w	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3351      	adds	r3, #81	@ 0x51
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2d8      	uxtb	r0, r3
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	3351      	adds	r3, #81	@ 0x51
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e0ad      	b.n	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	335d      	adds	r3, #93	@ 0x5d
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d10a      	bne.n	8002636 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	335c      	adds	r3, #92	@ 0x5c
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e097      	b.n	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	335d      	adds	r3, #93	@ 0x5d
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d10a      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	335c      	adds	r3, #92	@ 0x5c
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e081      	b.n	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	335d      	adds	r3, #93	@ 0x5d
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10a      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	335c      	adds	r3, #92	@ 0x5c
 8002688:	2205      	movs	r2, #5
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e06b      	b.n	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	335d      	adds	r3, #93	@ 0x5d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d00a      	beq.n	80026ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	335d      	adds	r3, #93	@ 0x5d
 80026b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d155      	bne.n	8002766 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	3358      	adds	r3, #88	@ 0x58
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4403      	add	r3, r0
 80026dc:	3358      	adds	r3, #88	@ 0x58
 80026de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	3358      	adds	r3, #88	@ 0x58
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d914      	bls.n	8002720 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	3358      	adds	r3, #88	@ 0x58
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	335c      	adds	r3, #92	@ 0x5c
 800271a:	2204      	movs	r2, #4
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e009      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	335c      	adds	r3, #92	@ 0x5c
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800274a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002752:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2302      	movs	r3, #2
 8002776:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	335c      	adds	r3, #92	@ 0x5c
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4601      	mov	r1, r0
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f004 fa62 	bl	8006c5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002798:	bf00      	nop
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	0c5b      	lsrs	r3, r3, #17
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d004      	beq.n	80027e6 <HCD_RXQLVL_IRQHandler+0x46>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	f000 8082 	beq.w	80028e8 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027e4:	e083      	b.n	80028ee <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d07f      	beq.n	80028ec <HCD_RXQLVL_IRQHandler+0x14c>
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3344      	adds	r3, #68	@ 0x44
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d074      	beq.n	80028ec <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3344      	adds	r3, #68	@ 0x44
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	b292      	uxth	r2, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f001 fc9a 	bl	8004156 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	3344      	adds	r3, #68	@ 0x44
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	18d1      	adds	r1, r2, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4403      	add	r3, r0
 8002846:	3344      	adds	r3, #68	@ 0x44
 8002848:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	334c      	adds	r3, #76	@ 0x4c
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	18d1      	adds	r1, r2, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4403      	add	r3, r0
 800286e:	334c      	adds	r3, #76	@ 0x4c
 8002870:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HCD_RXQLVL_IRQHandler+0x158>)
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d031      	beq.n	80028ec <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800289e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3350      	adds	r3, #80	@ 0x50
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f083 0301 	eor.w	r3, r3, #1
 80028d0:	b2d8      	uxtb	r0, r3
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3350      	adds	r3, #80	@ 0x50
 80028e2:	4602      	mov	r2, r0
 80028e4:	701a      	strb	r2, [r3, #0]
      break;
 80028e6:	e001      	b.n	80028ec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80028ec:	bf00      	nop
  }
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	@ 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	1ff80000 	.word	0x1ff80000

080028fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002928:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d10b      	bne.n	800294c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f004 f970 	bl	8006c24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d132      	bne.n	80029bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d126      	bne.n	80029b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d113      	bne.n	8002998 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800297a:	d106      	bne.n	800298a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fd22 	bl	80043cc <USB_InitFSLSPClkSel>
 8002988:	e011      	b.n	80029ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fd1b 	bl	80043cc <USB_InitFSLSPClkSel>
 8002996:	e00a      	b.n	80029ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029a6:	461a      	mov	r2, r3
 80029a8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f004 f962 	bl	8006c78 <HAL_HCD_PortEnabled_Callback>
 80029b4:	e002      	b.n	80029bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f004 f96c 	bl	8006c94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d103      	bne.n	80029ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e25e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d075      	beq.n	8002aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a02:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0e:	4b85      	ldr	r3, [pc, #532]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4b82      	ldr	r3, [pc, #520]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	4b7e      	ldr	r3, [pc, #504]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05b      	beq.n	8002aec <HAL_RCC_OscConfig+0x108>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d157      	bne.n	8002aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e239      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x74>
 8002a4a:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a75      	ldr	r2, [pc, #468]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xb0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x98>
 8002a62:	4b70      	ldr	r3, [pc, #448]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6f      	ldr	r2, [pc, #444]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6c      	ldr	r2, [pc, #432]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xb0>
 8002a7c:	4b69      	ldr	r3, [pc, #420]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a68      	ldr	r2, [pc, #416]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a65      	ldr	r2, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fd ffb8 	bl	8000a10 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fd ffb4 	bl	8000a10 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1fe      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xc0>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fd ffa4 	bl	8000a10 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fd ffa0 	bl	8000a10 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1ea      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b51      	ldr	r3, [pc, #324]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0xe8>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x152>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1be      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4937      	ldr	r1, [pc, #220]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_RCC_OscConfig+0x244>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fd ff59 	bl	8000a10 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fd ff55 	bl	8000a10 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e19f      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4925      	ldr	r1, [pc, #148]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_RCC_OscConfig+0x244>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fd ff38 	bl	8000a10 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fd ff34 	bl	8000a10 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e17e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d036      	beq.n	8002c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCC_OscConfig+0x248>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fd ff18 	bl	8000a10 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fd ff14 	bl	8000a10 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e15e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x200>
 8002c02:	e01b      	b.n	8002c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_OscConfig+0x248>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fd ff01 	bl	8000a10 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	e00e      	b.n	8002c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c12:	f7fd fefd 	bl	8000a10 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d907      	bls.n	8002c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e147      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	42470000 	.word	0x42470000
 8002c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b88      	ldr	r3, [pc, #544]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ea      	bne.n	8002c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8097 	beq.w	8002d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b81      	ldr	r3, [pc, #516]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	4a7c      	ldr	r2, [pc, #496]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b77      	ldr	r3, [pc, #476]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b74      	ldr	r3, [pc, #464]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a73      	ldr	r2, [pc, #460]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fd febd 	bl	8000a10 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9a:	f7fd feb9 	bl	8000a10 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e103      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x2ea>
 8002cc0:	4b64      	ldr	r3, [pc, #400]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a63      	ldr	r2, [pc, #396]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x324>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x30c>
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a5e      	ldr	r2, [pc, #376]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0x324>
 8002cf0:	4b58      	ldr	r3, [pc, #352]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	4a57      	ldr	r2, [pc, #348]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfc:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a54      	ldr	r2, [pc, #336]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 0304 	bic.w	r3, r3, #4
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fd fe7e 	bl	8000a10 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fd fe7a 	bl	8000a10 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0c2      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	4b49      	ldr	r3, [pc, #292]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <HAL_RCC_OscConfig+0x334>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fd fe68 	bl	8000a10 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fd fe64 	bl	8000a10 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0ac      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ee      	bne.n	8002d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	4a38      	ldr	r2, [pc, #224]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8098 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d82:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d05c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d141      	bne.n	8002e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fe38 	bl	8000a10 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd fe34 	bl	8000a10 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e07e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	491b      	ldr	r1, [pc, #108]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fe0d 	bl	8000a10 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fd fe09 	bl	8000a10 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e053      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x416>
 8002e18:	e04b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fdf6 	bl	8000a10 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fd fdf2 	bl	8000a10 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e03c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x444>
 8002e46:	e034      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e02f      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <HAL_RCC_OscConfig+0x4d8>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d11c      	bne.n	8002eae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d115      	bne.n	8002eae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10d      	bne.n	8002eae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cc      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b68      	ldr	r3, [pc, #416]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90c      	bls.n	8002efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a58      	ldr	r2, [pc, #352]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d044      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4934      	ldr	r1, [pc, #208]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd fd2e 	bl	8000a10 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd fd2a 	bl	8000a10 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2b      	ldr	r3, [pc, #172]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b25      	ldr	r3, [pc, #148]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d20c      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b22      	ldr	r3, [pc, #136]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fc8e 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00
 800307c:	40023800 	.word	0x40023800
 8003080:	08007a40 	.word	0x08007a40
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b094      	sub	sp, #80	@ 0x50
 8003092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	@ 0x44
 8003098:	2300      	movs	r3, #0
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800309c:	2300      	movs	r3, #0
 800309e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a4:	4b79      	ldr	r3, [pc, #484]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d00d      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f200 80e1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030be:	e0db      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80030c4:	e0db      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ca:	e0d8      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6139      	str	r1, [r7, #16]
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003130:	4659      	mov	r1, fp
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4651      	mov	r1, sl
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4651      	mov	r1, sl
 8003140:	ebb2 0801 	subs.w	r8, r2, r1
 8003144:	4659      	mov	r1, fp
 8003146:	eb63 0901 	sbc.w	r9, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb18 0303 	adds.w	r3, r8, r3
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	462b      	mov	r3, r5
 800316c:	eb49 0303 	adc.w	r3, r9, r3
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317e:	4629      	mov	r1, r5
 8003180:	024b      	lsls	r3, r1, #9
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003188:	4621      	mov	r1, r4
 800318a:	024a      	lsls	r2, r1, #9
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319c:	f7fd f870 	bl	8000280 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a8:	e058      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	4611      	mov	r1, r2
 80031b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	0159      	lsls	r1, r3, #5
 80031d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d6:	0150      	lsls	r0, r2, #5
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4641      	mov	r1, r8
 80031de:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003200:	eb63 050b 	sbc.w	r5, r3, fp
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	464b      	mov	r3, r9
 8003220:	eb45 0303 	adc.w	r3, r5, r3
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	f7fd f816 	bl	8000280 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800326c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800326e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003280:	4618      	mov	r0, r3
 8003282:	3750      	adds	r7, #80	@ 0x50
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08007a50 	.word	0x08007a50

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08007a50 	.word	0x08007a50

08003300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e03f      	b.n	8003392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fa48 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f90b 	bl	8003560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b088      	sub	sp, #32
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f040 8083 	bne.w	80034c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Transmit+0x2e>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e07b      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit+0x40>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e074      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	@ 0x21
 80033ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033f0:	f7fd fb0e 	bl	8000a10 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800340a:	e042      	b.n	8003492 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003422:	d122      	bne.n	800346a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	@ 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f84c 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e042      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3302      	adds	r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	e017      	b.n	8003492 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	e013      	b.n	8003492 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2180      	movs	r1, #128	@ 0x80
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f829 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e01f      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	60ba      	str	r2, [r7, #8]
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1b7      	bne.n	800340c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2140      	movs	r1, #64	@ 0x40
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f810 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e006      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034dc:	e02c      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d028      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0x30>
 80034ec:	f7fd fa90 	bl	8000a10 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d21d      	bcs.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800350a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e00f      	b.n	8003558 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d0c3      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003568:	af00      	add	r7, sp, #0
 800356a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800356e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800357a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	ea40 0301 	orr.w	r3, r0, r1
 800358a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800358c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	431a      	orrs	r2, r3
 800359a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80035ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035ba:	f021 010c 	bic.w	r1, r1, #12
 80035be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	ea40 0301 	orr.w	r3, r0, r1
 80035e8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f4:	f040 824a 	bne.w	8003a8c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b96      	ldr	r3, [pc, #600]	@ (8003858 <UART_SetConfig+0x2f8>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d006      	beq.n	8003612 <UART_SetConfig+0xb2>
 8003604:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b94      	ldr	r3, [pc, #592]	@ (800385c <UART_SetConfig+0x2fc>)
 800360c:	429a      	cmp	r2, r3
 800360e:	f040 8129 	bne.w	8003864 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003612:	f7ff fe61 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003616:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800361a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8003624:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8003628:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 800362c:	4622      	mov	r2, r4
 800362e:	462b      	mov	r3, r5
 8003630:	1891      	adds	r1, r2, r2
 8003632:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003636:	415b      	adcs	r3, r3
 8003638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800363c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003640:	4621      	mov	r1, r4
 8003642:	1851      	adds	r1, r2, r1
 8003644:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003648:	4629      	mov	r1, r5
 800364a:	414b      	adcs	r3, r1
 800364c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 800365c:	4649      	mov	r1, r9
 800365e:	00cb      	lsls	r3, r1, #3
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003666:	4641      	mov	r1, r8
 8003668:	00ca      	lsls	r2, r1, #3
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	4603      	mov	r3, r0
 8003670:	4622      	mov	r2, r4
 8003672:	189b      	adds	r3, r3, r2
 8003674:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003678:	462b      	mov	r3, r5
 800367a:	460a      	mov	r2, r1
 800367c:	eb42 0303 	adc.w	r3, r2, r3
 8003680:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003684:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003690:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8003694:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8003698:	460b      	mov	r3, r1
 800369a:	18db      	adds	r3, r3, r3
 800369c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a0:	4613      	mov	r3, r2
 80036a2:	eb42 0303 	adc.w	r3, r2, r3
 80036a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036aa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80036ae:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80036b2:	f7fc fde5 	bl	8000280 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b69      	ldr	r3, [pc, #420]	@ (8003860 <UART_SetConfig+0x300>)
 80036bc:	fba3 2302 	umull	r2, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	011c      	lsls	r4, r3, #4
 80036c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80036ce:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80036d2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80036d6:	4642      	mov	r2, r8
 80036d8:	464b      	mov	r3, r9
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80036e0:	415b      	adcs	r3, r3
 80036e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036e6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80036ea:	4641      	mov	r1, r8
 80036ec:	1851      	adds	r1, r2, r1
 80036ee:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8003706:	4659      	mov	r1, fp
 8003708:	00cb      	lsls	r3, r1, #3
 800370a:	4651      	mov	r1, sl
 800370c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003710:	4651      	mov	r1, sl
 8003712:	00ca      	lsls	r2, r1, #3
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	4603      	mov	r3, r0
 800371a:	4642      	mov	r2, r8
 800371c:	189b      	adds	r3, r3, r2
 800371e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003722:	464b      	mov	r3, r9
 8003724:	460a      	mov	r2, r1
 8003726:	eb42 0303 	adc.w	r3, r2, r3
 800372a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800372e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800373a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800373e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8003742:	460b      	mov	r3, r1
 8003744:	18db      	adds	r3, r3, r3
 8003746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800374a:	4613      	mov	r3, r2
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003754:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003758:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 800375c:	f7fc fd90 	bl	8000280 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4611      	mov	r1, r2
 8003766:	4b3e      	ldr	r3, [pc, #248]	@ (8003860 <UART_SetConfig+0x300>)
 8003768:	fba3 2301 	umull	r2, r3, r3, r1
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2264      	movs	r2, #100	@ 0x64
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	1acb      	subs	r3, r1, r3
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800377c:	4b38      	ldr	r3, [pc, #224]	@ (8003860 <UART_SetConfig+0x300>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800378a:	441c      	add	r4, r3
 800378c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003796:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800379a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800379e:	4642      	mov	r2, r8
 80037a0:	464b      	mov	r3, r9
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80037a8:	415b      	adcs	r3, r3
 80037aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80037ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80037b2:	4641      	mov	r1, r8
 80037b4:	1851      	adds	r1, r2, r1
 80037b6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80037ce:	4659      	mov	r1, fp
 80037d0:	00cb      	lsls	r3, r1, #3
 80037d2:	4651      	mov	r1, sl
 80037d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d8:	4651      	mov	r1, sl
 80037da:	00ca      	lsls	r2, r1, #3
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	4642      	mov	r2, r8
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80037ea:	464b      	mov	r3, r9
 80037ec:	460a      	mov	r2, r1
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80037f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003802:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003806:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800380a:	460b      	mov	r3, r1
 800380c:	18db      	adds	r3, r3, r3
 800380e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003812:	4613      	mov	r3, r2
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800381c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003820:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003824:	f7fc fd2c 	bl	8000280 <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <UART_SetConfig+0x300>)
 800382e:	fba3 1302 	umull	r1, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2164      	movs	r1, #100	@ 0x64
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	3332      	adds	r3, #50	@ 0x32
 8003840:	4a07      	ldr	r2, [pc, #28]	@ (8003860 <UART_SetConfig+0x300>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	f003 0207 	and.w	r2, r3, #7
 800384c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4422      	add	r2, r4
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	e34a      	b.n	8003eee <UART_SetConfig+0x98e>
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7ff fd24 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003868:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800386c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003870:	2200      	movs	r2, #0
 8003872:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003876:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800387a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	1891      	adds	r1, r2, r2
 8003884:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003888:	415b      	adcs	r3, r3
 800388a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800388e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003892:	4621      	mov	r1, r4
 8003894:	eb12 0a01 	adds.w	sl, r2, r1
 8003898:	4629      	mov	r1, r5
 800389a:	eb43 0b01 	adc.w	fp, r3, r1
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b2:	4692      	mov	sl, r2
 80038b4:	469b      	mov	fp, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	eb1a 0303 	adds.w	r3, sl, r3
 80038bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80038c0:	462b      	mov	r3, r5
 80038c2:	eb4b 0303 	adc.w	r3, fp, r3
 80038c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80038ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80038d6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80038da:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80038de:	460b      	mov	r3, r1
 80038e0:	18db      	adds	r3, r3, r3
 80038e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80038f4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80038f8:	f7fc fcc2 	bl	8000280 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4b61      	ldr	r3, [pc, #388]	@ (8003a88 <UART_SetConfig+0x528>)
 8003902:	fba3 2302 	umull	r2, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	011c      	lsls	r4, r3, #4
 800390a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003914:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003918:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003924:	415b      	adcs	r3, r3
 8003926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003928:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800392c:	4641      	mov	r1, r8
 800392e:	1851      	adds	r1, r2, r1
 8003930:	6739      	str	r1, [r7, #112]	@ 0x70
 8003932:	4649      	mov	r1, r9
 8003934:	414b      	adcs	r3, r1
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8003944:	4659      	mov	r1, fp
 8003946:	00cb      	lsls	r3, r1, #3
 8003948:	4651      	mov	r1, sl
 800394a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394e:	4651      	mov	r1, sl
 8003950:	00ca      	lsls	r2, r1, #3
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4603      	mov	r3, r0
 8003958:	4642      	mov	r2, r8
 800395a:	189b      	adds	r3, r3, r2
 800395c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800396c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003978:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800397c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8003980:	460b      	mov	r3, r1
 8003982:	18db      	adds	r3, r3, r3
 8003984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003986:	4613      	mov	r3, r2
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800398e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003992:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003996:	f7fc fc73 	bl	8000280 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <UART_SetConfig+0x528>)
 80039a2:	fba3 2301 	umull	r2, r3, r3, r1
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2264      	movs	r2, #100	@ 0x64
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	1acb      	subs	r3, r1, r3
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039b6:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <UART_SetConfig+0x528>)
 80039b8:	fba3 2302 	umull	r2, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039c4:	441c      	add	r4, r3
 80039c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80039d0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80039d4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	1891      	adds	r1, r2, r2
 80039de:	6639      	str	r1, [r7, #96]	@ 0x60
 80039e0:	415b      	adcs	r3, r3
 80039e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80039e8:	4641      	mov	r1, r8
 80039ea:	1851      	adds	r1, r2, r1
 80039ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ee:	4649      	mov	r1, r9
 80039f0:	414b      	adcs	r3, r1
 80039f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8003a00:	4659      	mov	r1, fp
 8003a02:	00cb      	lsls	r3, r1, #3
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	00ca      	lsls	r2, r1, #3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	4642      	mov	r2, r8
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	460a      	mov	r2, r1
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8003a28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003a34:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8003a38:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	18db      	adds	r3, r3, r3
 8003a40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a4e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003a52:	f7fc fc15 	bl	8000280 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <UART_SetConfig+0x528>)
 8003a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	2164      	movs	r1, #100	@ 0x64
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3332      	adds	r3, #50	@ 0x32
 8003a6e:	4a06      	ldr	r2, [pc, #24]	@ (8003a88 <UART_SetConfig+0x528>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4422      	add	r2, r4
 8003a82:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a84:	e233      	b.n	8003eee <UART_SetConfig+0x98e>
 8003a86:	bf00      	nop
 8003a88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc8 <UART_SetConfig+0x768>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d006      	beq.n	8003aa6 <UART_SetConfig+0x546>
 8003a98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003ccc <UART_SetConfig+0x76c>)
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f040 8117 	bne.w	8003cd4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa6:	f7ff fc17 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003aaa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003ab8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003abc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	eb12 0801 	adds.w	r8, r2, r1
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	eb43 0901 	adc.w	r9, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ae8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af0:	4690      	mov	r8, r2
 8003af2:	4699      	mov	r9, r3
 8003af4:	4623      	mov	r3, r4
 8003af6:	eb18 0303 	adds.w	r3, r8, r3
 8003afa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003afe:	462b      	mov	r3, r5
 8003b00:	eb49 0303 	adc.w	r3, r9, r3
 8003b04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003b08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b14:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8003b24:	4629      	mov	r1, r5
 8003b26:	008b      	lsls	r3, r1, #2
 8003b28:	4621      	mov	r1, r4
 8003b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2e:	4621      	mov	r1, r4
 8003b30:	008a      	lsls	r2, r1, #2
 8003b32:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003b36:	f7fc fba3 	bl	8000280 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4b64      	ldr	r3, [pc, #400]	@ (8003cd0 <UART_SetConfig+0x770>)
 8003b40:	fba3 2302 	umull	r2, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	011c      	lsls	r4, r3, #4
 8003b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003b52:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003b56:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	6439      	str	r1, [r7, #64]	@ 0x40
 8003b62:	415b      	adcs	r3, r3
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	1851      	adds	r1, r2, r1
 8003b6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b70:	4649      	mov	r1, r9
 8003b72:	414b      	adcs	r3, r1
 8003b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8003b82:	4659      	mov	r1, fp
 8003b84:	00cb      	lsls	r3, r1, #3
 8003b86:	4651      	mov	r1, sl
 8003b88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	00ca      	lsls	r2, r1, #3
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	4603      	mov	r3, r0
 8003b96:	4642      	mov	r2, r8
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	eb42 0303 	adc.w	r3, r2, r3
 8003ba6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003baa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003bb6:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	008b      	lsls	r3, r1, #2
 8003bca:	4641      	mov	r1, r8
 8003bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	008a      	lsls	r2, r1, #2
 8003bd4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003bd8:	f7fc fb52 	bl	8000280 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <UART_SetConfig+0x770>)
 8003be4:	fba3 2301 	umull	r2, r3, r3, r1
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2264      	movs	r2, #100	@ 0x64
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	1acb      	subs	r3, r1, r3
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <UART_SetConfig+0x770>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c02:	441c      	add	r4, r3
 8003c04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003c0e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8003c12:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8003c16:	4642      	mov	r2, r8
 8003c18:	464b      	mov	r3, r9
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c26:	4641      	mov	r1, r8
 8003c28:	1851      	adds	r1, r2, r1
 8003c2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	414b      	adcs	r3, r1
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8003c3e:	4659      	mov	r1, fp
 8003c40:	00cb      	lsls	r3, r1, #3
 8003c42:	4651      	mov	r1, sl
 8003c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c48:	4651      	mov	r1, sl
 8003c4a:	00ca      	lsls	r2, r1, #3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	4642      	mov	r2, r8
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003c66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c72:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8003c82:	4649      	mov	r1, r9
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	4641      	mov	r1, r8
 8003c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	008a      	lsls	r2, r1, #2
 8003c90:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003c94:	f7fc faf4 	bl	8000280 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <UART_SetConfig+0x770>)
 8003c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2164      	movs	r1, #100	@ 0x64
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	3332      	adds	r3, #50	@ 0x32
 8003cb0:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <UART_SetConfig+0x770>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4422      	add	r2, r4
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	e112      	b.n	8003eee <UART_SetConfig+0x98e>
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7ff faec 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003ce6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003cea:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8003cee:	4642      	mov	r2, r8
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	6239      	str	r1, [r7, #32]
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfe:	4641      	mov	r1, r8
 8003d00:	1854      	adds	r4, r2, r1
 8003d02:	4649      	mov	r1, r9
 8003d04:	eb43 0501 	adc.w	r5, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	00eb      	lsls	r3, r5, #3
 8003d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003d24:	464b      	mov	r3, r9
 8003d26:	eb45 0303 	adc.w	r3, r5, r3
 8003d2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d3a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	008b      	lsls	r3, r1, #2
 8003d4e:	4621      	mov	r1, r4
 8003d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d54:	4621      	mov	r1, r4
 8003d56:	008a      	lsls	r2, r1, #2
 8003d58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003d5c:	f7fc fa90 	bl	8000280 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4b65      	ldr	r3, [pc, #404]	@ (8003efc <UART_SetConfig+0x99c>)
 8003d66:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	011c      	lsls	r4, r3, #4
 8003d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d78:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003d7c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	61b9      	str	r1, [r7, #24]
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	4641      	mov	r1, r8
 8003d92:	1851      	adds	r1, r2, r1
 8003d94:	6139      	str	r1, [r7, #16]
 8003d96:	4649      	mov	r1, r9
 8003d98:	414b      	adcs	r3, r1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da8:	4659      	mov	r1, fp
 8003daa:	00cb      	lsls	r3, r1, #3
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db2:	4651      	mov	r1, sl
 8003db4:	00ca      	lsls	r2, r1, #3
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	eb42 0303 	adc.w	r3, r2, r3
 8003dcc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003dd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ddc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003dec:	4649      	mov	r1, r9
 8003dee:	008b      	lsls	r3, r1, #2
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df6:	4641      	mov	r1, r8
 8003df8:	008a      	lsls	r2, r1, #2
 8003dfa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003dfe:	f7fc fa3f 	bl	8000280 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	4b3c      	ldr	r3, [pc, #240]	@ (8003efc <UART_SetConfig+0x99c>)
 8003e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2264      	movs	r2, #100	@ 0x64
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	1acb      	subs	r3, r1, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	@ 0x32
 8003e1c:	4a37      	ldr	r2, [pc, #220]	@ (8003efc <UART_SetConfig+0x99c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e28:	441c      	add	r4, r3
 8003e2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e34:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e38:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	1891      	adds	r1, r2, r2
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	415b      	adcs	r3, r3
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	1851      	adds	r1, r2, r1
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	4649      	mov	r1, r9
 8003e54:	414b      	adcs	r3, r1
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e64:	4659      	mov	r1, fp
 8003e66:	00cb      	lsls	r3, r1, #3
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6e:	4651      	mov	r1, sl
 8003e70:	00ca      	lsls	r2, r1, #3
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	4642      	mov	r2, r8
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e80:	464b      	mov	r3, r9
 8003e82:	460a      	mov	r2, r1
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e98:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	008a      	lsls	r2, r1, #2
 8003eb6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003eba:	f7fc f9e1 	bl	8000280 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <UART_SetConfig+0x99c>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	@ 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	@ 0x32
 8003ed6:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <UART_SetConfig+0x99c>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4422      	add	r2, r4
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	e7ff      	b.n	8003eee <UART_SetConfig+0x98e>
 8003eee:	bf00      	nop
 8003ef0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f00:	b084      	sub	sp, #16
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	f107 001c 	add.w	r0, r7, #28
 8003f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d122      	bne.n	8003f5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f94a 	bl	80041ec <USB_CoreReset>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e01a      	b.n	8003f94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f93e 	bl	80041ec <USB_CoreReset>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f86:	e005      	b.n	8003f94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10b      	bne.n	8003fb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f043 0206 	orr.w	r2, r3, #6
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fbe:	b004      	add	sp, #16
 8003fc0:	4770      	bx	lr

08003fc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e00b      	b.n	800404a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e001      	b.n	800404a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e003      	b.n	8004052 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800404a:	2032      	movs	r0, #50	@ 0x32
 800404c:	f7fc fcec 	bl	8000a28 <HAL_Delay>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a09      	ldr	r2, [pc, #36]	@ (80040a4 <USB_FlushTxFifo+0x48>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e006      	b.n	8004096 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d0f0      	beq.n	8004076 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	00030d40 	.word	0x00030d40

080040a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2210      	movs	r2, #16
 80040b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <USB_FlushRxFifo+0x40>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d0f0      	beq.n	80040ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	00030d40 	.word	0x00030d40

080040ec <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	@ 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	460b      	mov	r3, r1
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	4613      	mov	r3, r2
 8004100:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800410a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11a      	bne.n	8004148 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004112:	88bb      	ldrh	r3, [r7, #4]
 8004114:	3303      	adds	r3, #3
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e00f      	b.n	8004140 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	031a      	lsls	r2, r3, #12
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3304      	adds	r3, #4
 8004138:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	3301      	adds	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d3eb      	bcc.n	8004120 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	@ 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004156:	b480      	push	{r7}
 8004158:	b089      	sub	sp, #36	@ 0x24
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	4613      	mov	r3, r2
 8004162:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	3303      	adds	r3, #3
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e00b      	b.n	8004192 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	601a      	str	r2, [r3, #0]
    pDest++;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3304      	adds	r3, #4
 800418a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	3301      	adds	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d3ef      	bcc.n	800417a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800419a:	69fb      	ldr	r3, [r7, #28]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3724      	adds	r7, #36	@ 0x24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a13      	ldr	r2, [pc, #76]	@ (8004250 <USB_CoreReset+0x64>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e01b      	b.n	8004242 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	daf2      	bge.n	80041f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <USB_CoreReset+0x64>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d0f0      	beq.n	8004222 <USB_CoreReset+0x36>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	00030d40 	.word	0x00030d40

08004254 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004254:	b084      	sub	sp, #16
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	f107 001c 	add.w	r0, r7, #28
 8004262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004270:	461a      	mov	r2, r3
 8004272:	2300      	movs	r3, #0
 8004274:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10a      	bne.n	80042c2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042ba:	f043 0304 	orr.w	r3, r3, #4
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e014      	b.n	80042ec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e009      	b.n	80042ec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80042ec:	2110      	movs	r1, #16
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff feb4 	bl	800405c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fed7 	bl	80040a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e015      	b.n	800432c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4413      	add	r3, r2
 8004308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3301      	adds	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	429a      	cmp	r2, r3
 8004332:	d3e5      	bcc.n	8004300 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004334:	2101      	movs	r1, #1
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8ac 	bl	8004494 <USB_DriveVbus>

  HAL_Delay(200U);
 800433c:	20c8      	movs	r0, #200	@ 0xc8
 800433e:	f7fc fb73 	bl	8000a28 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <USB_HostInit+0x164>)
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <USB_HostInit+0x168>)
 800436e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004372:	e009      	b.n	8004388 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	@ 0x80
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a10      	ldr	r2, [pc, #64]	@ (80043c0 <USB_HostInit+0x16c>)
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a10      	ldr	r2, [pc, #64]	@ (80043c4 <USB_HostInit+0x170>)
 8004384:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <USB_HostInit+0x174>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043b2:	b004      	add	sp, #16
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	01000200 	.word	0x01000200
 80043bc:	00e00300 	.word	0x00e00300
 80043c0:	00600080 	.word	0x00600080
 80043c4:	004000e0 	.word	0x004000e0
 80043c8:	a3200008 	.word	0xa3200008

080043cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004414:	461a      	mov	r2, r3
 8004416:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e009      	b.n	8004432 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d106      	bne.n	8004432 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800442a:	461a      	mov	r2, r3
 800442c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004430:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004460:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800446a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800446e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004470:	2064      	movs	r0, #100	@ 0x64
 8004472:	f7fc fad9 	bl	8000a28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800447e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004482:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004484:	200a      	movs	r0, #10
 8004486:	f7fc facf 	bl	8000a28 <HAL_Delay>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80044b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <USB_DriveVbus+0x44>
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d106      	bne.n	80044d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80044d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e2:	d109      	bne.n	80044f8 <USB_DriveVbus+0x64>
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80044f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	0c5b      	lsrs	r3, r3, #17
 8004524:	f003 0303 	and.w	r3, r3, #3
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	b29b      	uxth	r3, r3
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	70fb      	strb	r3, [r7, #3]
 800456a:	460b      	mov	r3, r1
 800456c:	70bb      	strb	r3, [r7, #2]
 800456e:	4613      	mov	r3, r2
 8004570:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800458e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004592:	2b03      	cmp	r3, #3
 8004594:	d87e      	bhi.n	8004694 <USB_HC_Init+0x13c>
 8004596:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <USB_HC_Init+0x44>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	08004657 	.word	0x08004657
 80045a4:	080045ad 	.word	0x080045ad
 80045a8:	08004619 	.word	0x08004619
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b8:	461a      	mov	r2, r3
 80045ba:	f240 439d 	movw	r3, #1181	@ 0x49d
 80045be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80045c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da10      	bge.n	80045ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80045e8:	e057      	b.n	800469a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d051      	beq.n	800469a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	440a      	add	r2, r1
 800460c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004610:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004614:	60d3      	str	r3, [r2, #12]
      break;
 8004616:	e040      	b.n	800469a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004624:	461a      	mov	r2, r3
 8004626:	f240 639d 	movw	r3, #1693	@ 0x69d
 800462a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800462c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004630:	2b00      	cmp	r3, #0
 8004632:	da34      	bge.n	800469e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	440a      	add	r2, r1
 800464a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800464e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004652:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004654:	e023      	b.n	800469e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	f240 2325 	movw	r3, #549	@ 0x225
 8004668:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800466a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800466e:	2b00      	cmp	r3, #0
 8004670:	da17      	bge.n	80046a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	440a      	add	r2, r1
 8004688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800468c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004690:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004692:	e006      	b.n	80046a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	75fb      	strb	r3, [r7, #23]
      break;
 8004698:	e004      	b.n	80046a4 <USB_HC_Init+0x14c>
      break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <USB_HC_Init+0x14c>
      break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <USB_HC_Init+0x14c>
      break;
 80046a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80046be:	4313      	orrs	r3, r2
 80046c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80046ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da03      	bge.n	80046de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80046d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e001      	b.n	80046e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80046e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80046ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e001      	b.n	80046f6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80046f6:	787b      	ldrb	r3, [r7, #1]
 80046f8:	059b      	lsls	r3, r3, #22
 80046fa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80046fe:	78bb      	ldrb	r3, [r7, #2]
 8004700:	02db      	lsls	r3, r3, #11
 8004702:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004706:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800470c:	049b      	lsls	r3, r3, #18
 800470e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004712:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004714:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004716:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800471a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	0159      	lsls	r1, r3, #5
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	440b      	add	r3, r1
 8004728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004732:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004734:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004738:	2b03      	cmp	r3, #3
 800473a:	d10f      	bne.n	800475c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	440a      	add	r2, r1
 8004752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004756:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800475a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	@ 0x30
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004788:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <USB_HC_StartXfer+0x7c>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d124      	bne.n	80047e8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <USB_HC_StartXfer+0x50>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	795b      	ldrb	r3, [r3, #5]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	4619      	mov	r1, r3
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa2c 	bl	8004c10 <USB_DoPing>
      return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e111      	b.n	80049e0 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d112      	bne.n	80047e8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047dc:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80047e0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d018      	beq.n	8004822 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	8912      	ldrh	r2, [r2, #8]
 80047f8:	4413      	add	r3, r2
 80047fa:	3b01      	subs	r3, #1
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	8912      	ldrh	r2, [r2, #8]
 8004800:	fbb3 f3f2 	udiv	r3, r3, r2
 8004804:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8004806:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004808:	8b7b      	ldrh	r3, [r7, #26]
 800480a:	429a      	cmp	r2, r3
 800480c:	d90b      	bls.n	8004826 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800480e:	8b7b      	ldrh	r3, [r7, #26]
 8004810:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004812:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	8912      	ldrh	r2, [r2, #8]
 8004818:	fb03 f202 	mul.w	r2, r3, r2
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	e001      	b.n	8004826 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  if (hc->ep_is_in != 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800482e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	8912      	ldrh	r2, [r2, #8]
 8004834:	fb03 f202 	mul.w	r2, r3, r2
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004844:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004846:	04d9      	lsls	r1, r3, #19
 8004848:	4b67      	ldr	r3, [pc, #412]	@ (80049e8 <USB_HC_StartXfer+0x27c>)
 800484a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800484c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	7a9b      	ldrb	r3, [r3, #10]
 8004852:	075b      	lsls	r3, r3, #29
 8004854:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004858:	69f9      	ldr	r1, [r7, #28]
 800485a:	0148      	lsls	r0, r1, #5
 800485c:	6a39      	ldr	r1, [r7, #32]
 800485e:	4401      	add	r1, r0
 8004860:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004864:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004866:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	68d9      	ldr	r1, [r3, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487e:	460a      	mov	r2, r1
 8004880:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	7e7b      	ldrb	r3, [r7, #25]
 80048ca:	075b      	lsls	r3, r3, #29
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	0148      	lsls	r0, r1, #5
 80048d0:	6a39      	ldr	r1, [r7, #32]
 80048d2:	4401      	add	r1, r0
 80048d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a40      	ldr	r2, [pc, #256]	@ (80049ec <USB_HC_StartXfer+0x280>)
 80048ec:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ee:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <USB_HC_StartXfer+0x280>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048f6:	4a3d      	ldr	r2, [pc, #244]	@ (80049ec <USB_HC_StartXfer+0x280>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	78db      	ldrb	r3, [r3, #3]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004902:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <USB_HC_StartXfer+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490a:	4a38      	ldr	r2, [pc, #224]	@ (80049ec <USB_HC_StartXfer+0x280>)
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e005      	b.n	800491c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <USB_HC_StartXfer+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004918:	4a34      	ldr	r2, [pc, #208]	@ (80049ec <USB_HC_StartXfer+0x280>)
 800491a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800491c:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <USB_HC_StartXfer+0x280>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004924:	4a31      	ldr	r2, [pc, #196]	@ (80049ec <USB_HC_StartXfer+0x280>)
 8004926:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	461a      	mov	r2, r3
 8004936:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <USB_HC_StartXfer+0x280>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d14d      	bne.n	80049de <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d149      	bne.n	80049de <USB_HC_StartXfer+0x272>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d045      	beq.n	80049de <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	79db      	ldrb	r3, [r3, #7]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d830      	bhi.n	80049bc <USB_HC_StartXfer+0x250>
 800495a:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <USB_HC_StartXfer+0x1f4>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004971 	.word	0x08004971
 8004964:	08004995 	.word	0x08004995
 8004968:	08004971 	.word	0x08004971
 800496c:	08004995 	.word	0x08004995
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	3303      	adds	r3, #3
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800497a:	8afa      	ldrh	r2, [r7, #22]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	b29b      	uxth	r3, r3
 8004982:	429a      	cmp	r2, r3
 8004984:	d91c      	bls.n	80049c0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]
          }
          break;
 8004992:	e015      	b.n	80049c0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	3303      	adds	r3, #3
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800499e:	8afa      	ldrh	r2, [r7, #22]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90a      	bls.n	80049c4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	619a      	str	r2, [r3, #24]
          }
          break;
 80049ba:	e003      	b.n	80049c4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <USB_HC_StartXfer+0x25a>
          break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <USB_HC_StartXfer+0x25a>
          break;
 80049c4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	785a      	ldrb	r2, [r3, #1]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2000      	movs	r0, #0
 80049d6:	9000      	str	r0, [sp, #0]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff fb87 	bl	80040ec <USB_WritePacket>
    }
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3728      	adds	r7, #40	@ 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	1ff80000 	.word	0x1ff80000
 80049ec:	2000009c 	.word	0x2000009c

080049f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	b29b      	uxth	r3, r3
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0c9b      	lsrs	r3, r3, #18
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <USB_HC_Halt+0x3a>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d16c      	bne.n	8004b26 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a6a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d143      	bne.n	8004b00 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ab6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ad2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ad6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3301      	adds	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae4:	d81d      	bhi.n	8004b22 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004afc:	d0ec      	beq.n	8004ad8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004afe:	e080      	b.n	8004c02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b1e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b20:	e06f      	b.n	8004c02 <USB_HC_Halt+0x1f0>
          break;
 8004b22:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b24:	e06d      	b.n	8004c02 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d143      	bne.n	8004bde <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bb4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bc2:	d81d      	bhi.n	8004c00 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bda:	d0ec      	beq.n	8004bb6 <USB_HC_Halt+0x1a4>
 8004bdc:	e011      	b.n	8004c02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e000      	b.n	8004c02 <USB_HC_Halt+0x1f0>
          break;
 8004c00:	bf00      	nop
    }
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004c24:	2301      	movs	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	04da      	lsls	r2, r3, #19
 8004c2c:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <USB_DoPing+0x74>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	1ff80000 	.word	0x1ff80000

08004c88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff f9a3 	bl	8003fe4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff f9db 	bl	800405c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff f9fe 	bl	80040a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e01f      	b.n	8004cf2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cd0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cd8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d9dc      	bls.n	8004cb2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e034      	b.n	8004d68 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d44:	d80c      	bhi.n	8004d60 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d5c:	d0ec      	beq.n	8004d38 <USB_StopHost+0xb0>
 8004d5e:	e000      	b.n	8004d62 <USB_StopHost+0xda>
        break;
 8004d60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3301      	adds	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d9c7      	bls.n	8004cfe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d74:	461a      	mov	r2, r3
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff f91c 	bl	8003fc2 <USB_EnableGlobalInt>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b089      	sub	sp, #36	@ 0x24
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8004da4:	23ff      	movs	r3, #255	@ 0xff
 8004da6:	2203      	movs	r2, #3
 8004da8:	2101      	movs	r1, #1
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb97 	bl	80054de <USBH_FindInterface>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8004db4:	7bbb      	ldrb	r3, [r7, #14]
 8004db6:	2bff      	cmp	r3, #255	@ 0xff
 8004db8:	d102      	bne.n	8004dc0 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	e0fc      	b.n	8004fba <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb6e 	bl	80054a6 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8004dd0:	201c      	movs	r0, #28
 8004dd2:	f002 f963 	bl	800709c <malloc>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0e6      	b.n	8004fbc <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 8004dee:	221c      	movs	r2, #28
 8004df0:	2100      	movs	r1, #0
 8004df2:	68b8      	ldr	r0, [r7, #8]
 8004df4:	f002 fa30 	bl	8007258 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004dfe:	4619      	mov	r1, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	231a      	movs	r3, #26
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da1c      	bge.n	8004e50 <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	231a      	movs	r3, #26
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	4413      	add	r3, r2
 8004e28:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004e38:	4619      	mov	r1, r3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	231a      	movs	r3, #26
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	811a      	strh	r2, [r3, #8]
 8004e4e:	e01b      	b.n	8004e88 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004e56:	4619      	mov	r1, r3
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	231a      	movs	r3, #26
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004e72:	4619      	mov	r1, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	231a      	movs	r3, #26
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004e8e:	4619      	mov	r1, r3
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	231a      	movs	r3, #26
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da1c      	bge.n	8004ee0 <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004eac:	4619      	mov	r1, r3
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	231a      	movs	r3, #26
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004ec8:	4619      	mov	r1, r3
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	231a      	movs	r3, #26
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	811a      	strh	r2, [r3, #8]
 8004ede:	e01b      	b.n	8004f18 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	231a      	movs	r3, #26
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8004f02:	4619      	mov	r1, r3
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	231a      	movs	r3, #26
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004f12:	881a      	ldrh	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	78db      	ldrb	r3, [r3, #3]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fcf3 	bl	800690a <USBH_AllocPipe>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	791b      	ldrb	r3, [r3, #4]
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fce9 	bl	800690a <USBH_AllocPipe>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	7899      	ldrb	r1, [r3, #2]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	78d8      	ldrb	r0, [r3, #3]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	88d2      	ldrh	r2, [r2, #6]
 8004f58:	9202      	str	r2, [sp, #8]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	9201      	str	r2, [sp, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4623      	mov	r3, r4
 8004f62:	4602      	mov	r2, r0
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 fca1 	bl	80068ac <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	7859      	ldrb	r1, [r3, #1]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	7918      	ldrb	r0, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	8912      	ldrh	r2, [r2, #8]
 8004f82:	9202      	str	r2, [sp, #8]
 8004f84:	2202      	movs	r2, #2
 8004f86:	9201      	str	r2, [sp, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fc8c 	bl	80068ac <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fff4 	bl	8006f90 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	789b      	ldrb	r3, [r3, #2]
 8004fac:	2200      	movs	r2, #0
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 ffed 	bl	8006f90 <USBH_LL_SetToggle>
		status = USBH_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}

08004fc4 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00e      	beq.n	8004ffc <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	789b      	ldrb	r3, [r3, #2]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 fc80 	bl	80068ea <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	789b      	ldrb	r3, [r3, #2]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fcab 	bl	800694c <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fc6d 	bl	80068ea <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fc98 	bl	800694c <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f838 	bl	80070ac <free>
		phost->pActiveClass->pData = 0;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800505e:	2102      	movs	r1, #2
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3

	return USBH_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b0b      	cmp	r3, #11
 8005088:	d10e      	bne.n	80050a8 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 fc27 	bl	80068ea <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	789b      	ldrb	r3, [r3, #2]
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fc21 	bl	80068ea <USBH_ClosePipe>
  }
  return USBH_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d010      	beq.n	80050f6 <USBH_MIDI_Process+0x44>
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	dc1b      	bgt.n	8005110 <USBH_MIDI_Process+0x5e>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <USBH_MIDI_Process+0x30>
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d003      	beq.n	80050e8 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80050e0:	e016      	b.n	8005110 <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
		break;
 80050e6:	e016      	b.n	8005116 <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f84f 	bl	800518c <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8bd 	bl	800526e <MIDI_ProcessReception>
		break;
 80050f4:	e00f      	b.n	8005116 <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 80050f6:	2100      	movs	r1, #0
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 ffac 	bl	8006056 <USBH_ClrFeature>
 80050fe:	4603      	mov	r3, r0
 8005100:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
		break;
 800510e:	e001      	b.n	8005114 <USBH_MIDI_Process+0x62>
		break;
 8005110:	bf00      	nop
 8005112:	e000      	b.n	8005116 <USBH_MIDI_Process+0x64>
		break;
 8005114:	bf00      	nop

	}

	return status;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <USBH_MIDI_Receive+0x2c>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d10d      	bne.n	800517e <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2203      	movs	r2, #3
 8005178:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	7e1b      	ldrb	r3, [r3, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <MIDI_ProcessTransmission+0x24>
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d021      	beq.n	80051f2 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80051ae:	e05a      	b.n	8005266 <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8a9a      	ldrh	r2, [r3, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88db      	ldrh	r3, [r3, #6]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d90b      	bls.n	80051d4 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88da      	ldrh	r2, [r3, #6]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	789b      	ldrb	r3, [r3, #2]
 80051c8:	2001      	movs	r0, #1
 80051ca:	9000      	str	r0, [sp, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fb2a 	bl	8006826 <USBH_BulkSendData>
 80051d2:	e00a      	b.n	80051ea <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68d9      	ldr	r1, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8a9a      	ldrh	r2, [r3, #20]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	2001      	movs	r0, #1
 80051e2:	9000      	str	r0, [sp, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fb1e 	bl	8006826 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2202      	movs	r2, #2
 80051ee:	761a      	strb	r2, [r3, #24]
		break;
 80051f0:	e039      	b.n	8005266 <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fe9f 	bl	8006f3c <USBH_LL_GetURBState>
 80051fe:	4603      	mov	r3, r0
 8005200:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d127      	bne.n	8005258 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8a9a      	ldrh	r2, [r3, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88db      	ldrh	r3, [r3, #6]
 8005210:	429a      	cmp	r2, r3
 8005212:	d90f      	bls.n	8005234 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8a9a      	ldrh	r2, [r3, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88db      	ldrh	r3, [r3, #6]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	88d2      	ldrh	r2, [r2, #6]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	e002      	b.n	800523a <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8a9b      	ldrh	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	761a      	strb	r2, [r3, #24]
		break;
 8005248:	e00c      	b.n	8005264 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f866 	bl	8005322 <USBH_MIDI_TransmitCallback>
		break;
 8005256:	e005      	b.n	8005264 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d102      	bne.n	8005264 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	761a      	strb	r2, [r3, #24]
		break;
 8005264:	bf00      	nop
	}
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005280:	2300      	movs	r3, #0
 8005282:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	7e5b      	ldrb	r3, [r3, #25]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d002      	beq.n	8005292 <MIDI_ProcessReception+0x24>
 800528c:	2b04      	cmp	r3, #4
 800528e:	d00d      	beq.n	80052ac <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8005290:	e043      	b.n	800531a <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6919      	ldr	r1, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	891a      	ldrh	r2, [r3, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f001 fae6 	bl	8006870 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2204      	movs	r2, #4
 80052a8:	765a      	strb	r2, [r3, #25]
		break;
 80052aa:	e036      	b.n	800531a <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fe42 	bl	8006f3c <USBH_LL_GetURBState>
 80052b8:	4603      	mov	r3, r0
 80052ba:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d12a      	bne.n	8005318 <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 fda5 	bl	8006e18 <USBH_LL_GetLastXferSize>
 80052ce:	4603      	mov	r3, r0
 80052d0:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8adb      	ldrh	r3, [r3, #22]
 80052d6:	461a      	mov	r2, r3
 80052d8:	893b      	ldrh	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	dd15      	ble.n	800530c <MIDI_ProcessReception+0x9e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	891b      	ldrh	r3, [r3, #8]
 80052e4:	893a      	ldrh	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d910      	bls.n	800530c <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8ada      	ldrh	r2, [r3, #22]
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2203      	movs	r2, #3
 8005308:	765a      	strb	r2, [r3, #25]
		break;
 800530a:	e005      	b.n	8005318 <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 fb7c 	bl	8006a10 <USBH_MIDI_ReceiveCallback>
		break;
 8005318:	bf00      	nop
	}
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800534a:	2302      	movs	r3, #2
 800534c:	e029      	b.n	80053a2 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	79fa      	ldrb	r2, [r7, #7]
 8005352:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f81f 	bl	80053aa <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f001 fc88 	bl	8006cb0 <USBH_LL_Init>

  return USBH_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e009      	b.n	80053d0 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	33e0      	adds	r3, #224	@ 0xe0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b0e      	cmp	r3, #14
 80053d4:	d9f2      	bls.n	80053bc <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e009      	b.n	80053f0 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	d3f1      	bcc.n	80053dc <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2240      	movs	r2, #64	@ 0x40
 800541c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10e      	bne.n	800548e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	33de      	adds	r3, #222	@ 0xde
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e004      	b.n	8005498 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800548e:	2302      	movs	r3, #2
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	e001      	b.n	8005498 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005494:	2302      	movs	r3, #2
 8005496:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d204      	bcs.n	80054cc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80054ca:	e001      	b.n	80054d0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80054cc:	2302      	movs	r3, #2
 80054ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80054de:	b480      	push	{r7}
 80054e0:	b087      	sub	sp, #28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	4608      	mov	r0, r1
 80054e8:	4611      	mov	r1, r2
 80054ea:	461a      	mov	r2, r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	70fb      	strb	r3, [r7, #3]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70bb      	strb	r3, [r7, #2]
 80054f4:	4613      	mov	r3, r2
 80054f6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005506:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005508:	e025      	b.n	8005556 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	221a      	movs	r2, #26
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	3308      	adds	r3, #8
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	3302      	adds	r3, #2
 800551a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	795b      	ldrb	r3, [r3, #5]
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	429a      	cmp	r2, r3
 8005524:	d002      	beq.n	800552c <USBH_FindInterface+0x4e>
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2bff      	cmp	r3, #255	@ 0xff
 800552a:	d111      	bne.n	8005550 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005530:	78ba      	ldrb	r2, [r7, #2]
 8005532:	429a      	cmp	r2, r3
 8005534:	d002      	beq.n	800553c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005536:	78bb      	ldrb	r3, [r7, #2]
 8005538:	2bff      	cmp	r3, #255	@ 0xff
 800553a:	d109      	bne.n	8005550 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005540:	787a      	ldrb	r2, [r7, #1]
 8005542:	429a      	cmp	r2, r3
 8005544:	d002      	beq.n	800554c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005546:	787b      	ldrb	r3, [r7, #1]
 8005548:	2bff      	cmp	r3, #255	@ 0xff
 800554a:	d101      	bne.n	8005550 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	e006      	b.n	800555e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	3301      	adds	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d9d6      	bls.n	800550a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800555c:	23ff      	movs	r3, #255	@ 0xff
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 fbd8 	bl	8006d28 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005578:	2101      	movs	r1, #1
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fcf1 	bl	8006f62 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af04      	add	r7, sp, #16
 8005592:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005594:	2302      	movs	r3, #2
 8005596:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d102      	bne.n	80055ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2203      	movs	r2, #3
 80055ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b0b      	cmp	r3, #11
 80055b6:	f200 81b0 	bhi.w	800591a <USBH_Process+0x38e>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <USBH_Process+0x34>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	08005623 	.word	0x08005623
 80055c8:	0800568b 	.word	0x0800568b
 80055cc:	080058b5 	.word	0x080058b5
 80055d0:	0800591b 	.word	0x0800591b
 80055d4:	0800572b 	.word	0x0800572b
 80055d8:	0800585b 	.word	0x0800585b
 80055dc:	08005761 	.word	0x08005761
 80055e0:	08005781 	.word	0x08005781
 80055e4:	0800579f 	.word	0x0800579f
 80055e8:	080057cd 	.word	0x080057cd
 80055ec:	0800589d 	.word	0x0800589d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8190 	beq.w	800591e <USBH_Process+0x392>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005604:	20c8      	movs	r0, #200	@ 0xc8
 8005606:	f001 fcf6 	bl	8006ff6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fbe9 	bl	8006de2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005620:	e17d      	b.n	800591e <USBH_Process+0x392>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8005628:	2b01      	cmp	r3, #1
 800562a:	d107      	bne.n	800563c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800563a:	e17f      	b.n	800593c <USBH_Process+0x3b0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005646:	d914      	bls.n	8005672 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800564e:	3301      	adds	r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800565e:	2b03      	cmp	r3, #3
 8005660:	d903      	bls.n	800566a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	220d      	movs	r2, #13
 8005666:	701a      	strb	r2, [r3, #0]
      break;
 8005668:	e168      	b.n	800593c <USBH_Process+0x3b0>
            phost->gState = HOST_IDLE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
      break;
 8005670:	e164      	b.n	800593c <USBH_Process+0x3b0>
          phost->Timeout += 10U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005678:	f103 020a 	add.w	r2, r3, #10
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8005682:	200a      	movs	r0, #10
 8005684:	f001 fcb7 	bl	8006ff6 <USBH_Delay>
      break;
 8005688:	e158      	b.n	800593c <USBH_Process+0x3b0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800569a:	2104      	movs	r1, #4
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80056a0:	2064      	movs	r0, #100	@ 0x64
 80056a2:	f001 fca8 	bl	8006ff6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fb74 	bl	8006d94 <USBH_LL_GetSpeed>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2205      	movs	r2, #5
 80056ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80056bc:	2100      	movs	r1, #0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 f923 	bl	800690a <USBH_AllocPipe>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80056cc:	2180      	movs	r1, #128	@ 0x80
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f91b 	bl	800690a <USBH_AllocPipe>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7919      	ldrb	r1, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80056f0:	9202      	str	r2, [sp, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	9201      	str	r2, [sp, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4603      	mov	r3, r0
 80056fa:	2280      	movs	r2, #128	@ 0x80
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 f8d5 	bl	80068ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7959      	ldrb	r1, [r3, #5]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005716:	9202      	str	r2, [sp, #8]
 8005718:	2200      	movs	r2, #0
 800571a:	9201      	str	r2, [sp, #4]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4603      	mov	r3, r0
 8005720:	2200      	movs	r2, #0
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 f8c2 	bl	80068ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005728:	e108      	b.n	800593c <USBH_Process+0x3b0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f90c 	bl	8005948 <USBH_HandleEnum>
 8005730:	4603      	mov	r3, r0
 8005732:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 80f2 	bne.w	8005922 <USBH_Process+0x396>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800574c:	2b01      	cmp	r3, #1
 800574e:	d103      	bne.n	8005758 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2208      	movs	r2, #8
 8005754:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005756:	e0e4      	b.n	8005922 <USBH_Process+0x396>
          phost->gState = HOST_INPUT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2207      	movs	r2, #7
 800575c:	701a      	strb	r2, [r3, #0]
      break;
 800575e:	e0e0      	b.n	8005922 <USBH_Process+0x396>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80dd 	beq.w	8005926 <USBH_Process+0x39a>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005772:	2101      	movs	r1, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2208      	movs	r2, #8
 800577c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800577e:	e0d2      	b.n	8005926 <USBH_Process+0x39a>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fc1d 	bl	8005fc8 <USBH_SetCfg>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 80ca 	bne.w	800592a <USBH_Process+0x39e>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2209      	movs	r2, #9
 800579a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800579c:	e0c5      	b.n	800592a <USBH_Process+0x39e>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBH_Process+0x238>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80057ac:	2101      	movs	r1, #1
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fc2d 	bl	800600e <USBH_SetFeature>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 80b9 	bne.w	800592e <USBH_Process+0x3a2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	220a      	movs	r2, #10
 80057c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80057c2:	e0b4      	b.n	800592e <USBH_Process+0x3a2>
        phost->gState = HOST_CHECK_CLASS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	220a      	movs	r2, #10
 80057c8:	701a      	strb	r2, [r3, #0]
      break;
 80057ca:	e0b0      	b.n	800592e <USBH_Process+0x3a2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80ad 	beq.w	8005932 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e016      	b.n	8005814 <USBH_Process+0x288>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	32de      	adds	r2, #222	@ 0xde
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	791a      	ldrb	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d108      	bne.n	800580e <USBH_Process+0x282>
          {
            phost->pActiveClass = phost->pClass[idx];
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	32de      	adds	r2, #222	@ 0xde
 8005802:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800580c:	e005      	b.n	800581a <USBH_Process+0x28e>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	3301      	adds	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0e5      	beq.n	80057e6 <USBH_Process+0x25a>
          }
        }

        if (phost->pActiveClass != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <USBH_Process+0x2c6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <USBH_Process+0x2be>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2206      	movs	r2, #6
 800583a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005842:	2103      	movs	r1, #3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005848:	e073      	b.n	8005932 <USBH_Process+0x3a6>
            phost->gState = HOST_ABORT_STATE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	220d      	movs	r2, #13
 800584e:	701a      	strb	r2, [r3, #0]
      break;
 8005850:	e06f      	b.n	8005932 <USBH_Process+0x3a6>
          phost->gState = HOST_ABORT_STATE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	220d      	movs	r2, #13
 8005856:	701a      	strb	r2, [r3, #0]
      break;
 8005858:	e06b      	b.n	8005932 <USBH_Process+0x3a6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <USBH_Process+0x308>
      {
        status = phost->pActiveClass->Requests(phost);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3
 8005870:	4603      	mov	r3, r0
 8005872:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <USBH_Process+0x2f8>
        {
          phost->gState = HOST_CLASS;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	220b      	movs	r2, #11
 8005880:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005882:	e058      	b.n	8005936 <USBH_Process+0x3aa>
        else if (status == USBH_FAIL)
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d154      	bne.n	8005936 <USBH_Process+0x3aa>
          phost->gState = HOST_ABORT_STATE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	220d      	movs	r2, #13
 8005890:	701a      	strb	r2, [r3, #0]
      break;
 8005892:	e050      	b.n	8005936 <USBH_Process+0x3aa>
        phost->gState = HOST_ABORT_STATE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	220d      	movs	r2, #13
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e04c      	b.n	8005936 <USBH_Process+0x3aa>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d049      	beq.n	800593a <USBH_Process+0x3ae>
      {
        phost->pActiveClass->BgndProcess(phost);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
      }
      break;
 80058b2:	e042      	b.n	800593a <USBH_Process+0x3ae>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      DeInitStateMachine(phost);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fd74 	bl	80053aa <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <USBH_Process+0x354>
      {
        phost->pActiveClass->DeInit(phost);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <USBH_Process+0x36a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058f0:	2105      	movs	r1, #5
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <USBH_Process+0x386>
      {
        phost->device.is_ReEnumerated = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fe2d 	bl	800556a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005910:	e014      	b.n	800593c <USBH_Process+0x3b0>
        USBH_LL_Start(phost);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fa08 	bl	8006d28 <USBH_LL_Start>
      break;
 8005918:	e010      	b.n	800593c <USBH_Process+0x3b0>

    case HOST_ABORT_STATE:
    default :
      break;
 800591a:	bf00      	nop
 800591c:	e00e      	b.n	800593c <USBH_Process+0x3b0>
      break;
 800591e:	bf00      	nop
 8005920:	e00c      	b.n	800593c <USBH_Process+0x3b0>
      break;
 8005922:	bf00      	nop
 8005924:	e00a      	b.n	800593c <USBH_Process+0x3b0>
    break;
 8005926:	bf00      	nop
 8005928:	e008      	b.n	800593c <USBH_Process+0x3b0>
      break;
 800592a:	bf00      	nop
 800592c:	e006      	b.n	800593c <USBH_Process+0x3b0>
      break;
 800592e:	bf00      	nop
 8005930:	e004      	b.n	800593c <USBH_Process+0x3b0>
      break;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <USBH_Process+0x3b0>
      break;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <USBH_Process+0x3b0>
      break;
 800593a:	bf00      	nop
  }
  return USBH_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop

08005948 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af04      	add	r7, sp, #16
 800594e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005954:	2301      	movs	r3, #1
 8005956:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b07      	cmp	r3, #7
 800595e:	f200 81bd 	bhi.w	8005cdc <USBH_HandleEnum+0x394>
 8005962:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <USBH_HandleEnum+0x20>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	08005989 	.word	0x08005989
 800596c:	08005a43 	.word	0x08005a43
 8005970:	08005aad 	.word	0x08005aad
 8005974:	08005b37 	.word	0x08005b37
 8005978:	08005ba1 	.word	0x08005ba1
 800597c:	08005c11 	.word	0x08005c11
 8005980:	08005c57 	.word	0x08005c57
 8005984:	08005c9d 	.word	0x08005c9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005988:	2108      	movs	r1, #8
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa4c 	bl	8005e28 <USBH_Get_DevDesc>
 8005990:	4603      	mov	r3, r0
 8005992:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d12e      	bne.n	80059f8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7919      	ldrb	r1, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80059be:	9202      	str	r2, [sp, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	9201      	str	r2, [sp, #4]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	4603      	mov	r3, r0
 80059c8:	2280      	movs	r2, #128	@ 0x80
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 ff6e 	bl	80068ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7959      	ldrb	r1, [r3, #5]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80059e4:	9202      	str	r2, [sp, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	9201      	str	r2, [sp, #4]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	2200      	movs	r2, #0
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 ff5b 	bl	80068ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80059f6:	e173      	b.n	8005ce0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	f040 8170 	bne.w	8005ce0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005a06:	3301      	adds	r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d903      	bls.n	8005a22 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	220d      	movs	r2, #13
 8005a1e:	701a      	strb	r2, [r3, #0]
      break;
 8005a20:	e15e      	b.n	8005ce0 <USBH_HandleEnum+0x398>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	795b      	ldrb	r3, [r3, #5]
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 ff8f 	bl	800694c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 ff89 	bl	800694c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
      break;
 8005a40:	e14e      	b.n	8005ce0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005a42:	2112      	movs	r1, #18
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f9ef 	bl	8005e28 <USBH_Get_DevDesc>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005a5a:	e143      	b.n	8005ce4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	f040 8140 	bne.w	8005ce4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d903      	bls.n	8005a86 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	220d      	movs	r2, #13
 8005a82:	701a      	strb	r2, [r3, #0]
      break;
 8005a84:	e12e      	b.n	8005ce4 <USBH_HandleEnum+0x39c>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	795b      	ldrb	r3, [r3, #5]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 ff5d 	bl	800694c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	791b      	ldrb	r3, [r3, #4]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 ff57 	bl	800694c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	e11b      	b.n	8005ce4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005aac:	2101      	movs	r1, #1
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa66 	bl	8005f80 <USBH_SetAddress>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d130      	bne.n	8005b20 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8005abe:	2002      	movs	r0, #2
 8005ac0:	f001 fa99 	bl	8006ff6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7919      	ldrb	r1, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005ae6:	9202      	str	r2, [sp, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9201      	str	r2, [sp, #4]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	4603      	mov	r3, r0
 8005af0:	2280      	movs	r2, #128	@ 0x80
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 feda 	bl	80068ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7959      	ldrb	r1, [r3, #5]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4603      	mov	r3, r0
 8005b16:	2200      	movs	r2, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fec7 	bl	80068ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005b1e:	e0e3      	b.n	8005ce8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f040 80e0 	bne.w	8005ce8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	220d      	movs	r2, #13
 8005b2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	705a      	strb	r2, [r3, #1]
      break;
 8005b34:	e0d8      	b.n	8005ce8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005b36:	2109      	movs	r1, #9
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f99d 	bl	8005e78 <USBH_Get_CfgDesc>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005b4e:	e0cd      	b.n	8005cec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	f040 80ca 	bne.w	8005cec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d903      	bls.n	8005b7a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	220d      	movs	r2, #13
 8005b76:	701a      	strb	r2, [r3, #0]
      break;
 8005b78:	e0b8      	b.n	8005cec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	795b      	ldrb	r3, [r3, #5]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fee3 	bl	800694c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fedd 	bl	800694c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
      break;
 8005b9e:	e0a5      	b.n	8005cec <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f965 	bl	8005e78 <USBH_Get_CfgDesc>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d103      	bne.n	8005bc0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2205      	movs	r2, #5
 8005bbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005bbe:	e097      	b.n	8005cf0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	f040 8094 	bne.w	8005cf0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005bce:	3301      	adds	r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d903      	bls.n	8005bea <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	220d      	movs	r2, #13
 8005be6:	701a      	strb	r2, [r3, #0]
      break;
 8005be8:	e082      	b.n	8005cf0 <USBH_HandleEnum+0x3a8>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	795b      	ldrb	r3, [r3, #5]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 feab 	bl	800694c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fea5 	bl	800694c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e06f      	b.n	8005cf0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d019      	beq.n	8005c4e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005c26:	23ff      	movs	r3, #255	@ 0xff
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f949 	bl	8005ec0 <USBH_Get_StringDesc>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2206      	movs	r2, #6
 8005c3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005c3e:	e059      	b.n	8005cf4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d156      	bne.n	8005cf4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2206      	movs	r2, #6
 8005c4a:	705a      	strb	r2, [r3, #1]
      break;
 8005c4c:	e052      	b.n	8005cf4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2206      	movs	r2, #6
 8005c52:	705a      	strb	r2, [r3, #1]
      break;
 8005c54:	e04e      	b.n	8005cf4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d019      	beq.n	8005c94 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005c6c:	23ff      	movs	r3, #255	@ 0xff
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f926 	bl	8005ec0 <USBH_Get_StringDesc>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2207      	movs	r2, #7
 8005c82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005c84:	e038      	b.n	8005cf8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d135      	bne.n	8005cf8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2207      	movs	r2, #7
 8005c90:	705a      	strb	r2, [r3, #1]
      break;
 8005c92:	e031      	b.n	8005cf8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2207      	movs	r2, #7
 8005c98:	705a      	strb	r2, [r3, #1]
      break;
 8005c9a:	e02d      	b.n	8005cf8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d017      	beq.n	8005cd6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005cb2:	23ff      	movs	r3, #255	@ 0xff
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f903 	bl	8005ec0 <USBH_Get_StringDesc>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005cc8:	e018      	b.n	8005cfc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d115      	bne.n	8005cfc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd4:	e012      	b.n	8005cfc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cda:	e00f      	b.n	8005cfc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8005cdc:	bf00      	nop
 8005cde:	e00e      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005ce0:	bf00      	nop
 8005ce2:	e00c      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005ce4:	bf00      	nop
 8005ce6:	e00a      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005ce8:	bf00      	nop
 8005cea:	e008      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005cec:	bf00      	nop
 8005cee:	e006      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005cf0:	bf00      	nop
 8005cf2:	e004      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <USBH_HandleEnum+0x3b6>
      break;
 8005cfc:	bf00      	nop
  }
  return Status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f804 	bl	8005d4a <USBH_HandleSof>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b0b      	cmp	r3, #11
 8005d5a:	d10a      	bne.n	8005d72 <USBH_HandleSof+0x28>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
  }
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005d8a:	bf00      	nop
}
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005da6:	bf00      	nop
}
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 ffac 	bl	8006d5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	791b      	ldrb	r3, [r3, #4]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fd9d 	bl	800694c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	795b      	ldrb	r3, [r3, #5]
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd97 	bl	800694c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e46:	2100      	movs	r1, #0
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f864 	bl	8005f16 <USBH_GetDescriptor>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f203 3026 	addw	r0, r3, #806	@ 0x326
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	b292      	uxth	r2, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f000 f918 	bl	800609e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	331c      	adds	r3, #28
 8005e88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005e8a:	887b      	ldrh	r3, [r7, #2]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e94:	2100      	movs	r1, #0
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f83d 	bl	8005f16 <USBH_GetDescriptor>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	72fb      	strb	r3, [r7, #11]
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005eac:	887a      	ldrh	r2, [r7, #2]
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f960 	bl	8006176 <USBH_ParseCfgDesc>
  }

  return status;
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	460b      	mov	r3, r1
 8005ece:	72fb      	strb	r3, [r7, #11]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005edc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	2100      	movs	r1, #0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f812 	bl	8005f16 <USBH_GetDescriptor>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d107      	bne.n	8005f0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005f02:	893a      	ldrh	r2, [r7, #8]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fa31 	bl	800636e <USBH_ParseStringDesc>
  }

  return status;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	72fb      	strb	r3, [r7, #11]
 8005f24:	4613      	mov	r3, r2
 8005f26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d11c      	bne.n	8005f6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2206      	movs	r2, #6
 8005f40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	893a      	ldrh	r2, [r7, #8]
 8005f46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005f48:	893b      	ldrh	r3, [r7, #8]
 8005f4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f52:	d104      	bne.n	8005f5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f240 4209 	movw	r2, #1033	@ 0x409
 8005f5a:	829a      	strh	r2, [r3, #20]
 8005f5c:	e002      	b.n	8005f64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8b3a      	ldrh	r2, [r7, #24]
 8005f68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005f6a:	8b3b      	ldrh	r3, [r7, #24]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fa49 	bl	8006408 <USBH_CtlReq>
 8005f76:	4603      	mov	r3, r0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	789b      	ldrb	r3, [r3, #2]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10f      	bne.n	8005fb4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa25 	bl	8006408 <USBH_CtlReq>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	789b      	ldrb	r3, [r3, #2]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10e      	bne.n	8005ffa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2209      	movs	r2, #9
 8005fe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa02 	bl	8006408 <USBH_CtlReq>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	789b      	ldrb	r3, [r3, #2]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10f      	bne.n	8006042 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2203      	movs	r2, #3
 800602c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9de 	bl	8006408 <USBH_CtlReq>
 800604c:	4603      	mov	r3, r0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	789b      	ldrb	r3, [r3, #2]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10f      	bne.n	800608a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	b29a      	uxth	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9ba 	bl	8006408 <USBH_CtlReq>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	4613      	mov	r3, r2
 80060aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785a      	ldrb	r2, [r3, #1]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3302      	adds	r3, #2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3303      	adds	r3, #3
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	791a      	ldrb	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	795a      	ldrb	r2, [r3, #5]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	799a      	ldrb	r2, [r3, #6]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	79da      	ldrb	r2, [r3, #7]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d936      	bls.n	800616a <USBH_ParseDevDesc+0xcc>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	3308      	adds	r3, #8
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	3309      	adds	r3, #9
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	b29b      	uxth	r3, r3
 800610e:	4313      	orrs	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	330a      	adds	r3, #10
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	330b      	adds	r3, #11
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	330c      	adds	r3, #12
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	330d      	adds	r3, #13
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	7b9a      	ldrb	r2, [r3, #14]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	7bda      	ldrb	r2, [r3, #15]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	7c1a      	ldrb	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	7c5a      	ldrb	r2, [r3, #17]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	745a      	strb	r2, [r3, #17]
  }
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b08a      	sub	sp, #40	@ 0x28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t                      ep_ix = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	785a      	ldrb	r2, [r3, #1]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3302      	adds	r3, #2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	3303      	adds	r3, #3
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	791a      	ldrb	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	795a      	ldrb	r2, [r3, #5]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	799a      	ldrb	r2, [r3, #6]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	79da      	ldrb	r2, [r3, #7]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	7a1a      	ldrb	r2, [r3, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b09      	cmp	r3, #9
 80061ee:	d95f      	bls.n	80062b0 <USBH_ParseCfgDesc+0x13a>
  {
    ptr = USB_LEN_CFG_DESC;
 80061f0:	2309      	movs	r3, #9
 80061f2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80061f8:	e051      	b.n	800629e <USBH_ParseCfgDesc+0x128>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80061fa:	f107 0316 	add.w	r3, r7, #22
 80061fe:	4619      	mov	r1, r3
 8006200:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006202:	f000 f8e7 	bl	80063d4 <USBH_GetNextDesc>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d146      	bne.n	800629e <USBH_ParseCfgDesc+0x128>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006214:	221a      	movs	r2, #26
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	3308      	adds	r3, #8
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	3302      	adds	r3, #2
 8006222:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006226:	69f8      	ldr	r0, [r7, #28]
 8006228:	f000 f846 	bl	80062b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006236:	e022      	b.n	800627e <USBH_ParseCfgDesc+0x108>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006238:	f107 0316 	add.w	r3, r7, #22
 800623c:	4619      	mov	r1, r3
 800623e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006240:	f000 f8c8 	bl	80063d4 <USBH_GetNextDesc>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b05      	cmp	r3, #5
 800624c:	d117      	bne.n	800627e <USBH_ParseCfgDesc+0x108>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800624e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006252:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006256:	3201      	adds	r2, #1
 8006258:	00d2      	lsls	r2, r2, #3
 800625a:	211a      	movs	r1, #26
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3308      	adds	r3, #8
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	3304      	adds	r3, #4
 800626a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800626c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800626e:	69b8      	ldr	r0, [r7, #24]
 8006270:	f000 f851 	bl	8006316 <USBH_ParseEPDesc>
            ep_ix++;
 8006274:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006278:	3301      	adds	r3, #1
 800627a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	791b      	ldrb	r3, [r3, #4]
 8006282:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006286:	429a      	cmp	r2, r3
 8006288:	d204      	bcs.n	8006294 <USBH_ParseCfgDesc+0x11e>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	885a      	ldrh	r2, [r3, #2]
 800628e:	8afb      	ldrh	r3, [r7, #22]
 8006290:	429a      	cmp	r2, r3
 8006292:	d8d1      	bhi.n	8006238 <USBH_ParseCfgDesc+0xc2>
          }
        }
        if_ix++;
 8006294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006298:	3301      	adds	r3, #1
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800629e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d804      	bhi.n	80062b0 <USBH_ParseCfgDesc+0x13a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	885a      	ldrh	r2, [r3, #2]
 80062aa:	8afb      	ldrh	r3, [r7, #22]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d8a4      	bhi.n	80061fa <USBH_ParseCfgDesc+0x84>
      }
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	3728      	adds	r7, #40	@ 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	785a      	ldrb	r2, [r3, #1]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	789a      	ldrb	r2, [r3, #2]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	78da      	ldrb	r2, [r3, #3]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	791a      	ldrb	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	795a      	ldrb	r2, [r3, #5]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	799a      	ldrb	r2, [r3, #6]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	79da      	ldrb	r2, [r3, #7]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	7a1a      	ldrb	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	721a      	strb	r2, [r3, #8]
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	785a      	ldrb	r2, [r3, #1]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	789a      	ldrb	r2, [r3, #2]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	78da      	ldrb	r2, [r3, #3]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	3304      	adds	r3, #4
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3305      	adds	r3, #5
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	4313      	orrs	r3, r2
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	799a      	ldrb	r2, [r3, #6]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	719a      	strb	r2, [r3, #6]
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	4613      	mov	r3, r2
 800637a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d120      	bne.n	80063c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	1e9a      	subs	r2, r3, #2
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	4293      	cmp	r3, r2
 8006390:	bf28      	it	cs
 8006392:	4613      	movcs	r3, r2
 8006394:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3302      	adds	r3, #2
 800639a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800639c:	2300      	movs	r3, #0
 800639e:	82fb      	strh	r3, [r7, #22]
 80063a0:	e00b      	b.n	80063ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80063a2:	8afb      	ldrh	r3, [r7, #22]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80063b4:	8afb      	ldrh	r3, [r7, #22]
 80063b6:	3302      	adds	r3, #2
 80063b8:	82fb      	strh	r3, [r7, #22]
 80063ba:	8afa      	ldrh	r2, [r7, #22]
 80063bc:	8abb      	ldrh	r3, [r7, #20]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d3ef      	bcc.n	80063a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
  }
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	4413      	add	r3, r2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	789b      	ldrb	r3, [r3, #2]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d002      	beq.n	8006428 <USBH_CtlReq+0x20>
 8006422:	2b02      	cmp	r3, #2
 8006424:	d00f      	beq.n	8006446 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006426:	e027      	b.n	8006478 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
      break;
 8006444:	e018      	b.n	8006478 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f81c 	bl	8006484 <USBH_HandleControl>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <USBH_CtlReq+0x54>
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d106      	bne.n	800646a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	761a      	strb	r2, [r3, #24]
      break;
 8006468:	e005      	b.n	8006476 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d102      	bne.n	8006476 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	709a      	strb	r2, [r3, #2]
      break;
 8006476:	bf00      	nop
  }
  return status;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af02      	add	r7, sp, #8
 800648a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006490:	2300      	movs	r3, #0
 8006492:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	3b01      	subs	r3, #1
 800649a:	2b0a      	cmp	r3, #10
 800649c:	f200 8156 	bhi.w	800674c <USBH_HandleControl+0x2c8>
 80064a0:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <USBH_HandleControl+0x24>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d5 	.word	0x080064d5
 80064ac:	080064ef 	.word	0x080064ef
 80064b0:	08006559 	.word	0x08006559
 80064b4:	0800657f 	.word	0x0800657f
 80064b8:	080065b7 	.word	0x080065b7
 80064bc:	080065e1 	.word	0x080065e1
 80064c0:	08006633 	.word	0x08006633
 80064c4:	08006655 	.word	0x08006655
 80064c8:	08006691 	.word	0x08006691
 80064cc:	080066b7 	.word	0x080066b7
 80064d0:	080066f5 	.word	0x080066f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f103 0110 	add.w	r1, r3, #16
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	795b      	ldrb	r3, [r3, #5]
 80064de:	461a      	mov	r2, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f943 	bl	800676c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	761a      	strb	r2, [r3, #24]
      break;
 80064ec:	e139      	b.n	8006762 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	795b      	ldrb	r3, [r3, #5]
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fd21 	bl	8006f3c <USBH_LL_GetURBState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d11e      	bne.n	8006542 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7c1b      	ldrb	r3, [r3, #16]
 8006508:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800650c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8adb      	ldrh	r3, [r3, #22]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006516:	7b7b      	ldrb	r3, [r7, #13]
 8006518:	2b80      	cmp	r3, #128	@ 0x80
 800651a:	d103      	bne.n	8006524 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2203      	movs	r2, #3
 8006520:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006522:	e115      	b.n	8006750 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2205      	movs	r2, #5
 8006528:	761a      	strb	r2, [r3, #24]
      break;
 800652a:	e111      	b.n	8006750 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800652c:	7b7b      	ldrb	r3, [r7, #13]
 800652e:	2b80      	cmp	r3, #128	@ 0x80
 8006530:	d103      	bne.n	800653a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2209      	movs	r2, #9
 8006536:	761a      	strb	r2, [r3, #24]
      break;
 8006538:	e10a      	b.n	8006750 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2207      	movs	r2, #7
 800653e:	761a      	strb	r2, [r3, #24]
      break;
 8006540:	e106      	b.n	8006750 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d003      	beq.n	8006550 <USBH_HandleControl+0xcc>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b02      	cmp	r3, #2
 800654c:	f040 8100 	bne.w	8006750 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	220b      	movs	r2, #11
 8006554:	761a      	strb	r2, [r3, #24]
      break;
 8006556:	e0fb      	b.n	8006750 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	899a      	ldrh	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f93a 	bl	80067ea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2204      	movs	r2, #4
 800657a:	761a      	strb	r2, [r3, #24]
      break;
 800657c:	e0f1      	b.n	8006762 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	791b      	ldrb	r3, [r3, #4]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fcd9 	bl	8006f3c <USBH_LL_GetURBState>
 800658a:	4603      	mov	r3, r0
 800658c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d102      	bne.n	800659a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2209      	movs	r2, #9
 8006598:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b05      	cmp	r3, #5
 800659e:	d102      	bne.n	80065a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80065a0:	2303      	movs	r3, #3
 80065a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80065a4:	e0d6      	b.n	8006754 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	f040 80d3 	bne.w	8006754 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	220b      	movs	r2, #11
 80065b2:	761a      	strb	r2, [r3, #24]
      break;
 80065b4:	e0ce      	b.n	8006754 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6899      	ldr	r1, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	899a      	ldrh	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	795b      	ldrb	r3, [r3, #5]
 80065c2:	2001      	movs	r0, #1
 80065c4:	9000      	str	r0, [sp, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8ea 	bl	80067a0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2206      	movs	r2, #6
 80065dc:	761a      	strb	r2, [r3, #24]
      break;
 80065de:	e0c0      	b.n	8006762 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	795b      	ldrb	r3, [r3, #5]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fca8 	bl	8006f3c <USBH_LL_GetURBState>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d103      	bne.n	80065fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2207      	movs	r2, #7
 80065fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80065fc:	e0ac      	b.n	8006758 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b05      	cmp	r3, #5
 8006602:	d105      	bne.n	8006610 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	220c      	movs	r2, #12
 8006608:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800660a:	2303      	movs	r3, #3
 800660c:	73fb      	strb	r3, [r7, #15]
      break;
 800660e:	e0a3      	b.n	8006758 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d103      	bne.n	800661e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2205      	movs	r2, #5
 800661a:	761a      	strb	r2, [r3, #24]
      break;
 800661c:	e09c      	b.n	8006758 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b04      	cmp	r3, #4
 8006622:	f040 8099 	bne.w	8006758 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	220b      	movs	r2, #11
 800662a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800662c:	2302      	movs	r3, #2
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e092      	b.n	8006758 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	2100      	movs	r1, #0
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8d5 	bl	80067ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2208      	movs	r2, #8
 8006650:	761a      	strb	r2, [r3, #24]

      break;
 8006652:	e086      	b.n	8006762 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	791b      	ldrb	r3, [r3, #4]
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fc6e 	bl	8006f3c <USBH_LL_GetURBState>
 8006660:	4603      	mov	r3, r0
 8006662:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d105      	bne.n	8006676 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	220d      	movs	r2, #13
 800666e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006674:	e072      	b.n	800675c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d103      	bne.n	8006684 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	220b      	movs	r2, #11
 8006680:	761a      	strb	r2, [r3, #24]
      break;
 8006682:	e06b      	b.n	800675c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b05      	cmp	r3, #5
 8006688:	d168      	bne.n	800675c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800668a:	2303      	movs	r3, #3
 800668c:	73fb      	strb	r3, [r7, #15]
      break;
 800668e:	e065      	b.n	800675c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	795b      	ldrb	r3, [r3, #5]
 8006694:	2201      	movs	r2, #1
 8006696:	9200      	str	r2, [sp, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	2100      	movs	r1, #0
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f87f 	bl	80067a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	220a      	movs	r2, #10
 80066b2:	761a      	strb	r2, [r3, #24]
      break;
 80066b4:	e055      	b.n	8006762 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	795b      	ldrb	r3, [r3, #5]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc3d 	bl	8006f3c <USBH_LL_GetURBState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d105      	bne.n	80066d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	220d      	movs	r2, #13
 80066d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80066d6:	e043      	b.n	8006760 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d103      	bne.n	80066e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2209      	movs	r2, #9
 80066e2:	761a      	strb	r2, [r3, #24]
      break;
 80066e4:	e03c      	b.n	8006760 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d139      	bne.n	8006760 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	220b      	movs	r2, #11
 80066f0:	761a      	strb	r2, [r3, #24]
      break;
 80066f2:	e035      	b.n	8006760 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7e5b      	ldrb	r3, [r3, #25]
 80066f8:	3301      	adds	r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	765a      	strb	r2, [r3, #25]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7e5b      	ldrb	r3, [r3, #25]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d806      	bhi.n	8006716 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006714:	e025      	b.n	8006762 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800671c:	2106      	movs	r1, #6
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	795b      	ldrb	r3, [r3, #5]
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f90c 	bl	800694c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	791b      	ldrb	r3, [r3, #4]
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f906 	bl	800694c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006746:	2302      	movs	r3, #2
 8006748:	73fb      	strb	r3, [r7, #15]
      break;
 800674a:	e00a      	b.n	8006762 <USBH_HandleControl+0x2de>

    default:
      break;
 800674c:	bf00      	nop
 800674e:	e008      	b.n	8006762 <USBH_HandleControl+0x2de>
      break;
 8006750:	bf00      	nop
 8006752:	e006      	b.n	8006762 <USBH_HandleControl+0x2de>
      break;
 8006754:	bf00      	nop
 8006756:	e004      	b.n	8006762 <USBH_HandleControl+0x2de>
      break;
 8006758:	bf00      	nop
 800675a:	e002      	b.n	8006762 <USBH_HandleControl+0x2de>
      break;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <USBH_HandleControl+0x2de>
      break;
 8006760:	bf00      	nop
  }

  return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af04      	add	r7, sp, #16
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800677a:	79f9      	ldrb	r1, [r7, #7]
 800677c:	2300      	movs	r3, #0
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	2308      	movs	r3, #8
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2300      	movs	r3, #0
 800678e:	2200      	movs	r2, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fba2 	bl	8006eda <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af04      	add	r7, sp, #16
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4611      	mov	r1, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	460b      	mov	r3, r1
 80067b0:	80fb      	strh	r3, [r7, #6]
 80067b2:	4613      	mov	r3, r2
 80067b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80067c4:	7979      	ldrb	r1, [r7, #5]
 80067c6:	7e3b      	ldrb	r3, [r7, #24]
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	9302      	str	r3, [sp, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	2301      	movs	r3, #1
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fb7d 	bl	8006eda <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b088      	sub	sp, #32
 80067ee:	af04      	add	r7, sp, #16
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	4611      	mov	r1, r2
 80067f6:	461a      	mov	r2, r3
 80067f8:	460b      	mov	r3, r1
 80067fa:	80fb      	strh	r3, [r7, #6]
 80067fc:	4613      	mov	r3, r2
 80067fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006800:	7979      	ldrb	r1, [r7, #5]
 8006802:	2300      	movs	r3, #0
 8006804:	9303      	str	r3, [sp, #12]
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	9302      	str	r3, [sp, #8]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	2301      	movs	r3, #1
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	2201      	movs	r2, #1
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fb5f 	bl	8006eda <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800681c:	2300      	movs	r3, #0

}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af04      	add	r7, sp, #16
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	4611      	mov	r1, r2
 8006832:	461a      	mov	r2, r3
 8006834:	460b      	mov	r3, r1
 8006836:	80fb      	strh	r3, [r7, #6]
 8006838:	4613      	mov	r3, r2
 800683a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800684a:	7979      	ldrb	r1, [r7, #5]
 800684c:	7e3b      	ldrb	r3, [r7, #24]
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	2301      	movs	r3, #1
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	2302      	movs	r3, #2
 800685e:	2200      	movs	r2, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fb3a 	bl	8006eda <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af04      	add	r7, sp, #16
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	4613      	mov	r3, r2
 8006884:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006886:	7979      	ldrb	r1, [r7, #5]
 8006888:	2300      	movs	r3, #0
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	9302      	str	r3, [sp, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	2301      	movs	r3, #1
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2302      	movs	r3, #2
 800689a:	2201      	movs	r2, #1
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 fb1c 	bl	8006eda <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af04      	add	r7, sp, #16
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	4608      	mov	r0, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	461a      	mov	r2, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	70fb      	strb	r3, [r7, #3]
 80068be:	460b      	mov	r3, r1
 80068c0:	70bb      	strb	r3, [r7, #2]
 80068c2:	4613      	mov	r3, r2
 80068c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80068c6:	7878      	ldrb	r0, [r7, #1]
 80068c8:	78ba      	ldrb	r2, [r7, #2]
 80068ca:	78f9      	ldrb	r1, [r7, #3]
 80068cc:	8b3b      	ldrh	r3, [r7, #24]
 80068ce:	9302      	str	r3, [sp, #8]
 80068d0:	7d3b      	ldrb	r3, [r7, #20]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	7c3b      	ldrb	r3, [r7, #16]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 faaf 	bl	8006e3e <USBH_LL_OpenPipe>

  return USBH_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 face 	bl	8006e9c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f836 	bl	8006988 <USBH_GetFreePipe>
 800691c:	4603      	mov	r3, r0
 800691e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006926:	4293      	cmp	r3, r2
 8006928:	d00a      	beq.n	8006940 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	33e0      	adds	r3, #224	@ 0xe0
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	b2db      	uxtb	r3, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2b0a      	cmp	r3, #10
 800695c:	d80d      	bhi.n	800697a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	33e0      	adds	r3, #224	@ 0xe0
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	33e0      	adds	r3, #224	@ 0xe0
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
 8006998:	e00f      	b.n	80069ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	33e0      	adds	r3, #224	@ 0xe0
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	e007      	b.n	80069c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	3301      	adds	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b0a      	cmp	r3, #10
 80069be:	d9ec      	bls.n	800699a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80069c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <MIDI_Application>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MIDI_Application(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
	if (Appli_state == APPLICATION_READY)
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <MIDI_Application+0x34>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d107      	bne.n	80069ec <MIDI_Application+0x1c>
	{
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 80069dc:	2240      	movs	r2, #64	@ 0x40
 80069de:	490a      	ldr	r1, [pc, #40]	@ (8006a08 <MIDI_Application+0x38>)
 80069e0:	480a      	ldr	r0, [pc, #40]	@ (8006a0c <MIDI_Application+0x3c>)
 80069e2:	f7fe fba8 	bl	8005136 <USBH_MIDI_Receive>
		Appli_state = APPLICATION_START;
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <MIDI_Application+0x34>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
	if (Appli_state == APPLICATION_START)
	{
		//....pffff......grrrrr......
	}

	if (Appli_state == APPLICATION_DISCONNECT)
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <MIDI_Application+0x34>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d105      	bne.n	8006a00 <MIDI_Application+0x30>
	{
		Appli_state = APPLICATION_IDLE;
 80069f4:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <MIDI_Application+0x34>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80069fa:	4804      	ldr	r0, [pc, #16]	@ (8006a0c <MIDI_Application+0x3c>)
 80069fc:	f7fe fb37 	bl	800506e <USBH_MIDI_Stop>
	}
}
 8006a00:	bf00      	nop
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200004b8 	.word	0x200004b8
 8006a08:	200000a0 	.word	0x200000a0
 8006a0c:	200000e0 	.word	0x200000e0

08006a10 <USBH_MIDI_ReceiveCallback>:



void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
    sprintf(report, "%02X%02X%02X%02X", MIDI_RX_Buffer[0], MIDI_RX_Buffer[1], MIDI_RX_Buffer[2], MIDI_RX_Buffer[3]);
 8006a18:	4b13      	ldr	r3, [pc, #76]	@ (8006a68 <USBH_MIDI_ReceiveCallback+0x58>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <USBH_MIDI_ReceiveCallback+0x58>)
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	4618      	mov	r0, r3
 8006a24:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <USBH_MIDI_ReceiveCallback+0x58>)
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <USBH_MIDI_ReceiveCallback+0x58>)
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	9200      	str	r2, [sp, #0]
 8006a32:	4603      	mov	r3, r0
 8006a34:	460a      	mov	r2, r1
 8006a36:	490d      	ldr	r1, [pc, #52]	@ (8006a6c <USBH_MIDI_ReceiveCallback+0x5c>)
 8006a38:	480d      	ldr	r0, [pc, #52]	@ (8006a70 <USBH_MIDI_ReceiveCallback+0x60>)
 8006a3a:	f000 fbed 	bl	8007218 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)report, strlen(report), HAL_MAX_DELAY);
 8006a3e:	480c      	ldr	r0, [pc, #48]	@ (8006a70 <USBH_MIDI_ReceiveCallback+0x60>)
 8006a40:	f7f9 fbc6 	bl	80001d0 <strlen>
 8006a44:	4603      	mov	r3, r0
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	4908      	ldr	r1, [pc, #32]	@ (8006a70 <USBH_MIDI_ReceiveCallback+0x60>)
 8006a4e:	4809      	ldr	r0, [pc, #36]	@ (8006a74 <USBH_MIDI_ReceiveCallback+0x64>)
 8006a50:	f7fc fca3 	bl	800339a <HAL_UART_Transmit>
	//HAL_Delay(10);
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	4904      	ldr	r1, [pc, #16]	@ (8006a68 <USBH_MIDI_ReceiveCallback+0x58>)
 8006a58:	4807      	ldr	r0, [pc, #28]	@ (8006a78 <USBH_MIDI_ReceiveCallback+0x68>)
 8006a5a:	f7fe fb6c 	bl	8005136 <USBH_MIDI_Receive>
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	200000a0 	.word	0x200000a0
 8006a6c:	08007a2c 	.word	0x08007a2c
 8006a70:	200004fc 	.word	0x200004fc
 8006a74:	200004bc 	.word	0x200004bc
 8006a78:	200000e0 	.word	0x200000e0

08006a7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006a80:	2201      	movs	r2, #1
 8006a82:	4910      	ldr	r1, [pc, #64]	@ (8006ac4 <MX_USB_HOST_Init+0x48>)
 8006a84:	4810      	ldr	r0, [pc, #64]	@ (8006ac8 <MX_USB_HOST_Init+0x4c>)
 8006a86:	f7fe fc56 	bl	8005336 <USBH_Init>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006a90:	f7f9 fe64 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8006a94:	490d      	ldr	r1, [pc, #52]	@ (8006acc <MX_USB_HOST_Init+0x50>)
 8006a96:	480c      	ldr	r0, [pc, #48]	@ (8006ac8 <MX_USB_HOST_Init+0x4c>)
 8006a98:	f7fe fcdb 	bl	8005452 <USBH_RegisterClass>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006aa2:	f7f9 fe5b 	bl	800075c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006aa6:	4808      	ldr	r0, [pc, #32]	@ (8006ac8 <MX_USB_HOST_Init+0x4c>)
 8006aa8:	f7fe fd5f 	bl	800556a <USBH_Start>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006ab2:	f7f9 fe53 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8006ab6:	2240      	movs	r2, #64	@ 0x40
 8006ab8:	4905      	ldr	r1, [pc, #20]	@ (8006ad0 <MX_USB_HOST_Init+0x54>)
 8006aba:	4803      	ldr	r0, [pc, #12]	@ (8006ac8 <MX_USB_HOST_Init+0x4c>)
 8006abc:	f7fe fb3b 	bl	8005136 <USBH_MIDI_Receive>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006ac0:	bf00      	nop
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	200000e0 	.word	0x200000e0
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	200000a0 	.word	0x200000a0

08006ad4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006ad8:	4802      	ldr	r0, [pc, #8]	@ (8006ae4 <MX_USB_HOST_Process+0x10>)
 8006ada:	f7fe fd57 	bl	800558c <USBH_Process>
}
 8006ade:	bf00      	nop
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200000e0 	.word	0x200000e0

08006ae8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d819      	bhi.n	8006b30 <USBH_UserProcess+0x48>
 8006afc:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <USBH_UserProcess+0x1c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b21 	.word	0x08006b21
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b19 	.word	0x08006b19
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006b18:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <USBH_UserProcess+0x58>)
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	701a      	strb	r2, [r3, #0]
  break;
 8006b1e:	e008      	b.n	8006b32 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006b20:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <USBH_UserProcess+0x58>)
 8006b22:	2202      	movs	r2, #2
 8006b24:	701a      	strb	r2, [r3, #0]
  break;
 8006b26:	e004      	b.n	8006b32 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006b28:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <USBH_UserProcess+0x58>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
  break;
 8006b2e:	e000      	b.n	8006b32 <USBH_UserProcess+0x4a>

  default:
  break;
 8006b30:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	200004b8 	.word	0x200004b8

08006b44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b64:	d147      	bne.n	8006bf6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	4b25      	ldr	r3, [pc, #148]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	4a24      	ldr	r2, [pc, #144]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b76:	4b22      	ldr	r3, [pc, #136]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b90:	f107 0314 	add.w	r3, r7, #20
 8006b94:	4619      	mov	r1, r3
 8006b96:	481b      	ldr	r0, [pc, #108]	@ (8006c04 <HAL_HCD_MspInit+0xc0>)
 8006b98:	f7fa f87c 	bl	8000c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006baa:	2303      	movs	r3, #3
 8006bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006bae:	230a      	movs	r3, #10
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb2:	f107 0314 	add.w	r3, r7, #20
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4812      	ldr	r0, [pc, #72]	@ (8006c04 <HAL_HCD_MspInit+0xc0>)
 8006bba:	f7fa f86b 	bl	8000c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc8:	6353      	str	r3, [r2, #52]	@ 0x34
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bda:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <HAL_HCD_MspInit+0xbc>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	2043      	movs	r0, #67	@ 0x43
 8006bec:	f7fa f81b 	bl	8000c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bf0:	2043      	movs	r0, #67	@ 0x43
 8006bf2:	f7fa f834 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3728      	adds	r7, #40	@ 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40020000 	.word	0x40020000

08006c08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff f885 	bl	8005d26 <USBH_LL_IncTimer>
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff f8bd 	bl	8005db2 <USBH_LL_Connect>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff f8c6 	bl	8005de0 <USBH_LL_Disconnect>
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f877 	bl	8005d7a <USBH_LL_PortEnabled>
} 
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff f877 	bl	8005d96 <USBH_LL_PortDisabled>
} 
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d12a      	bne.n	8006d18 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006cc2:	4a18      	ldr	r2, [pc, #96]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a15      	ldr	r2, [pc, #84]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cce:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006cd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006cda:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cdc:	2208      	movs	r2, #8
 8006cde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006ce0:	4b10      	ldr	r3, [pc, #64]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006cec:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cee:	2202      	movs	r2, #2
 8006cf0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006cf8:	480a      	ldr	r0, [pc, #40]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006cfa:	f7fa f980 	bl	8000ffe <HAL_HCD_Init>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006d04:	f7f9 fd2a 	bl	800075c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006d08:	4806      	ldr	r0, [pc, #24]	@ (8006d24 <USBH_LL_Init+0x74>)
 8006d0a:	f7fa fd83 	bl	8001814 <HAL_HCD_GetCurrentFrame>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe fff8 	bl	8005d08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000050c 	.word	0x2000050c

08006d28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fa fcf0 	bl	8001724 <HAL_HCD_Start>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f95e 	bl	800700c <USBH_Get_USB_Status>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fa fcf8 	bl	800176a <HAL_HCD_Stop>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 f943 	bl	800700c <USBH_Get_USB_Status>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fa fd42 	bl	8001830 <HAL_HCD_GetCurrentSpeed>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d00c      	beq.n	8006dcc <USBH_LL_GetSpeed+0x38>
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d80d      	bhi.n	8006dd2 <USBH_LL_GetSpeed+0x3e>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <USBH_LL_GetSpeed+0x2c>
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d003      	beq.n	8006dc6 <USBH_LL_GetSpeed+0x32>
 8006dbe:	e008      	b.n	8006dd2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc4:	e008      	b.n	8006dd8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dca:	e005      	b.n	8006dd8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd0:	e002      	b.n	8006dd8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd6:	bf00      	nop
  }
  return  speed;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fa fcd3 	bl	80017a4 <HAL_HCD_ResetPort>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 f901 	bl	800700c <USBH_Get_USB_Status>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa fcdb 	bl	80017ea <HAL_HCD_HC_GetXferCount>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006e3e:	b590      	push	{r4, r7, lr}
 8006e40:	b089      	sub	sp, #36	@ 0x24
 8006e42:	af04      	add	r7, sp, #16
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	70fb      	strb	r3, [r7, #3]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70bb      	strb	r3, [r7, #2]
 8006e54:	4613      	mov	r3, r2
 8006e56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8006e66:	787c      	ldrb	r4, [r7, #1]
 8006e68:	78ba      	ldrb	r2, [r7, #2]
 8006e6a:	78f9      	ldrb	r1, [r7, #3]
 8006e6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e6e:	9302      	str	r3, [sp, #8]
 8006e70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	f7fa f920 	bl	80010c2 <HAL_HCD_HC_Init>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 f8bf 	bl	800700c <USBH_Get_USB_Status>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd90      	pop	{r4, r7, pc}

08006e9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fa f999 	bl	80011f2 <HAL_HCD_HC_Halt>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f8a0 	bl	800700c <USBH_Get_USB_Status>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006eda:	b590      	push	{r4, r7, lr}
 8006edc:	b089      	sub	sp, #36	@ 0x24
 8006ede:	af04      	add	r7, sp, #16
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	70fb      	strb	r3, [r7, #3]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70bb      	strb	r3, [r7, #2]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8006f02:	787c      	ldrb	r4, [r7, #1]
 8006f04:	78ba      	ldrb	r2, [r7, #2]
 8006f06:	78f9      	ldrb	r1, [r7, #3]
 8006f08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	f7fa f98b 	bl	8001238 <HAL_HCD_HC_SubmitRequest>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f86f 	bl	800700c <USBH_Get_USB_Status>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd90      	pop	{r4, r7, pc}

08006f3c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fa fc34 	bl	80017c0 <HAL_HCD_HC_GetURBState>
 8006f58:	4603      	mov	r3, r0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d103      	bne.n	8006f80 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f872 	bl	8007064 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006f80:	20c8      	movs	r0, #200	@ 0xc8
 8006f82:	f7f9 fd51 	bl	8000a28 <HAL_Delay>
  return USBH_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006fa6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	440b      	add	r3, r1
 8006fb6:	333b      	adds	r3, #59	@ 0x3b
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	68f9      	ldr	r1, [r7, #12]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	440b      	add	r3, r1
 8006fcc:	3350      	adds	r3, #80	@ 0x50
 8006fce:	78ba      	ldrb	r2, [r7, #2]
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e009      	b.n	8006fe8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3351      	adds	r3, #81	@ 0x51
 8006fe4:	78ba      	ldrb	r2, [r7, #2]
 8006fe6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7f9 fd12 	bl	8000a28 <HAL_Delay>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d817      	bhi.n	8007050 <USBH_Get_USB_Status+0x44>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <USBH_Get_USB_Status+0x1c>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007039 	.word	0x08007039
 800702c:	0800703f 	.word	0x0800703f
 8007030:	08007045 	.word	0x08007045
 8007034:	0800704b 	.word	0x0800704b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
    break;
 800703c:	e00b      	b.n	8007056 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800703e:	2302      	movs	r3, #2
 8007040:	73fb      	strb	r3, [r7, #15]
    break;
 8007042:	e008      	b.n	8007056 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
    break;
 8007048:	e005      	b.n	8007056 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800704a:	2302      	movs	r3, #2
 800704c:	73fb      	strb	r3, [r7, #15]
    break;
 800704e:	e002      	b.n	8007056 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	73fb      	strb	r3, [r7, #15]
    break;
 8007054:	bf00      	nop
  }
  return usb_status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007078:	2301      	movs	r3, #1
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e001      	b.n	8007082 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	461a      	mov	r2, r3
 8007086:	2101      	movs	r1, #1
 8007088:	4803      	ldr	r0, [pc, #12]	@ (8007098 <MX_DriverVbusFS+0x34>)
 800708a:	f7f9 ff9f 	bl	8000fcc <HAL_GPIO_WritePin>
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40020800 	.word	0x40020800

0800709c <malloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	@ (80070a8 <malloc+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b82d 	b.w	8007100 <_malloc_r>
 80070a6:	bf00      	nop
 80070a8:	2000002c 	.word	0x2000002c

080070ac <free>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	@ (80070b8 <free+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 b90f 	b.w	80072d4 <_free_r>
 80070b6:	bf00      	nop
 80070b8:	2000002c 	.word	0x2000002c

080070bc <sbrk_aligned>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4e0f      	ldr	r6, [pc, #60]	@ (80070fc <sbrk_aligned+0x40>)
 80070c0:	460c      	mov	r4, r1
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	4605      	mov	r5, r0
 80070c6:	b911      	cbnz	r1, 80070ce <sbrk_aligned+0x12>
 80070c8:	f000 f8ce 	bl	8007268 <_sbrk_r>
 80070cc:	6030      	str	r0, [r6, #0]
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 f8c9 	bl	8007268 <_sbrk_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d103      	bne.n	80070e2 <sbrk_aligned+0x26>
 80070da:	f04f 34ff 	mov.w	r4, #4294967295
 80070de:	4620      	mov	r0, r4
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	1cc4      	adds	r4, r0, #3
 80070e4:	f024 0403 	bic.w	r4, r4, #3
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d0f8      	beq.n	80070de <sbrk_aligned+0x22>
 80070ec:	1a21      	subs	r1, r4, r0
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 f8ba 	bl	8007268 <_sbrk_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d1f2      	bne.n	80070de <sbrk_aligned+0x22>
 80070f8:	e7ef      	b.n	80070da <sbrk_aligned+0x1e>
 80070fa:	bf00      	nop
 80070fc:	200007d0 	.word	0x200007d0

08007100 <_malloc_r>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	1ccd      	adds	r5, r1, #3
 8007106:	f025 0503 	bic.w	r5, r5, #3
 800710a:	3508      	adds	r5, #8
 800710c:	2d0c      	cmp	r5, #12
 800710e:	bf38      	it	cc
 8007110:	250c      	movcc	r5, #12
 8007112:	2d00      	cmp	r5, #0
 8007114:	4606      	mov	r6, r0
 8007116:	db01      	blt.n	800711c <_malloc_r+0x1c>
 8007118:	42a9      	cmp	r1, r5
 800711a:	d904      	bls.n	8007126 <_malloc_r+0x26>
 800711c:	230c      	movs	r3, #12
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	2000      	movs	r0, #0
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071fc <_malloc_r+0xfc>
 800712a:	f000 f869 	bl	8007200 <__malloc_lock>
 800712e:	f8d8 3000 	ldr.w	r3, [r8]
 8007132:	461c      	mov	r4, r3
 8007134:	bb44      	cbnz	r4, 8007188 <_malloc_r+0x88>
 8007136:	4629      	mov	r1, r5
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff ffbf 	bl	80070bc <sbrk_aligned>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	4604      	mov	r4, r0
 8007142:	d158      	bne.n	80071f6 <_malloc_r+0xf6>
 8007144:	f8d8 4000 	ldr.w	r4, [r8]
 8007148:	4627      	mov	r7, r4
 800714a:	2f00      	cmp	r7, #0
 800714c:	d143      	bne.n	80071d6 <_malloc_r+0xd6>
 800714e:	2c00      	cmp	r4, #0
 8007150:	d04b      	beq.n	80071ea <_malloc_r+0xea>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	4639      	mov	r1, r7
 8007156:	4630      	mov	r0, r6
 8007158:	eb04 0903 	add.w	r9, r4, r3
 800715c:	f000 f884 	bl	8007268 <_sbrk_r>
 8007160:	4581      	cmp	r9, r0
 8007162:	d142      	bne.n	80071ea <_malloc_r+0xea>
 8007164:	6821      	ldr	r1, [r4, #0]
 8007166:	1a6d      	subs	r5, r5, r1
 8007168:	4629      	mov	r1, r5
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ffa6 	bl	80070bc <sbrk_aligned>
 8007170:	3001      	adds	r0, #1
 8007172:	d03a      	beq.n	80071ea <_malloc_r+0xea>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	442b      	add	r3, r5
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	f8d8 3000 	ldr.w	r3, [r8]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	bb62      	cbnz	r2, 80071dc <_malloc_r+0xdc>
 8007182:	f8c8 7000 	str.w	r7, [r8]
 8007186:	e00f      	b.n	80071a8 <_malloc_r+0xa8>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	d420      	bmi.n	80071d0 <_malloc_r+0xd0>
 800718e:	2a0b      	cmp	r2, #11
 8007190:	d917      	bls.n	80071c2 <_malloc_r+0xc2>
 8007192:	1961      	adds	r1, r4, r5
 8007194:	42a3      	cmp	r3, r4
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	6059      	strne	r1, [r3, #4]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	bf08      	it	eq
 80071a0:	f8c8 1000 	streq.w	r1, [r8]
 80071a4:	5162      	str	r2, [r4, r5]
 80071a6:	604b      	str	r3, [r1, #4]
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 f82f 	bl	800720c <__malloc_unlock>
 80071ae:	f104 000b 	add.w	r0, r4, #11
 80071b2:	1d23      	adds	r3, r4, #4
 80071b4:	f020 0007 	bic.w	r0, r0, #7
 80071b8:	1ac2      	subs	r2, r0, r3
 80071ba:	bf1c      	itt	ne
 80071bc:	1a1b      	subne	r3, r3, r0
 80071be:	50a3      	strne	r3, [r4, r2]
 80071c0:	e7af      	b.n	8007122 <_malloc_r+0x22>
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	bf0c      	ite	eq
 80071c8:	f8c8 2000 	streq.w	r2, [r8]
 80071cc:	605a      	strne	r2, [r3, #4]
 80071ce:	e7eb      	b.n	80071a8 <_malloc_r+0xa8>
 80071d0:	4623      	mov	r3, r4
 80071d2:	6864      	ldr	r4, [r4, #4]
 80071d4:	e7ae      	b.n	8007134 <_malloc_r+0x34>
 80071d6:	463c      	mov	r4, r7
 80071d8:	687f      	ldr	r7, [r7, #4]
 80071da:	e7b6      	b.n	800714a <_malloc_r+0x4a>
 80071dc:	461a      	mov	r2, r3
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d1fb      	bne.n	80071dc <_malloc_r+0xdc>
 80071e4:	2300      	movs	r3, #0
 80071e6:	6053      	str	r3, [r2, #4]
 80071e8:	e7de      	b.n	80071a8 <_malloc_r+0xa8>
 80071ea:	230c      	movs	r3, #12
 80071ec:	6033      	str	r3, [r6, #0]
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f80c 	bl	800720c <__malloc_unlock>
 80071f4:	e794      	b.n	8007120 <_malloc_r+0x20>
 80071f6:	6005      	str	r5, [r0, #0]
 80071f8:	e7d6      	b.n	80071a8 <_malloc_r+0xa8>
 80071fa:	bf00      	nop
 80071fc:	200007d4 	.word	0x200007d4

08007200 <__malloc_lock>:
 8007200:	4801      	ldr	r0, [pc, #4]	@ (8007208 <__malloc_lock+0x8>)
 8007202:	f000 b865 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 8007206:	bf00      	nop
 8007208:	20000914 	.word	0x20000914

0800720c <__malloc_unlock>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__malloc_unlock+0x8>)
 800720e:	f000 b860 	b.w	80072d2 <__retarget_lock_release_recursive>
 8007212:	bf00      	nop
 8007214:	20000914 	.word	0x20000914

08007218 <siprintf>:
 8007218:	b40e      	push	{r1, r2, r3}
 800721a:	b500      	push	{lr}
 800721c:	b09c      	sub	sp, #112	@ 0x70
 800721e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007220:	9002      	str	r0, [sp, #8]
 8007222:	9006      	str	r0, [sp, #24]
 8007224:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007228:	4809      	ldr	r0, [pc, #36]	@ (8007250 <siprintf+0x38>)
 800722a:	9107      	str	r1, [sp, #28]
 800722c:	9104      	str	r1, [sp, #16]
 800722e:	4909      	ldr	r1, [pc, #36]	@ (8007254 <siprintf+0x3c>)
 8007230:	f853 2b04 	ldr.w	r2, [r3], #4
 8007234:	9105      	str	r1, [sp, #20]
 8007236:	6800      	ldr	r0, [r0, #0]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	a902      	add	r1, sp, #8
 800723c:	f000 f8f0 	bl	8007420 <_svfiprintf_r>
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	b01c      	add	sp, #112	@ 0x70
 8007248:	f85d eb04 	ldr.w	lr, [sp], #4
 800724c:	b003      	add	sp, #12
 800724e:	4770      	bx	lr
 8007250:	2000002c 	.word	0x2000002c
 8007254:	ffff0208 	.word	0xffff0208

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <_sbrk_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d06      	ldr	r5, [pc, #24]	@ (8007284 <_sbrk_r+0x1c>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f000 fbbc 	bl	80079f0 <_sbrk>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_sbrk_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_sbrk_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000910 	.word	0x20000910

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	@ (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	@ (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	@ (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	@ (80072cc <__libc_init_array+0x44>)
 800729c:	f000 fbb6 	bl	8007a0c <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007a94 	.word	0x08007a94
 80072c4:	08007a94 	.word	0x08007a94
 80072c8:	08007a94 	.word	0x08007a94
 80072cc:	08007a98 	.word	0x08007a98

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <_free_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	2900      	cmp	r1, #0
 80072da:	d041      	beq.n	8007360 <_free_r+0x8c>
 80072dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e0:	1f0c      	subs	r4, r1, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	18e4      	addlt	r4, r4, r3
 80072e8:	f7ff ff8a 	bl	8007200 <__malloc_lock>
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <_free_r+0x90>)
 80072ee:	6813      	ldr	r3, [r2, #0]
 80072f0:	b933      	cbnz	r3, 8007300 <_free_r+0x2c>
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	6014      	str	r4, [r2, #0]
 80072f6:	4628      	mov	r0, r5
 80072f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072fc:	f7ff bf86 	b.w	800720c <__malloc_unlock>
 8007300:	42a3      	cmp	r3, r4
 8007302:	d908      	bls.n	8007316 <_free_r+0x42>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	1821      	adds	r1, r4, r0
 8007308:	428b      	cmp	r3, r1
 800730a:	bf01      	itttt	eq
 800730c:	6819      	ldreq	r1, [r3, #0]
 800730e:	685b      	ldreq	r3, [r3, #4]
 8007310:	1809      	addeq	r1, r1, r0
 8007312:	6021      	streq	r1, [r4, #0]
 8007314:	e7ed      	b.n	80072f2 <_free_r+0x1e>
 8007316:	461a      	mov	r2, r3
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b10b      	cbz	r3, 8007320 <_free_r+0x4c>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d9fa      	bls.n	8007316 <_free_r+0x42>
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	1850      	adds	r0, r2, r1
 8007324:	42a0      	cmp	r0, r4
 8007326:	d10b      	bne.n	8007340 <_free_r+0x6c>
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	4401      	add	r1, r0
 800732c:	1850      	adds	r0, r2, r1
 800732e:	4283      	cmp	r3, r0
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	d1e0      	bne.n	80072f6 <_free_r+0x22>
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	6053      	str	r3, [r2, #4]
 800733a:	4408      	add	r0, r1
 800733c:	6010      	str	r0, [r2, #0]
 800733e:	e7da      	b.n	80072f6 <_free_r+0x22>
 8007340:	d902      	bls.n	8007348 <_free_r+0x74>
 8007342:	230c      	movs	r3, #12
 8007344:	602b      	str	r3, [r5, #0]
 8007346:	e7d6      	b.n	80072f6 <_free_r+0x22>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	1821      	adds	r1, r4, r0
 800734c:	428b      	cmp	r3, r1
 800734e:	bf04      	itt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	bf04      	itt	eq
 8007358:	1809      	addeq	r1, r1, r0
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6054      	str	r4, [r2, #4]
 800735e:	e7ca      	b.n	80072f6 <_free_r+0x22>
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	bf00      	nop
 8007364:	200007d4 	.word	0x200007d4

08007368 <__ssputs_r>:
 8007368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	688e      	ldr	r6, [r1, #8]
 800736e:	461f      	mov	r7, r3
 8007370:	42be      	cmp	r6, r7
 8007372:	680b      	ldr	r3, [r1, #0]
 8007374:	4682      	mov	sl, r0
 8007376:	460c      	mov	r4, r1
 8007378:	4690      	mov	r8, r2
 800737a:	d82d      	bhi.n	80073d8 <__ssputs_r+0x70>
 800737c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007384:	d026      	beq.n	80073d4 <__ssputs_r+0x6c>
 8007386:	6965      	ldr	r5, [r4, #20]
 8007388:	6909      	ldr	r1, [r1, #16]
 800738a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800738e:	eba3 0901 	sub.w	r9, r3, r1
 8007392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007396:	1c7b      	adds	r3, r7, #1
 8007398:	444b      	add	r3, r9
 800739a:	106d      	asrs	r5, r5, #1
 800739c:	429d      	cmp	r5, r3
 800739e:	bf38      	it	cc
 80073a0:	461d      	movcc	r5, r3
 80073a2:	0553      	lsls	r3, r2, #21
 80073a4:	d527      	bpl.n	80073f6 <__ssputs_r+0x8e>
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7ff feaa 	bl	8007100 <_malloc_r>
 80073ac:	4606      	mov	r6, r0
 80073ae:	b360      	cbz	r0, 800740a <__ssputs_r+0xa2>
 80073b0:	6921      	ldr	r1, [r4, #16]
 80073b2:	464a      	mov	r2, r9
 80073b4:	f000 fad8 	bl	8007968 <memcpy>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6126      	str	r6, [r4, #16]
 80073c6:	6165      	str	r5, [r4, #20]
 80073c8:	444e      	add	r6, r9
 80073ca:	eba5 0509 	sub.w	r5, r5, r9
 80073ce:	6026      	str	r6, [r4, #0]
 80073d0:	60a5      	str	r5, [r4, #8]
 80073d2:	463e      	mov	r6, r7
 80073d4:	42be      	cmp	r6, r7
 80073d6:	d900      	bls.n	80073da <__ssputs_r+0x72>
 80073d8:	463e      	mov	r6, r7
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	4632      	mov	r2, r6
 80073de:	4641      	mov	r1, r8
 80073e0:	f000 faa8 	bl	8007934 <memmove>
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	1b9b      	subs	r3, r3, r6
 80073e8:	60a3      	str	r3, [r4, #8]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	4433      	add	r3, r6
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	2000      	movs	r0, #0
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	462a      	mov	r2, r5
 80073f8:	f000 fac4 	bl	8007984 <_realloc_r>
 80073fc:	4606      	mov	r6, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d1e0      	bne.n	80073c4 <__ssputs_r+0x5c>
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	4650      	mov	r0, sl
 8007406:	f7ff ff65 	bl	80072d4 <_free_r>
 800740a:	230c      	movs	r3, #12
 800740c:	f8ca 3000 	str.w	r3, [sl]
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	e7e9      	b.n	80073f2 <__ssputs_r+0x8a>
	...

08007420 <_svfiprintf_r>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	4698      	mov	r8, r3
 8007426:	898b      	ldrh	r3, [r1, #12]
 8007428:	061b      	lsls	r3, r3, #24
 800742a:	b09d      	sub	sp, #116	@ 0x74
 800742c:	4607      	mov	r7, r0
 800742e:	460d      	mov	r5, r1
 8007430:	4614      	mov	r4, r2
 8007432:	d510      	bpl.n	8007456 <_svfiprintf_r+0x36>
 8007434:	690b      	ldr	r3, [r1, #16]
 8007436:	b973      	cbnz	r3, 8007456 <_svfiprintf_r+0x36>
 8007438:	2140      	movs	r1, #64	@ 0x40
 800743a:	f7ff fe61 	bl	8007100 <_malloc_r>
 800743e:	6028      	str	r0, [r5, #0]
 8007440:	6128      	str	r0, [r5, #16]
 8007442:	b930      	cbnz	r0, 8007452 <_svfiprintf_r+0x32>
 8007444:	230c      	movs	r3, #12
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	b01d      	add	sp, #116	@ 0x74
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	2340      	movs	r3, #64	@ 0x40
 8007454:	616b      	str	r3, [r5, #20]
 8007456:	2300      	movs	r3, #0
 8007458:	9309      	str	r3, [sp, #36]	@ 0x24
 800745a:	2320      	movs	r3, #32
 800745c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007460:	f8cd 800c 	str.w	r8, [sp, #12]
 8007464:	2330      	movs	r3, #48	@ 0x30
 8007466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007604 <_svfiprintf_r+0x1e4>
 800746a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746e:	f04f 0901 	mov.w	r9, #1
 8007472:	4623      	mov	r3, r4
 8007474:	469a      	mov	sl, r3
 8007476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747a:	b10a      	cbz	r2, 8007480 <_svfiprintf_r+0x60>
 800747c:	2a25      	cmp	r2, #37	@ 0x25
 800747e:	d1f9      	bne.n	8007474 <_svfiprintf_r+0x54>
 8007480:	ebba 0b04 	subs.w	fp, sl, r4
 8007484:	d00b      	beq.n	800749e <_svfiprintf_r+0x7e>
 8007486:	465b      	mov	r3, fp
 8007488:	4622      	mov	r2, r4
 800748a:	4629      	mov	r1, r5
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff ff6b 	bl	8007368 <__ssputs_r>
 8007492:	3001      	adds	r0, #1
 8007494:	f000 80a7 	beq.w	80075e6 <_svfiprintf_r+0x1c6>
 8007498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749a:	445a      	add	r2, fp
 800749c:	9209      	str	r2, [sp, #36]	@ 0x24
 800749e:	f89a 3000 	ldrb.w	r3, [sl]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 809f 	beq.w	80075e6 <_svfiprintf_r+0x1c6>
 80074a8:	2300      	movs	r3, #0
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b2:	f10a 0a01 	add.w	sl, sl, #1
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	9307      	str	r3, [sp, #28]
 80074ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074be:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c0:	4654      	mov	r4, sl
 80074c2:	2205      	movs	r2, #5
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	484e      	ldr	r0, [pc, #312]	@ (8007604 <_svfiprintf_r+0x1e4>)
 80074ca:	f7f8 fe89 	bl	80001e0 <memchr>
 80074ce:	9a04      	ldr	r2, [sp, #16]
 80074d0:	b9d8      	cbnz	r0, 800750a <_svfiprintf_r+0xea>
 80074d2:	06d0      	lsls	r0, r2, #27
 80074d4:	bf44      	itt	mi
 80074d6:	2320      	movmi	r3, #32
 80074d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074dc:	0711      	lsls	r1, r2, #28
 80074de:	bf44      	itt	mi
 80074e0:	232b      	movmi	r3, #43	@ 0x2b
 80074e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ec:	d015      	beq.n	800751a <_svfiprintf_r+0xfa>
 80074ee:	9a07      	ldr	r2, [sp, #28]
 80074f0:	4654      	mov	r4, sl
 80074f2:	2000      	movs	r0, #0
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	4621      	mov	r1, r4
 80074fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fe:	3b30      	subs	r3, #48	@ 0x30
 8007500:	2b09      	cmp	r3, #9
 8007502:	d94b      	bls.n	800759c <_svfiprintf_r+0x17c>
 8007504:	b1b0      	cbz	r0, 8007534 <_svfiprintf_r+0x114>
 8007506:	9207      	str	r2, [sp, #28]
 8007508:	e014      	b.n	8007534 <_svfiprintf_r+0x114>
 800750a:	eba0 0308 	sub.w	r3, r0, r8
 800750e:	fa09 f303 	lsl.w	r3, r9, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	46a2      	mov	sl, r4
 8007518:	e7d2      	b.n	80074c0 <_svfiprintf_r+0xa0>
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	1d19      	adds	r1, r3, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	9103      	str	r1, [sp, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfbb      	ittet	lt
 8007526:	425b      	neglt	r3, r3
 8007528:	f042 0202 	orrlt.w	r2, r2, #2
 800752c:	9307      	strge	r3, [sp, #28]
 800752e:	9307      	strlt	r3, [sp, #28]
 8007530:	bfb8      	it	lt
 8007532:	9204      	strlt	r2, [sp, #16]
 8007534:	7823      	ldrb	r3, [r4, #0]
 8007536:	2b2e      	cmp	r3, #46	@ 0x2e
 8007538:	d10a      	bne.n	8007550 <_svfiprintf_r+0x130>
 800753a:	7863      	ldrb	r3, [r4, #1]
 800753c:	2b2a      	cmp	r3, #42	@ 0x2a
 800753e:	d132      	bne.n	80075a6 <_svfiprintf_r+0x186>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	9203      	str	r2, [sp, #12]
 8007548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800754c:	3402      	adds	r4, #2
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007614 <_svfiprintf_r+0x1f4>
 8007554:	7821      	ldrb	r1, [r4, #0]
 8007556:	2203      	movs	r2, #3
 8007558:	4650      	mov	r0, sl
 800755a:	f7f8 fe41 	bl	80001e0 <memchr>
 800755e:	b138      	cbz	r0, 8007570 <_svfiprintf_r+0x150>
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	eba0 000a 	sub.w	r0, r0, sl
 8007566:	2240      	movs	r2, #64	@ 0x40
 8007568:	4082      	lsls	r2, r0
 800756a:	4313      	orrs	r3, r2
 800756c:	3401      	adds	r4, #1
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007574:	4824      	ldr	r0, [pc, #144]	@ (8007608 <_svfiprintf_r+0x1e8>)
 8007576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800757a:	2206      	movs	r2, #6
 800757c:	f7f8 fe30 	bl	80001e0 <memchr>
 8007580:	2800      	cmp	r0, #0
 8007582:	d036      	beq.n	80075f2 <_svfiprintf_r+0x1d2>
 8007584:	4b21      	ldr	r3, [pc, #132]	@ (800760c <_svfiprintf_r+0x1ec>)
 8007586:	bb1b      	cbnz	r3, 80075d0 <_svfiprintf_r+0x1b0>
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	3307      	adds	r3, #7
 800758c:	f023 0307 	bic.w	r3, r3, #7
 8007590:	3308      	adds	r3, #8
 8007592:	9303      	str	r3, [sp, #12]
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	4433      	add	r3, r6
 8007598:	9309      	str	r3, [sp, #36]	@ 0x24
 800759a:	e76a      	b.n	8007472 <_svfiprintf_r+0x52>
 800759c:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a0:	460c      	mov	r4, r1
 80075a2:	2001      	movs	r0, #1
 80075a4:	e7a8      	b.n	80074f8 <_svfiprintf_r+0xd8>
 80075a6:	2300      	movs	r3, #0
 80075a8:	3401      	adds	r4, #1
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	4619      	mov	r1, r3
 80075ae:	f04f 0c0a 	mov.w	ip, #10
 80075b2:	4620      	mov	r0, r4
 80075b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b8:	3a30      	subs	r2, #48	@ 0x30
 80075ba:	2a09      	cmp	r2, #9
 80075bc:	d903      	bls.n	80075c6 <_svfiprintf_r+0x1a6>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0c6      	beq.n	8007550 <_svfiprintf_r+0x130>
 80075c2:	9105      	str	r1, [sp, #20]
 80075c4:	e7c4      	b.n	8007550 <_svfiprintf_r+0x130>
 80075c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ca:	4604      	mov	r4, r0
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7f0      	b.n	80075b2 <_svfiprintf_r+0x192>
 80075d0:	ab03      	add	r3, sp, #12
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	462a      	mov	r2, r5
 80075d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007610 <_svfiprintf_r+0x1f0>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	4638      	mov	r0, r7
 80075dc:	f3af 8000 	nop.w
 80075e0:	1c42      	adds	r2, r0, #1
 80075e2:	4606      	mov	r6, r0
 80075e4:	d1d6      	bne.n	8007594 <_svfiprintf_r+0x174>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	065b      	lsls	r3, r3, #25
 80075ea:	f53f af2d 	bmi.w	8007448 <_svfiprintf_r+0x28>
 80075ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f0:	e72c      	b.n	800744c <_svfiprintf_r+0x2c>
 80075f2:	ab03      	add	r3, sp, #12
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	462a      	mov	r2, r5
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <_svfiprintf_r+0x1f0>)
 80075fa:	a904      	add	r1, sp, #16
 80075fc:	4638      	mov	r0, r7
 80075fe:	f000 f879 	bl	80076f4 <_printf_i>
 8007602:	e7ed      	b.n	80075e0 <_svfiprintf_r+0x1c0>
 8007604:	08007a58 	.word	0x08007a58
 8007608:	08007a62 	.word	0x08007a62
 800760c:	00000000 	.word	0x00000000
 8007610:	08007369 	.word	0x08007369
 8007614:	08007a5e 	.word	0x08007a5e

08007618 <_printf_common>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	4616      	mov	r6, r2
 800761e:	4698      	mov	r8, r3
 8007620:	688a      	ldr	r2, [r1, #8]
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007628:	4293      	cmp	r3, r2
 800762a:	bfb8      	it	lt
 800762c:	4613      	movlt	r3, r2
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b10a      	cbz	r2, 800763e <_printf_common+0x26>
 800763a:	3301      	adds	r3, #1
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	0699      	lsls	r1, r3, #26
 8007642:	bf42      	ittt	mi
 8007644:	6833      	ldrmi	r3, [r6, #0]
 8007646:	3302      	addmi	r3, #2
 8007648:	6033      	strmi	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d106      	bne.n	8007660 <_printf_common+0x48>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc26      	bgt.n	80076ae <_printf_common+0x96>
 8007660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	3b00      	subs	r3, #0
 8007668:	bf18      	it	ne
 800766a:	2301      	movne	r3, #1
 800766c:	0692      	lsls	r2, r2, #26
 800766e:	d42b      	bmi.n	80076c8 <_printf_common+0xb0>
 8007670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d01e      	beq.n	80076bc <_printf_common+0xa4>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	f003 0306 	and.w	r3, r3, #6
 8007686:	2b04      	cmp	r3, #4
 8007688:	bf02      	ittt	eq
 800768a:	68e5      	ldreq	r5, [r4, #12]
 800768c:	6833      	ldreq	r3, [r6, #0]
 800768e:	1aed      	subeq	r5, r5, r3
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	2600      	movs	r6, #0
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xc8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xa8>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4641      	mov	r1, r8
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c8      	blx	r9
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xac>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c6      	b.n	8007656 <_printf_common+0x3e>
 80076c8:	18e1      	adds	r1, r4, r3
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	2030      	movs	r0, #48	@ 0x30
 80076ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076d2:	4422      	add	r2, r4
 80076d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076dc:	3302      	adds	r3, #2
 80076de:	e7c7      	b.n	8007670 <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4641      	mov	r1, r8
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c8      	blx	r9
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x8e>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	7e0f      	ldrb	r7, [r1, #24]
 80076fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076fc:	2f78      	cmp	r7, #120	@ 0x78
 80076fe:	4691      	mov	r9, r2
 8007700:	4680      	mov	r8, r0
 8007702:	460c      	mov	r4, r1
 8007704:	469a      	mov	sl, r3
 8007706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	@ 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d2 	beq.w	80078ba <_printf_i+0x1c6>
 8007716:	2f58      	cmp	r7, #88	@ 0x58
 8007718:	f000 80b9 	beq.w	800788e <_printf_i+0x19a>
 800771c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a101      	add	r1, pc, #4	@ (adr r1, 8007734 <_printf_i+0x40>)
 8007730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078a1 	.word	0x080078a1
 8007764:	080077cb 	.word	0x080077cb
 8007768:	0800785b 	.word	0x0800785b
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078c3 	.word	0x080078c3
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077cb 	.word	0x080077cb
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007863 	.word	0x08007863
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6032      	str	r2, [r6, #0]
 8007794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e09d      	b.n	80078dc <_printf_i+0x1e8>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6031      	str	r1, [r6, #0]
 80077a8:	0606      	lsls	r6, r0, #24
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0xbc>
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	e003      	b.n	80077b8 <_printf_i+0xc4>
 80077b0:	0645      	lsls	r5, r0, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0xb8>
 80077b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	da03      	bge.n	80077c4 <_printf_i+0xd0>
 80077bc:	232d      	movs	r3, #45	@ 0x2d
 80077be:	426d      	negs	r5, r5
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c4:	4859      	ldr	r0, [pc, #356]	@ (800792c <_printf_i+0x238>)
 80077c6:	230a      	movs	r3, #10
 80077c8:	e011      	b.n	80077ee <_printf_i+0xfa>
 80077ca:	6821      	ldr	r1, [r4, #0]
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	0608      	lsls	r0, r1, #24
 80077d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077d4:	d402      	bmi.n	80077dc <_printf_i+0xe8>
 80077d6:	0649      	lsls	r1, r1, #25
 80077d8:	bf48      	it	mi
 80077da:	b2ad      	uxthmi	r5, r5
 80077dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077de:	4853      	ldr	r0, [pc, #332]	@ (800792c <_printf_i+0x238>)
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	bf14      	ite	ne
 80077e4:	230a      	movne	r3, #10
 80077e6:	2308      	moveq	r3, #8
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ee:	6866      	ldr	r6, [r4, #4]
 80077f0:	60a6      	str	r6, [r4, #8]
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	bfa2      	ittt	ge
 80077f6:	6821      	ldrge	r1, [r4, #0]
 80077f8:	f021 0104 	bicge.w	r1, r1, #4
 80077fc:	6021      	strge	r1, [r4, #0]
 80077fe:	b90d      	cbnz	r5, 8007804 <_printf_i+0x110>
 8007800:	2e00      	cmp	r6, #0
 8007802:	d04b      	beq.n	800789c <_printf_i+0x1a8>
 8007804:	4616      	mov	r6, r2
 8007806:	fbb5 f1f3 	udiv	r1, r5, r3
 800780a:	fb03 5711 	mls	r7, r3, r1, r5
 800780e:	5dc7      	ldrb	r7, [r0, r7]
 8007810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007814:	462f      	mov	r7, r5
 8007816:	42bb      	cmp	r3, r7
 8007818:	460d      	mov	r5, r1
 800781a:	d9f4      	bls.n	8007806 <_printf_i+0x112>
 800781c:	2b08      	cmp	r3, #8
 800781e:	d10b      	bne.n	8007838 <_printf_i+0x144>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	07df      	lsls	r7, r3, #31
 8007824:	d508      	bpl.n	8007838 <_printf_i+0x144>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	6861      	ldr	r1, [r4, #4]
 800782a:	4299      	cmp	r1, r3
 800782c:	bfde      	ittt	le
 800782e:	2330      	movle	r3, #48	@ 0x30
 8007830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007838:	1b92      	subs	r2, r2, r6
 800783a:	6122      	str	r2, [r4, #16]
 800783c:	f8cd a000 	str.w	sl, [sp]
 8007840:	464b      	mov	r3, r9
 8007842:	aa03      	add	r2, sp, #12
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fee6 	bl	8007618 <_printf_common>
 800784c:	3001      	adds	r0, #1
 800784e:	d14a      	bne.n	80078e6 <_printf_i+0x1f2>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	b004      	add	sp, #16
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	4833      	ldr	r0, [pc, #204]	@ (8007930 <_printf_i+0x23c>)
 8007864:	2778      	movs	r7, #120	@ 0x78
 8007866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	6831      	ldr	r1, [r6, #0]
 800786e:	061f      	lsls	r7, r3, #24
 8007870:	f851 5b04 	ldr.w	r5, [r1], #4
 8007874:	d402      	bmi.n	800787c <_printf_i+0x188>
 8007876:	065f      	lsls	r7, r3, #25
 8007878:	bf48      	it	mi
 800787a:	b2ad      	uxthmi	r5, r5
 800787c:	6031      	str	r1, [r6, #0]
 800787e:	07d9      	lsls	r1, r3, #31
 8007880:	bf44      	itt	mi
 8007882:	f043 0320 	orrmi.w	r3, r3, #32
 8007886:	6023      	strmi	r3, [r4, #0]
 8007888:	b11d      	cbz	r5, 8007892 <_printf_i+0x19e>
 800788a:	2310      	movs	r3, #16
 800788c:	e7ac      	b.n	80077e8 <_printf_i+0xf4>
 800788e:	4827      	ldr	r0, [pc, #156]	@ (800792c <_printf_i+0x238>)
 8007890:	e7e9      	b.n	8007866 <_printf_i+0x172>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f023 0320 	bic.w	r3, r3, #32
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	e7f6      	b.n	800788a <_printf_i+0x196>
 800789c:	4616      	mov	r6, r2
 800789e:	e7bd      	b.n	800781c <_printf_i+0x128>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	6961      	ldr	r1, [r4, #20]
 80078a6:	1d18      	adds	r0, r3, #4
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	062e      	lsls	r6, r5, #24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	d501      	bpl.n	80078b4 <_printf_i+0x1c0>
 80078b0:	6019      	str	r1, [r3, #0]
 80078b2:	e002      	b.n	80078ba <_printf_i+0x1c6>
 80078b4:	0668      	lsls	r0, r5, #25
 80078b6:	d5fb      	bpl.n	80078b0 <_printf_i+0x1bc>
 80078b8:	8019      	strh	r1, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4616      	mov	r6, r2
 80078c0:	e7bc      	b.n	800783c <_printf_i+0x148>
 80078c2:	6833      	ldr	r3, [r6, #0]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	6032      	str	r2, [r6, #0]
 80078c8:	681e      	ldr	r6, [r3, #0]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7f8 fc86 	bl	80001e0 <memchr>
 80078d4:	b108      	cbz	r0, 80078da <_printf_i+0x1e6>
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	2300      	movs	r3, #0
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e4:	e7aa      	b.n	800783c <_printf_i+0x148>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	4632      	mov	r2, r6
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0ad      	beq.n	8007850 <_printf_i+0x15c>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	d413      	bmi.n	8007922 <_printf_i+0x22e>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	4298      	cmp	r0, r3
 8007900:	bfb8      	it	lt
 8007902:	4618      	movlt	r0, r3
 8007904:	e7a6      	b.n	8007854 <_printf_i+0x160>
 8007906:	2301      	movs	r3, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d09d      	beq.n	8007850 <_printf_i+0x15c>
 8007914:	3501      	adds	r5, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9903      	ldr	r1, [sp, #12]
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	42ab      	cmp	r3, r5
 800791e:	dcf2      	bgt.n	8007906 <_printf_i+0x212>
 8007920:	e7eb      	b.n	80078fa <_printf_i+0x206>
 8007922:	2500      	movs	r5, #0
 8007924:	f104 0619 	add.w	r6, r4, #25
 8007928:	e7f5      	b.n	8007916 <_printf_i+0x222>
 800792a:	bf00      	nop
 800792c:	08007a69 	.word	0x08007a69
 8007930:	08007a7a 	.word	0x08007a7a

08007934 <memmove>:
 8007934:	4288      	cmp	r0, r1
 8007936:	b510      	push	{r4, lr}
 8007938:	eb01 0402 	add.w	r4, r1, r2
 800793c:	d902      	bls.n	8007944 <memmove+0x10>
 800793e:	4284      	cmp	r4, r0
 8007940:	4623      	mov	r3, r4
 8007942:	d807      	bhi.n	8007954 <memmove+0x20>
 8007944:	1e43      	subs	r3, r0, #1
 8007946:	42a1      	cmp	r1, r4
 8007948:	d008      	beq.n	800795c <memmove+0x28>
 800794a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800794e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007952:	e7f8      	b.n	8007946 <memmove+0x12>
 8007954:	4402      	add	r2, r0
 8007956:	4601      	mov	r1, r0
 8007958:	428a      	cmp	r2, r1
 800795a:	d100      	bne.n	800795e <memmove+0x2a>
 800795c:	bd10      	pop	{r4, pc}
 800795e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007966:	e7f7      	b.n	8007958 <memmove+0x24>

08007968 <memcpy>:
 8007968:	440a      	add	r2, r1
 800796a:	4291      	cmp	r1, r2
 800796c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007970:	d100      	bne.n	8007974 <memcpy+0xc>
 8007972:	4770      	bx	lr
 8007974:	b510      	push	{r4, lr}
 8007976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797e:	4291      	cmp	r1, r2
 8007980:	d1f9      	bne.n	8007976 <memcpy+0xe>
 8007982:	bd10      	pop	{r4, pc}

08007984 <_realloc_r>:
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	4680      	mov	r8, r0
 800798a:	4615      	mov	r5, r2
 800798c:	460c      	mov	r4, r1
 800798e:	b921      	cbnz	r1, 800799a <_realloc_r+0x16>
 8007990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	4611      	mov	r1, r2
 8007996:	f7ff bbb3 	b.w	8007100 <_malloc_r>
 800799a:	b92a      	cbnz	r2, 80079a8 <_realloc_r+0x24>
 800799c:	f7ff fc9a 	bl	80072d4 <_free_r>
 80079a0:	2400      	movs	r4, #0
 80079a2:	4620      	mov	r0, r4
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	f000 f81a 	bl	80079e0 <_malloc_usable_size_r>
 80079ac:	4285      	cmp	r5, r0
 80079ae:	4606      	mov	r6, r0
 80079b0:	d802      	bhi.n	80079b8 <_realloc_r+0x34>
 80079b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079b6:	d8f4      	bhi.n	80079a2 <_realloc_r+0x1e>
 80079b8:	4629      	mov	r1, r5
 80079ba:	4640      	mov	r0, r8
 80079bc:	f7ff fba0 	bl	8007100 <_malloc_r>
 80079c0:	4607      	mov	r7, r0
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0ec      	beq.n	80079a0 <_realloc_r+0x1c>
 80079c6:	42b5      	cmp	r5, r6
 80079c8:	462a      	mov	r2, r5
 80079ca:	4621      	mov	r1, r4
 80079cc:	bf28      	it	cs
 80079ce:	4632      	movcs	r2, r6
 80079d0:	f7ff ffca 	bl	8007968 <memcpy>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7ff fc7c 	bl	80072d4 <_free_r>
 80079dc:	463c      	mov	r4, r7
 80079de:	e7e0      	b.n	80079a2 <_realloc_r+0x1e>

080079e0 <_malloc_usable_size_r>:
 80079e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e4:	1f18      	subs	r0, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bfbc      	itt	lt
 80079ea:	580b      	ldrlt	r3, [r1, r0]
 80079ec:	18c0      	addlt	r0, r0, r3
 80079ee:	4770      	bx	lr

080079f0 <_sbrk>:
 80079f0:	4a04      	ldr	r2, [pc, #16]	@ (8007a04 <_sbrk+0x14>)
 80079f2:	6811      	ldr	r1, [r2, #0]
 80079f4:	4603      	mov	r3, r0
 80079f6:	b909      	cbnz	r1, 80079fc <_sbrk+0xc>
 80079f8:	4903      	ldr	r1, [pc, #12]	@ (8007a08 <_sbrk+0x18>)
 80079fa:	6011      	str	r1, [r2, #0]
 80079fc:	6810      	ldr	r0, [r2, #0]
 80079fe:	4403      	add	r3, r0
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4770      	bx	lr
 8007a04:	20000918 	.word	0x20000918
 8007a08:	20000920 	.word	0x20000920

08007a0c <_init>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr

08007a18 <_fini>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr

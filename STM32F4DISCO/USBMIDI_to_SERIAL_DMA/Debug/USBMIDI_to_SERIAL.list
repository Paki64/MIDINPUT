
USBMIDI_to_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008460  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008610  08008610  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008610  08008610  00009610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008618  08008618  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008618  08008618  00009618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800861c  0800861c  0000961c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008620  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  2000007c  0800869c  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  0800869c  0000aaf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001250f  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cc  00000000  00000000  0001c5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a07  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002299f  00000000  00000000  00020ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128b6  00000000  00000000  00043876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c84a6  00000000  00000000  0005612c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e5d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003960  00000000  00000000  0011e618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00121f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085d0 	.word	0x080085d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080085d0 	.word	0x080085d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 faa6 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f810 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8ec 	bl	80006a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f8ca 	bl	8000660 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80004cc:	f007 fc1c 	bl	8007d08 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f872 	bl	80005b8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80004d4:	f000 f89a 	bl	800060c <MX_USART6_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 fc42 	bl	8007d60 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    MIDI_Application();
 80004dc:	f007 fbd8 	bl	8007c90 <MIDI_Application>
    MX_USB_HOST_Process();
 80004e0:	bf00      	nop
 80004e2:	e7f9      	b.n	80004d8 <main+0x20>

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	@ 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f007 ffd6 	bl	80084a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b28      	ldr	r3, [pc, #160]	@ (80005b0 <SystemClock_Config+0xcc>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <SystemClock_Config+0xcc>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
 8000518:	4b25      	ldr	r3, [pc, #148]	@ (80005b0 <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <SystemClock_Config+0xd0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a21      	ldr	r2, [pc, #132]	@ (80005b4 <SystemClock_Config+0xd0>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000554:	2308      	movs	r3, #8
 8000556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000558:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000562:	2307      	movs	r3, #7
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f9ca 	bl	8003904 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000576:	f000 f8e3 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000586:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2105      	movs	r1, #5
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fc2b 	bl	8003df4 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a4:	f000 f8cc 	bl	8000740 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3750      	adds	r7, #80	@ 0x50
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <MX_USART2_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005c4:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
 80005c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_USART2_UART_Init+0x4c>)
 80005f0:	f003 fe20 	bl	8004234 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f8a1 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098
 8000608:	40004400 	.word	0x40004400

0800060c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <MX_USART6_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_USART6_UART_Init+0x4c>)
 8000644:	f003 fdf6 	bl	8004234 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f877 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000e0 	.word	0x200000e0
 800065c:	40011400 	.word	0x40011400

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_DMA_Init+0x3c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a0b      	ldr	r2, [pc, #44]	@ (800069c <MX_DMA_Init+0x3c>)
 8000670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_DMA_Init+0x3c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2011      	movs	r0, #17
 8000688:	f000 fb31 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800068c:	2011      	movs	r0, #17
 800068e:	f000 fb4a 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <MX_GPIO_Init+0x98>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_GPIO_Init+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	480b      	ldr	r0, [pc, #44]	@ (800073c <MX_GPIO_Init+0x9c>)
 8000710:	f000 ffaa 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_GPIO_Init+0x9c>)
 800072c:	f000 fe00 	bl	8001330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020800 	.word	0x40020800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 faa2 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a49      	ldr	r2, [pc, #292]	@ (80008e4 <HAL_UART_MspInit+0x144>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d15b      	bne.n	800087a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b48      	ldr	r3, [pc, #288]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a47      	ldr	r2, [pc, #284]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b45      	ldr	r3, [pc, #276]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a40      	ldr	r2, [pc, #256]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4835      	ldr	r0, [pc, #212]	@ (80008ec <HAL_UART_MspInit+0x14c>)
 8000816:	f000 fd8b 	bl	8001330 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800081a:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 800081c:	4a35      	ldr	r2, [pc, #212]	@ (80008f4 <HAL_UART_MspInit+0x154>)
 800081e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000820:	4b33      	ldr	r3, [pc, #204]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000822:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000826:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000828:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 800082a:	2240      	movs	r2, #64	@ 0x40
 800082c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b30      	ldr	r3, [pc, #192]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083c:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000842:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000848:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 800084a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800084e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800085c:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 800085e:	f000 fa7d 	bl	8000d5c <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000868:	f7ff ff6a 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000870:	639a      	str	r2, [r3, #56]	@ 0x38
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <HAL_UART_MspInit+0x150>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000878:	e030      	b.n	80008dc <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1e      	ldr	r2, [pc, #120]	@ (80008f8 <HAL_UART_MspInit+0x158>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d12b      	bne.n	80008dc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6453      	str	r3, [r2, #68]	@ 0x44
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000898:	f003 0320 	and.w	r3, r3, #32
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	4a0f      	ldr	r2, [pc, #60]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <HAL_UART_MspInit+0x148>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008bc:	23c0      	movs	r3, #192	@ 0xc0
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80008cc:	2308      	movs	r3, #8
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	@ (80008fc <HAL_UART_MspInit+0x15c>)
 80008d8:	f000 fd2a 	bl	8001330 <HAL_GPIO_Init>
}
 80008dc:	bf00      	nop
 80008de:	3730      	adds	r7, #48	@ 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	20000128 	.word	0x20000128
 80008f4:	400260a0 	.word	0x400260a0
 80008f8:	40011400 	.word	0x40011400
 80008fc:	40020800 	.word	0x40020800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <HardFault_Handler+0x4>

08000916 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091a:	bf00      	nop
 800091c:	e7fd      	b.n	800091a <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	bf00      	nop
 8000924:	e7fd      	b.n	8000922 <BusFault_Handler+0x4>

08000926 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092a:	bf00      	nop
 800092c:	e7fd      	b.n	800092a <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f8a8 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <DMA1_Stream6_IRQHandler+0x10>)
 800096a:	f000 faa5 	bl	8000eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000128 	.word	0x20000128

08000978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <OTG_FS_IRQHandler+0x10>)
 800097e:	f001 f96d 	bl	8001c5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200005c8 	.word	0x200005c8

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <SystemInit+0x28>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000996:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <SystemInit+0x28>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <SystemInit+0x28>)
 80009a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009a6:	609a      	str	r2, [r3, #8]
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
  ldr  r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd3 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f007 fd75 	bl	80084d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fd65 	bl	80004b8 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009f4:	08008620 	.word	0x08008620
  ldr  r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009fc:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000a00:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000a04:	20000af4 	.word	0x20000af4

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f94f 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fe86 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f967 	bl	8000d42 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f92f 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000188 	.word	0x20000188

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000188 	.word	0x20000188

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff feb6 	bl	8000ad8 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e099      	b.n	8000eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d98:	e00f      	b.n	8000dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9a:	f7ff fe9d 	bl	8000ad8 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d908      	bls.n	8000dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e078      	b.n	8000eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e8      	bne.n	8000d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <HAL_DMA_Init+0x158>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d107      	bne.n	8000e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f023 0307 	bic.w	r3, r3, #7
 8000e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d117      	bne.n	8000e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00e      	beq.n	8000e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f9e9 	bl	8001238 <DMA_CheckFifoParam>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2240      	movs	r2, #64	@ 0x40
 8000e70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e016      	b.n	8000eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f9a0 	bl	80011cc <DMA_CalcBaseAndBitshift>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e94:	223f      	movs	r2, #63	@ 0x3f
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f010803f 	.word	0xf010803f

08000eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8001100 <HAL_DMA_IRQHandler+0x248>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8001104 <HAL_DMA_IRQHandler+0x24c>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0a9b      	lsrs	r3, r3, #10
 8000ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01a      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0204 	bic.w	r2, r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f10:	2208      	movs	r2, #8
 8000f12:	409a      	lsls	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d012      	beq.n	8000f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00b      	beq.n	8000f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f46:	2201      	movs	r2, #1
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f52:	f043 0202 	orr.w	r2, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f5e:	2204      	movs	r2, #4
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d012      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f88:	f043 0204 	orr.w	r2, r3, #4
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f94:	2210      	movs	r2, #16
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d043      	beq.n	8001028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d03c      	beq.n	8001028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d018      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d108      	bne.n	8000fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d024      	beq.n	8001028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	4798      	blx	r3
 8000fe6:	e01f      	b.n	8001028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01b      	beq.n	8001028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
 8000ff8:	e016      	b.n	8001028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0208 	bic.w	r2, r2, #8
 8001016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800102c:	2220      	movs	r2, #32
 800102e:	409a      	lsls	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 808f 	beq.w	8001158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 8087 	beq.w	8001158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800104e:	2220      	movs	r2, #32
 8001050:	409a      	lsls	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b05      	cmp	r3, #5
 8001060:	d136      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0216 	bic.w	r2, r2, #22
 8001070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <HAL_DMA_IRQHandler+0x1da>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0208 	bic.w	r2, r2, #8
 80010a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a6:	223f      	movs	r2, #63	@ 0x3f
 80010a8:	409a      	lsls	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d07e      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
        }
        return;
 80010ce:	e079      	b.n	80011c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d01d      	beq.n	800111a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10d      	bne.n	8001108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d031      	beq.n	8001158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
 80010fc:	e02c      	b.n	8001158 <HAL_DMA_IRQHandler+0x2a0>
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000
 8001104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
 8001118:	e01e      	b.n	8001158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10f      	bne.n	8001148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0210 	bic.w	r2, r2, #16
 8001136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115c:	2b00      	cmp	r3, #0
 800115e:	d032      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d022      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2205      	movs	r2, #5
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d307      	bcc.n	80011a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f2      	bne.n	8001184 <HAL_DMA_IRQHandler+0x2cc>
 800119e:	e000      	b.n	80011a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	e000      	b.n	80011c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80011c4:	bf00      	nop
    }
  }
}
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3b10      	subs	r3, #16
 80011dc:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <DMA_CalcBaseAndBitshift+0x64>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <DMA_CalcBaseAndBitshift+0x68>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d909      	bls.n	800120e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	1d1a      	adds	r2, r3, #4
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	659a      	str	r2, [r3, #88]	@ 0x58
 800120c:	e007      	b.n	800121e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	aaaaaaab 	.word	0xaaaaaaab
 8001234:	08008608 	.word	0x08008608

08001238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d11f      	bne.n	8001292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d856      	bhi.n	8001306 <DMA_CheckFifoParam+0xce>
 8001258:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <DMA_CheckFifoParam+0x28>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001271 	.word	0x08001271
 8001264:	08001283 	.word	0x08001283
 8001268:	08001271 	.word	0x08001271
 800126c:	08001307 	.word	0x08001307
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d046      	beq.n	800130a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001280:	e043      	b.n	800130a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800128a:	d140      	bne.n	800130e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001290:	e03d      	b.n	800130e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800129a:	d121      	bne.n	80012e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d837      	bhi.n	8001312 <DMA_CheckFifoParam+0xda>
 80012a2:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <DMA_CheckFifoParam+0x70>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012bf 	.word	0x080012bf
 80012b0:	080012b9 	.word	0x080012b9
 80012b4:	080012d1 	.word	0x080012d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
      break;
 80012bc:	e030      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d025      	beq.n	8001316 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012ce:	e022      	b.n	8001316 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80012d8:	d11f      	bne.n	800131a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80012de:	e01c      	b.n	800131a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d903      	bls.n	80012ee <DMA_CheckFifoParam+0xb6>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d003      	beq.n	80012f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80012ec:	e018      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
      break;
 80012f2:	e015      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00e      	beq.n	800131e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
      break;
 8001304:	e00b      	b.n	800131e <DMA_CheckFifoParam+0xe6>
      break;
 8001306:	bf00      	nop
 8001308:	e00a      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;
 800130a:	bf00      	nop
 800130c:	e008      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;
 800130e:	bf00      	nop
 8001310:	e006      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;
 8001312:	bf00      	nop
 8001314:	e004      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;
 8001316:	bf00      	nop
 8001318:	e002      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;   
 800131a:	bf00      	nop
 800131c:	e000      	b.n	8001320 <DMA_CheckFifoParam+0xe8>
      break;
 800131e:	bf00      	nop
    }
  } 
  
  return status; 
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e16b      	b.n	8001624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 815a 	bne.w	800161e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80b4 	beq.w	800161e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b60      	ldr	r3, [pc, #384]	@ (800163c <HAL_GPIO_Init+0x30c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a5f      	ldr	r2, [pc, #380]	@ (800163c <HAL_GPIO_Init+0x30c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b5d      	ldr	r3, [pc, #372]	@ (800163c <HAL_GPIO_Init+0x30c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001640 <HAL_GPIO_Init+0x310>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_GPIO_Init+0x314>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d02b      	beq.n	8001556 <HAL_GPIO_Init+0x226>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	@ (8001648 <HAL_GPIO_Init+0x318>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d025      	beq.n	8001552 <HAL_GPIO_Init+0x222>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	@ (800164c <HAL_GPIO_Init+0x31c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01f      	beq.n	800154e <HAL_GPIO_Init+0x21e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	@ (8001650 <HAL_GPIO_Init+0x320>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0x21a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	@ (8001654 <HAL_GPIO_Init+0x324>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0x216>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	@ (8001658 <HAL_GPIO_Init+0x328>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00d      	beq.n	8001542 <HAL_GPIO_Init+0x212>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	@ (800165c <HAL_GPIO_Init+0x32c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	@ (8001660 <HAL_GPIO_Init+0x330>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_GPIO_Init+0x20a>
 8001536:	2307      	movs	r3, #7
 8001538:	e00e      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800153a:	2308      	movs	r3, #8
 800153c:	e00c      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800153e:	2306      	movs	r3, #6
 8001540:	e00a      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001542:	2305      	movs	r3, #5
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001546:	2304      	movs	r3, #4
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x228>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x228>
 8001556:	2300      	movs	r3, #0
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	@ (8001640 <HAL_GPIO_Init+0x310>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_GPIO_Init+0x334>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a32      	ldr	r2, [pc, #200]	@ (8001664 <HAL_GPIO_Init+0x334>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001618:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <HAL_GPIO_Init+0x334>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f67f ae90 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40021400 	.word	0x40021400
 800165c:	40021800 	.word	0x40021800
 8001660:	40021c00 	.word	0x40021c00
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af02      	add	r7, sp, #8
 80016a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e059      	b.n	8001760 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f006 fb82 	bl	8007dd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016da:	d102      	bne.n	80016e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fa25 	bl	8004b36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7c1a      	ldrb	r2, [r3, #16]
 80016f4:	f88d 2000 	strb.w	r2, [sp]
 80016f8:	3304      	adds	r3, #4
 80016fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fc:	f003 f9a6 	bl	8004a4c <USB_CoreInit>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e026      	b.n	8001760 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fa1d 	bl	8004b58 <USB_SetCurrentMode>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e017      	b.n	8001760 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7c1a      	ldrb	r2, [r3, #16]
 8001738:	f88d 2000 	strb.w	r2, [sp]
 800173c:	3304      	adds	r3, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	f003 fbc0 	bl	8004ec4 <USB_HostInit>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2202      	movs	r2, #2
 800174e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e004      	b.n	8001760 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af04      	add	r7, sp, #16
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	70fb      	strb	r3, [r7, #3]
 800177a:	460b      	mov	r3, r1
 800177c:	70bb      	strb	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001782:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001784:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_HCD_HC_Init+0x2c>
 8001790:	2302      	movs	r3, #2
 8001792:	e09d      	b.n	80018d0 <HAL_HCD_HC_Init+0x168>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3319      	adds	r3, #25
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3314      	adds	r3, #20
 80017c0:	787a      	ldrb	r2, [r7, #1]
 80017c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3315      	adds	r3, #21
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3326      	adds	r3, #38	@ 0x26
 80017e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3316      	adds	r3, #22
 8001806:	4602      	mov	r2, r0
 8001808:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fbc8 	bl	8001fa4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da0a      	bge.n	8001832 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3317      	adds	r3, #23
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e009      	b.n	8001846 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3317      	adds	r3, #23
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fc9e 	bl	800518c <USB_GetHostSpeed>
 8001850:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001852:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10b      	bne.n	8001872 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800185a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_HCD_HC_Init+0x10a>
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2bbc      	cmp	r3, #188	@ 0xbc
 800186c:	d901      	bls.n	8001872 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800186e:	23bc      	movs	r3, #188	@ 0xbc
 8001870:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3318      	adds	r3, #24
 8001882:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	b298      	uxth	r0, r3
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3328      	adds	r3, #40	@ 0x28
 800189c:	4602      	mov	r2, r0
 800189e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	787c      	ldrb	r4, [r7, #1]
 80018aa:	78ba      	ldrb	r2, [r7, #2]
 80018ac:	78f9      	ldrb	r1, [r7, #3]
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	4623      	mov	r3, r4
 80018be:	f003 fc8d 	bl	80051dc <USB_HC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_HCD_HC_Halt+0x1e>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e00f      	b.n	8001916 <HAL_HCD_HC_Halt+0x3e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f81f 	bl	800594a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4603      	mov	r3, r0
 8001930:	70fb      	strb	r3, [r7, #3]
 8001932:	460b      	mov	r3, r1
 8001934:	70bb      	strb	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3317      	adds	r3, #23
 800194a:	78ba      	ldrb	r2, [r7, #2]
 800194c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3326      	adds	r3, #38	@ 0x26
 800195e:	787a      	ldrb	r2, [r7, #1]
 8001960:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001962:	7c3b      	ldrb	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d114      	bne.n	8001992 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	332a      	adds	r3, #42	@ 0x2a
 8001978:	2203      	movs	r2, #3
 800197a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3319      	adds	r3, #25
 800198c:	7f3a      	ldrb	r2, [r7, #28]
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e009      	b.n	80019a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	332a      	adds	r3, #42	@ 0x2a
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019a6:	787b      	ldrb	r3, [r7, #1]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	f200 8102 	bhi.w	8001bb2 <HAL_HCD_HC_SubmitRequest+0x292>
 80019ae:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	08001b9d 	.word	0x08001b9d
 80019bc:	08001a89 	.word	0x08001a89
 80019c0:	08001b13 	.word	0x08001b13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019c4:	7c3b      	ldrb	r3, [r7, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	f040 80f5 	bne.w	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019cc:	78bb      	ldrb	r3, [r7, #2]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12d      	bne.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019d2:	8b3b      	ldrh	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	333d      	adds	r3, #61	@ 0x3d
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	333d      	adds	r3, #61	@ 0x3d
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	332a      	adds	r3, #42	@ 0x2a
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a16:	e0ce      	b.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	332a      	adds	r3, #42	@ 0x2a
 8001a28:	2202      	movs	r2, #2
 8001a2a:	701a      	strb	r2, [r3, #0]
      break;
 8001a2c:	e0c3      	b.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	331a      	adds	r3, #26
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	f040 80b8 	bne.w	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	333c      	adds	r3, #60	@ 0x3c
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332a      	adds	r3, #42	@ 0x2a
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
      break;
 8001a70:	e0a1      	b.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	332a      	adds	r3, #42	@ 0x2a
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e096      	b.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a88:	78bb      	ldrb	r3, [r7, #2]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d120      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	333d      	adds	r3, #61	@ 0x3d
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	332a      	adds	r3, #42	@ 0x2a
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ab8:	e07e      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	332a      	adds	r3, #42	@ 0x2a
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e073      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	333c      	adds	r3, #60	@ 0x3c
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	332a      	adds	r3, #42	@ 0x2a
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	e05d      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	332a      	adds	r3, #42	@ 0x2a
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
      break;
 8001b10:	e052      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d120      	bne.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	333d      	adds	r3, #61	@ 0x3d
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	332a      	adds	r3, #42	@ 0x2a
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b42:	e039      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	332a      	adds	r3, #42	@ 0x2a
 8001b54:	2202      	movs	r2, #2
 8001b56:	701a      	strb	r2, [r3, #0]
      break;
 8001b58:	e02e      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	333c      	adds	r3, #60	@ 0x3c
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332a      	adds	r3, #42	@ 0x2a
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
      break;
 8001b84:	e018      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	332a      	adds	r3, #42	@ 0x2a
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e00d      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	332a      	adds	r3, #42	@ 0x2a
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
      break;
 8001bb0:	e002      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001bb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	332c      	adds	r3, #44	@ 0x2c
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	8b39      	ldrh	r1, [r7, #24]
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4403      	add	r3, r0
 8001bdc:	3334      	adds	r3, #52	@ 0x34
 8001bde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	334c      	adds	r3, #76	@ 0x4c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3338      	adds	r3, #56	@ 0x38
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3315      	adds	r3, #21
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	334d      	adds	r3, #77	@ 0x4d
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3310      	adds	r3, #16
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	1d19      	adds	r1, r3, #4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	799b      	ldrb	r3, [r3, #6]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f003 fbf2 	bl	8005434 <USB_HC_StartXfer>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop

08001c5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 f8e6 	bl	8004e44 <USB_GetMode>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	f040 80fb 	bne.w	8001e76 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 f8a9 	bl	8004ddc <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80f1 	beq.w	8001e74 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f8a0 	bl	8004ddc <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ca6:	d104      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f890 	bl	8004ddc <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc6:	d104      	bne.n	8001cd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 f880 	bl	8004ddc <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ce6:	d104      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 f870 	bl	8004ddc <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d103      	bne.n	8001d0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 f862 	bl	8004ddc <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d22:	d120      	bne.n	8001d66 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d113      	bne.n	8001d66 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d3e:	2110      	movs	r1, #16
 8001d40:	6938      	ldr	r0, [r7, #16]
 8001d42:	f002 ff55 	bl	8004bf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d46:	6938      	ldr	r0, [r7, #16]
 8001d48:	f002 ff84 	bl	8004c54 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7a5b      	ldrb	r3, [r3, #9]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d105      	bne.n	8001d60 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 f976 	bl	800504c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f006 f8b3 	bl	8007ecc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 f836 	bl	8004ddc <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7a:	d102      	bne.n	8001d82 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f001 fd4d 	bl	800381c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 f828 	bl	8004ddc <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d106      	bne.n	8001da4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f006 f87c 	bl	8007e94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2208      	movs	r2, #8
 8001da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 f817 	bl	8004ddc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001db8:	d139      	bne.n	8001e2e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fdb2 	bl	8005928 <USB_HC_ReadInterrupt>
 8001dc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e025      	b.n	8001e18 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d018      	beq.n	8001e12 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001df6:	d106      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f905 	bl	800200e <HCD_HC_IN_IRQHandler>
 8001e04:	e005      	b.n	8001e12 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 ff67 	bl	8002ce0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	795b      	ldrb	r3, [r3, #5]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d3d3      	bcc.n	8001dcc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 ffd2 	bl	8004ddc <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d101      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x1ea>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_HCD_IRQHandler+0x1ec>
 8001e46:	2300      	movs	r3, #0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d014      	beq.n	8001e76 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0210 	bic.w	r2, r2, #16
 8001e5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f001 fbfe 	bl	800365e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0210 	orr.w	r2, r2, #16
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	e000      	b.n	8001e76 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e74:	bf00      	nop
    }
  }
}
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_HCD_Start+0x16>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e013      	b.n	8001eba <HAL_HCD_Start+0x3e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 f93a 	bl	800511a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fe32 	bl	8004b14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_Stop+0x16>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e00d      	b.n	8001ef4 <HAL_HCD_Stop+0x32>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fe8d 	bl	8005c04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f8dc 	bl	80050c6 <USB_ResetPort>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	334c      	adds	r3, #76	@ 0x4c
 8001f34:	781b      	ldrb	r3, [r3, #0]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3338      	adds	r3, #56	@ 0x38
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 f91e 	bl	80051ba <USB_GetCurrentFrame>
 8001f7e:	4603      	mov	r3, r0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 f8f9 	bl	800518c <USB_GetHostSpeed>
 8001f9a:	4603      	mov	r3, r0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	331a      	adds	r3, #26
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	331b      	adds	r3, #27
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3325      	adds	r3, #37	@ 0x25
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3324      	adds	r3, #36	@ 0x24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fee8 	bl	8004e02 <USB_ReadChInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11a      	bne.n	8002072 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002048:	461a      	mov	r2, r3
 800204a:	2304      	movs	r3, #4
 800204c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	334d      	adds	r3, #77	@ 0x4d
 800205e:	2207      	movs	r2, #7
 8002060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fc6d 	bl	800594a <USB_HC_Halt>
 8002070:	e09e      	b.n	80021b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fec1 	bl	8004e02 <USB_ReadChInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208a:	d11b      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002098:	461a      	mov	r2, r3
 800209a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800209e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	334d      	adds	r3, #77	@ 0x4d
 80020b0:	2208      	movs	r2, #8
 80020b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fc44 	bl	800594a <USB_HC_Halt>
 80020c2:	e075      	b.n	80021b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fe98 	bl	8004e02 <USB_ReadChInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11a      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e8:	461a      	mov	r2, r3
 80020ea:	2308      	movs	r3, #8
 80020ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334d      	adds	r3, #77	@ 0x4d
 80020fe:	2206      	movs	r2, #6
 8002100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fc1d 	bl	800594a <USB_HC_Halt>
 8002110:	e04e      	b.n	80021b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fe71 	bl	8004e02 <USB_ReadChInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212a:	d11b      	bne.n	8002164 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	334d      	adds	r3, #77	@ 0x4d
 8002150:	2209      	movs	r2, #9
 8002152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fbf4 	bl	800594a <USB_HC_Halt>
 8002162:	e025      	b.n	80021b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fe48 	bl	8004e02 <USB_ReadChInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b80      	cmp	r3, #128	@ 0x80
 800217a:	d119      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	334d      	adds	r3, #77	@ 0x4d
 800219e:	2207      	movs	r2, #7
 80021a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fbcd 	bl	800594a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fe22 	bl	8004e02 <USB_ReadChInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021c8:	d112      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fbb9 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	f000 bd75 	b.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fe02 	bl	8004e02 <USB_ReadChInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	f040 8128 	bne.w	800245a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	2320      	movs	r3, #32
 800221a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	331b      	adds	r3, #27
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d119      	bne.n	8002266 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	331b      	adds	r3, #27
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	0151      	lsls	r1, r2, #5
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	440a      	add	r2, r1
 800225c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002264:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	799b      	ldrb	r3, [r3, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01b      	beq.n	80022a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3330      	adds	r3, #48	@ 0x30
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	1ac9      	subs	r1, r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4403      	add	r3, r0
 80022a2:	3338      	adds	r3, #56	@ 0x38
 80022a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	334d      	adds	r3, #77	@ 0x4d
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3344      	adds	r3, #68	@ 0x44
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3326      	adds	r3, #38	@ 0x26
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3326      	adds	r3, #38	@ 0x26
 8002306:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002308:	2b02      	cmp	r3, #2
 800230a:	d110      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fb18 	bl	800594a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002326:	461a      	mov	r2, r3
 8002328:	2310      	movs	r3, #16
 800232a:	6093      	str	r3, [r2, #8]
 800232c:	e03d      	b.n	80023aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3326      	adds	r3, #38	@ 0x26
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d00a      	beq.n	800235a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3326      	adds	r3, #38	@ 0x26
 8002354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002356:	2b01      	cmp	r3, #1
 8002358:	d127      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	0151      	lsls	r1, r2, #5
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	440a      	add	r2, r1
 8002370:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002378:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	334c      	adds	r3, #76	@ 0x4c
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	334c      	adds	r3, #76	@ 0x4c
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f005 fd9f 	bl	8007ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	799b      	ldrb	r3, [r3, #6]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d13b      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3338      	adds	r3, #56	@ 0x38
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4403      	add	r3, r0
 80023d2:	3328      	adds	r3, #40	@ 0x28
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	440b      	add	r3, r1
 80023d8:	1e59      	subs	r1, r3, #1
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4403      	add	r3, r0
 80023e8:	3328      	adds	r3, #40	@ 0x28
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8470 	beq.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333c      	adds	r3, #60	@ 0x3c
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	@ 0x3c
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	f000 bc58 	b.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	333c      	adds	r3, #60	@ 0x3c
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2d8      	uxtb	r0, r3
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	333c      	adds	r3, #60	@ 0x3c
 8002452:	4602      	mov	r2, r0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	f000 bc40 	b.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fccd 	bl	8004e02 <USB_ReadChInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d131      	bne.n	80024d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	2320      	movs	r3, #32
 8002482:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	331a      	adds	r3, #26
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	f040 841f 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	331b      	adds	r3, #27
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334d      	adds	r3, #77	@ 0x4d
 80024c0:	2203      	movs	r2, #3
 80024c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fa3c 	bl	800594a <USB_HC_Halt>
 80024d2:	f000 bc02 	b.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fc8f 	bl	8004e02 <USB_ReadChInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8305 	bne.w	8002afa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	2302      	movs	r3, #2
 8002500:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	334d      	adds	r3, #77	@ 0x4d
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d114      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	334d      	adds	r3, #77	@ 0x4d
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	@ 0x4c
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e2cc      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	334d      	adds	r3, #77	@ 0x4d
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b06      	cmp	r3, #6
 8002556:	d114      	bne.n	8002582 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334d      	adds	r3, #77	@ 0x4d
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334c      	adds	r3, #76	@ 0x4c
 800257c:	2205      	movs	r2, #5
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e2ac      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334d      	adds	r3, #77	@ 0x4d
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b07      	cmp	r3, #7
 8002596:	d00b      	beq.n	80025b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	@ 0x4d
 80025a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	f040 80a6 	bne.w	80026fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334d      	adds	r3, #77	@ 0x4d
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3344      	adds	r3, #68	@ 0x44
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1c59      	adds	r1, r3, #1
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4403      	add	r3, r0
 80025e4:	3344      	adds	r3, #68	@ 0x44
 80025e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3344      	adds	r3, #68	@ 0x44
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d943      	bls.n	8002686 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3344      	adds	r3, #68	@ 0x44
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	331a      	adds	r3, #26
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d123      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	331c      	adds	r3, #28
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	0151      	lsls	r1, r2, #5
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	440a      	add	r2, r1
 8002666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334c      	adds	r3, #76	@ 0x4c
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002684:	e229      	b.n	8002ada <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334c      	adds	r3, #76	@ 0x4c
 8002696:	2202      	movs	r2, #2
 8002698:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3326      	adds	r3, #38	@ 0x26
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	@ 0x26
 80026c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	f040 8209 	bne.w	8002ada <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026fa:	e1ee      	b.n	8002ada <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	334d      	adds	r3, #77	@ 0x4d
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b05      	cmp	r3, #5
 8002710:	f040 80c8 	bne.w	80028a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	2202      	movs	r2, #2
 8002726:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	331b      	adds	r3, #27
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	f040 81ce 	bne.w	8002adc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3326      	adds	r3, #38	@ 0x26
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d16b      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3348      	adds	r3, #72	@ 0x48
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	1c59      	adds	r1, r3, #1
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4403      	add	r3, r0
 8002776:	3348      	adds	r3, #72	@ 0x48
 8002778:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3348      	adds	r3, #72	@ 0x48
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d943      	bls.n	8002818 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3348      	adds	r3, #72	@ 0x48
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	331b      	adds	r3, #27
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3344      	adds	r3, #68	@ 0x44
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d809      	bhi.n	80027e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	331c      	adds	r3, #28
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	0151      	lsls	r1, r2, #5
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	440a      	add	r2, r1
 80027f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002800:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	334c      	adds	r3, #76	@ 0x4c
 8002812:	2204      	movs	r2, #4
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e014      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334c      	adds	r3, #76	@ 0x4c
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e009      	b.n	8002842 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	334c      	adds	r3, #76	@ 0x4c
 800283e:	2202      	movs	r2, #2
 8002840:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3326      	adds	r3, #38	@ 0x26
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 8136 	bne.w	8002adc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800288e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e11b      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	f040 8081 	bne.w	80029be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	334d      	adds	r3, #77	@ 0x4d
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	331b      	adds	r3, #27
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80fa 	bne.w	8002adc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334c      	adds	r3, #76	@ 0x4c
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	440a      	add	r2, r1
 8002912:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	440a      	add	r2, r1
 8002932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800293a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	0151      	lsls	r1, r2, #5
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	440a      	add	r2, r1
 8002952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002956:	f023 0320 	bic.w	r3, r3, #32
 800295a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3326      	adds	r3, #38	@ 0x26
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3326      	adds	r3, #38	@ 0x26
 8002982:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 80a9 	bne.w	8002adc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e08e      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	334d      	adds	r3, #77	@ 0x4d
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d143      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	@ 0x4d
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334c      	adds	r3, #76	@ 0x4c
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3326      	adds	r3, #38	@ 0x26
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3326      	adds	r3, #38	@ 0x26
 8002a22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d159      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e03f      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d126      	bne.n	8002ac0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	334d      	adds	r3, #77	@ 0x4d
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3344      	adds	r3, #68	@ 0x44
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c59      	adds	r1, r3, #1
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4403      	add	r3, r0
 8002aa6:	3344      	adds	r3, #68	@ 0x44
 8002aa8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	334c      	adds	r3, #76	@ 0x4c
 8002aba:	2204      	movs	r2, #4
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e00d      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	334d      	adds	r3, #77	@ 0x4d
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	f000 8100 	beq.w	8002cd8 <HCD_HC_IN_IRQHandler+0xcca>
 8002ad8:	e000      	b.n	8002adc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ada:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334c      	adds	r3, #76	@ 0x4c
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f005 f9f8 	bl	8007ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002af8:	e0ef      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 f97d 	bl	8004e02 <USB_ReadChInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	d12f      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2340      	movs	r3, #64	@ 0x40
 8002b22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	2205      	movs	r2, #5
 8002b36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	331a      	adds	r3, #26
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3344      	adds	r3, #68	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 feed 	bl	800594a <USB_HC_Halt>
 8002b70:	e0b3      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 f941 	bl	8004e02 <USB_ReadChInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	f040 80a7 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3326      	adds	r3, #38	@ 0x26
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d11b      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3344      	adds	r3, #68	@ 0x44
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334d      	adds	r3, #77	@ 0x4d
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 feb9 	bl	800594a <USB_HC_Halt>
 8002bd8:	e03f      	b.n	8002c5a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3326      	adds	r3, #38	@ 0x26
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3326      	adds	r3, #38	@ 0x26
 8002c00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d129      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3344      	adds	r3, #68	@ 0x44
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	799b      	ldrb	r3, [r3, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	331b      	adds	r3, #27
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334d      	adds	r3, #77	@ 0x4d
 8002c48:	2204      	movs	r2, #4
 8002c4a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fe78 	bl	800594a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331b      	adds	r3, #27
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d129      	bne.n	8002cc4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	0151      	lsls	r1, r2, #5
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	440a      	add	r2, r1
 8002c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cbe:	f043 0320 	orr.w	r3, r3, #32
 8002cc2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	6093      	str	r3, [r2, #8]
 8002cd6:	e000      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002cd8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 f87f 	bl	8004e02 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d11b      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	334d      	adds	r3, #77	@ 0x4d
 8002d30:	2207      	movs	r2, #7
 8002d32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 fe04 	bl	800594a <USB_HC_Halt>
 8002d42:	f000 bc89 	b.w	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f857 	bl	8004e02 <USB_ReadChInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	f040 8082 	bne.w	8002e64 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2320      	movs	r3, #32
 8002d70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3319      	adds	r3, #25
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d124      	bne.n	8002dd2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3319      	adds	r3, #25
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334c      	adds	r3, #76	@ 0x4c
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	334d      	adds	r3, #77	@ 0x4d
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fdbc 	bl	800594a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	331a      	adds	r3, #26
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 8437 	bne.w	8003658 <HCD_HC_OUT_IRQHandler+0x978>
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	331b      	adds	r3, #27
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 842b 	bne.w	8003658 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3326      	adds	r3, #38	@ 0x26
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d009      	beq.n	8002e2c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	331b      	adds	r3, #27
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	@ 0x4d
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fd7e 	bl	800594a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3344      	adds	r3, #68	@ 0x44
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e3f9      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 ffc8 	bl	8004e02 <USB_ReadChInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e7c:	d111      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fd55 	bl	800594a <USB_HC_Halt>
 8002ea0:	e3da      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 ffa9 	bl	8004e02 <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d168      	bne.n	8002f8c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	@ 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 ff93 	bl	8004e02 <USB_ReadChInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b40      	cmp	r3, #64	@ 0x40
 8002ee4:	d112      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3319      	adds	r3, #25
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	2340      	movs	r3, #64	@ 0x40
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	331b      	adds	r3, #27
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	331b      	adds	r3, #27
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f54:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2301      	movs	r3, #1
 8002f66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334d      	adds	r3, #77	@ 0x4d
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fce0 	bl	800594a <USB_HC_Halt>
 8002f8a:	e365      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 ff34 	bl	8004e02 <USB_ReadChInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa0:	2b40      	cmp	r3, #64	@ 0x40
 8002fa2:	d139      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334d      	adds	r3, #77	@ 0x4d
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	331a      	adds	r3, #26
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3319      	adds	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3344      	adds	r3, #68	@ 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fca3 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2340      	movs	r3, #64	@ 0x40
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e31f      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f001 feee 	bl	8004e02 <USB_ReadChInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d11a      	bne.n	8003066 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2308      	movs	r3, #8
 8003040:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	334d      	adds	r3, #77	@ 0x4d
 8003052:	2206      	movs	r2, #6
 8003054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fc73 	bl	800594a <USB_HC_Halt>
 8003064:	e2f8      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f001 fec7 	bl	8004e02 <USB_ReadChInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d144      	bne.n	8003108 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3344      	adds	r3, #68	@ 0x44
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	334d      	adds	r3, #77	@ 0x4d
 80030a2:	2204      	movs	r2, #4
 80030a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3319      	adds	r3, #25
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d114      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3318      	adds	r3, #24
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3319      	adds	r3, #25
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 fc2b 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003100:	461a      	mov	r2, r3
 8003102:	2310      	movs	r3, #16
 8003104:	6093      	str	r3, [r2, #8]
 8003106:	e2a7      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fe76 	bl	8004e02 <USB_ReadChInterrupts>
 8003116:	4603      	mov	r3, r0
 8003118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311c:	2b80      	cmp	r3, #128	@ 0x80
 800311e:	f040 8083 	bne.w	8003228 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	799b      	ldrb	r3, [r3, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	2207      	movs	r2, #7
 800313c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f002 fbff 	bl	800594a <USB_HC_Halt>
 800314c:	e062      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	@ 0x44
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	1c59      	adds	r1, r3, #1
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	3344      	adds	r3, #68	@ 0x44
 8003170:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3344      	adds	r3, #68	@ 0x44
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d922      	bls.n	80031ce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3344      	adds	r3, #68	@ 0x44
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	334c      	adds	r3, #76	@ 0x4c
 80031ac:	2204      	movs	r2, #4
 80031ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334c      	adds	r3, #76	@ 0x4c
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f004 fe8e 	bl	8007ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031cc:	e022      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334c      	adds	r3, #76	@ 0x4c
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	6093      	str	r3, [r2, #8]
 8003226:	e217      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f001 fde6 	bl	8004e02 <USB_ReadChInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003240:	d11b      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2209      	movs	r2, #9
 8003254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fb73 	bl	800594a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003276:	6093      	str	r3, [r2, #8]
 8003278:	e1ee      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f001 fdbd 	bl	8004e02 <USB_ReadChInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 81df 	bne.w	8003652 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2302      	movs	r3, #2
 80032a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8093 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334d      	adds	r3, #77	@ 0x4d
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334c      	adds	r3, #76	@ 0x4c
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3326      	adds	r3, #38	@ 0x26
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d00b      	beq.n	8003314 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3326      	adds	r3, #38	@ 0x26
 800330c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	f040 8190 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	799b      	ldrb	r3, [r3, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	333d      	adds	r3, #61	@ 0x3d
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2d8      	uxtb	r0, r3
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	333d      	adds	r3, #61	@ 0x3d
 8003344:	4602      	mov	r2, r0
 8003346:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	799b      	ldrb	r3, [r3, #6]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 8171 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3334      	adds	r3, #52	@ 0x34
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8165 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3334      	adds	r3, #52	@ 0x34
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3328      	adds	r3, #40	@ 0x28
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	440b      	add	r3, r1
 8003390:	1e59      	subs	r1, r3, #1
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	3328      	adds	r3, #40	@ 0x28
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 813f 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	333d      	adds	r3, #61	@ 0x3d
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	f083 0301 	eor.w	r3, r3, #1
 80033ce:	b2d8      	uxtb	r0, r3
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	333d      	adds	r3, #61	@ 0x3d
 80033de:	4602      	mov	r2, r0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e127      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d120      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334d      	adds	r3, #77	@ 0x4d
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	331b      	adds	r3, #27
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 8107 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e0fb      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	@ 0x4d
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d13a      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	334c      	adds	r3, #76	@ 0x4c
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	331b      	adds	r3, #27
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 80d1 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	331b      	adds	r3, #27
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	0151      	lsls	r1, r2, #5
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	440a      	add	r2, r1
 80034bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	e0b5      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	334d      	adds	r3, #77	@ 0x4d
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d114      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334d      	adds	r3, #77	@ 0x4d
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e095      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d114      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	334d      	adds	r3, #77	@ 0x4d
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	@ 0x4c
 8003542:	2205      	movs	r2, #5
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e075      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334d      	adds	r3, #77	@ 0x4d
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b07      	cmp	r3, #7
 800355c:	d00a      	beq.n	8003574 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334d      	adds	r3, #77	@ 0x4d
 800356e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003570:	2b09      	cmp	r3, #9
 8003572:	d170      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334d      	adds	r3, #77	@ 0x4d
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	@ 0x44
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4403      	add	r3, r0
 80035a8:	3344      	adds	r3, #68	@ 0x44
 80035aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3344      	adds	r3, #68	@ 0x44
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d914      	bls.n	80035ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3344      	adds	r3, #68	@ 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334c      	adds	r3, #76	@ 0x4c
 80035e6:	2204      	movs	r2, #4
 80035e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ea:	e022      	b.n	8003632 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003616:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003632:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 fc4c 	bl	8007ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003650:	e002      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003656:	bf00      	nop
  }
}
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	@ 0x28
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	0c5b      	lsrs	r3, r3, #17
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d004      	beq.n	80036a4 <HCD_RXQLVL_IRQHandler+0x46>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b05      	cmp	r3, #5
 800369e:	f000 80b6 	beq.w	800380e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036a2:	e0b7      	b.n	8003814 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80b3 	beq.w	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	332c      	adds	r3, #44	@ 0x2c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a7 	beq.w	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3338      	adds	r3, #56	@ 0x38
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	18d1      	adds	r1, r2, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	3334      	adds	r3, #52	@ 0x34
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4299      	cmp	r1, r3
 80036ee:	f200 8083 	bhi.w	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	332c      	adds	r3, #44	@ 0x2c
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	b292      	uxth	r2, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f001 fb0d 	bl	8004d2c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	332c      	adds	r3, #44	@ 0x2c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	18d1      	adds	r1, r2, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	332c      	adds	r3, #44	@ 0x2c
 8003738:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3338      	adds	r3, #56	@ 0x38
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	18d1      	adds	r1, r2, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4403      	add	r3, r0
 800375e:	3338      	adds	r3, #56	@ 0x38
 8003760:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	0cdb      	lsrs	r3, r3, #19
 8003772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003776:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3328      	adds	r3, #40	@ 0x28
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4293      	cmp	r3, r2
 8003790:	d13f      	bne.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03c      	beq.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	333c      	adds	r3, #60	@ 0x3c
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f083 0301 	eor.w	r3, r3, #1
 80037e0:	b2d8      	uxtb	r0, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	333c      	adds	r3, #60	@ 0x3c
 80037f2:	4602      	mov	r2, r0
 80037f4:	701a      	strb	r2, [r3, #0]
      break;
 80037f6:	e00c      	b.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334c      	adds	r3, #76	@ 0x4c
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
      break;
 800380c:	e001      	b.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003812:	bf00      	nop
  }
}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	@ 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003848:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d10b      	bne.n	800386c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f004 fb26 	bl	8007eb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b08      	cmp	r3, #8
 8003874:	d132      	bne.n	80038dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d126      	bne.n	80038d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a5b      	ldrb	r3, [r3, #9]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d113      	bne.n	80038b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800389a:	d106      	bne.n	80038aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fbd2 	bl	800504c <USB_InitFSLSPClkSel>
 80038a8:	e011      	b.n	80038ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fbcb 	bl	800504c <USB_InitFSLSPClkSel>
 80038b6:	e00a      	b.n	80038ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	79db      	ldrb	r3, [r3, #7]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038c6:	461a      	mov	r2, r3
 80038c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80038cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 fb18 	bl	8007f04 <HAL_HCD_PortEnabled_Callback>
 80038d4:	e002      	b.n	80038dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f004 fb22 	bl	8007f20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d103      	bne.n	80038ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0320 	orr.w	r3, r3, #32
 80038ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e267      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d075      	beq.n	8003a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003922:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b04      	cmp	r3, #4
 800392c:	d00c      	beq.n	8003948 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b85      	ldr	r3, [pc, #532]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003936:	2b08      	cmp	r3, #8
 8003938:	d112      	bne.n	8003960 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b82      	ldr	r3, [pc, #520]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003946:	d10b      	bne.n	8003960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	4b7e      	ldr	r3, [pc, #504]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05b      	beq.n	8003a0c <HAL_RCC_OscConfig+0x108>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d157      	bne.n	8003a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e242      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003968:	d106      	bne.n	8003978 <HAL_RCC_OscConfig+0x74>
 800396a:	4b76      	ldr	r3, [pc, #472]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a75      	ldr	r2, [pc, #468]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e01d      	b.n	80039b4 <HAL_RCC_OscConfig+0xb0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x98>
 8003982:	4b70      	ldr	r3, [pc, #448]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6f      	ldr	r2, [pc, #444]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6c      	ldr	r2, [pc, #432]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0xb0>
 800399c:	4b69      	ldr	r3, [pc, #420]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a68      	ldr	r2, [pc, #416]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b66      	ldr	r3, [pc, #408]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a65      	ldr	r2, [pc, #404]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd f88c 	bl	8000ad8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fd f888 	bl	8000ad8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	@ 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e207      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0xc0>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd f878 	bl	8000ad8 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fd f874 	bl	8000ad8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1f3      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	4b51      	ldr	r3, [pc, #324]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0xe8>
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d11c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b44      	ldr	r3, [pc, #272]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x152>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e1c7      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4937      	ldr	r1, [pc, #220]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	e03a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <HAL_RCC_OscConfig+0x244>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd f82d 	bl	8000ad8 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a82:	f7fd f829 	bl	8000ad8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1a8      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4925      	ldr	r1, [pc, #148]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]
 8003ab4:	e015      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x244>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd f80c 	bl	8000ad8 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fd f808 	bl	8000ad8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e187      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d036      	beq.n	8003b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_RCC_OscConfig+0x248>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fc ffec 	bl	8000ad8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fc ffe8 	bl	8000ad8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e167      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x200>
 8003b22:	e01b      	b.n	8003b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_OscConfig+0x248>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7fc ffd5 	bl	8000ad8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b30:	e00e      	b.n	8003b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b32:	f7fc ffd1 	bl	8000ad8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d907      	bls.n	8003b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e150      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
 8003b44:	40023800 	.word	0x40023800
 8003b48:	42470000 	.word	0x42470000
 8003b4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	4b88      	ldr	r3, [pc, #544]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ea      	bne.n	8003b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8097 	beq.w	8003c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6e:	4b81      	ldr	r3, [pc, #516]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	4a7c      	ldr	r2, [pc, #496]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b77      	ldr	r3, [pc, #476]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba6:	4b74      	ldr	r3, [pc, #464]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a73      	ldr	r2, [pc, #460]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7fc ff91 	bl	8000ad8 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bba:	f7fc ff8d 	bl	8000ad8 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e10c      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x2ea>
 8003be0:	4b64      	ldr	r3, [pc, #400]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a63      	ldr	r2, [pc, #396]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	e01c      	b.n	8003c28 <HAL_RCC_OscConfig+0x324>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x30c>
 8003bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	4b5c      	ldr	r3, [pc, #368]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a5b      	ldr	r2, [pc, #364]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x324>
 8003c10:	4b58      	ldr	r3, [pc, #352]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a57      	ldr	r2, [pc, #348]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	4b55      	ldr	r3, [pc, #340]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a54      	ldr	r2, [pc, #336]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0304 	bic.w	r3, r3, #4
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fc ff52 	bl	8000ad8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fc ff4e 	bl	8000ad8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0cb      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	4b49      	ldr	r3, [pc, #292]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCC_OscConfig+0x334>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fc ff3c 	bl	8000ad8 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fc ff38 	bl	8000ad8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0b5      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ee      	bne.n	8003c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8c:	4b39      	ldr	r3, [pc, #228]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	4a38      	ldr	r2, [pc, #224]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a1 	beq.w	8003de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca2:	4b34      	ldr	r3, [pc, #208]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d05c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d141      	bne.n	8003d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fc ff0c 	bl	8000ad8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fc ff08 	bl	8000ad8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e087      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	4b27      	ldr	r3, [pc, #156]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	491b      	ldr	r1, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fc fee1 	bl	8000ad8 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fc fedd 	bl	8000ad8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e05c      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2c:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x416>
 8003d38:	e054      	b.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fc feca 	bl	8000ad8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fc fec6 	bl	8000ad8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e045      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x444>
 8003d66:	e03d      	b.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e038      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x4ec>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d121      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d111      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cc      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d90c      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b65      	ldr	r3, [pc, #404]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d044      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e067      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4934      	ldr	r1, [pc, #208]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fc fdf8 	bl	8000ad8 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fc fdf4 	bl	8000ad8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d20c      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f821 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	490a      	ldr	r1, [pc, #40]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fd58 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	080085f0 	.word	0x080085f0
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc4:	b094      	sub	sp, #80	@ 0x50
 8003fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd8:	4b79      	ldr	r3, [pc, #484]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d00d      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	f200 80e1 	bhi.w	80041ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff2:	e0db      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b73      	ldr	r3, [pc, #460]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ff8:	e0db      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffa:	4b73      	ldr	r3, [pc, #460]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ffe:	e0d8      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004000:	4b6f      	ldr	r3, [pc, #444]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400a:	4b6d      	ldr	r3, [pc, #436]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d063      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	4b6a      	ldr	r3, [pc, #424]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	099b      	lsrs	r3, r3, #6
 800401c:	2200      	movs	r2, #0
 800401e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	633b      	str	r3, [r7, #48]	@ 0x30
 800402a:	2300      	movs	r3, #0
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
 800402e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	f04f 0000 	mov.w	r0, #0
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	0159      	lsls	r1, r3, #5
 8004040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004044:	0150      	lsls	r0, r2, #5
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4621      	mov	r1, r4
 800404c:	1a51      	subs	r1, r2, r1
 800404e:	6139      	str	r1, [r7, #16]
 8004050:	4629      	mov	r1, r5
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004064:	4659      	mov	r1, fp
 8004066:	018b      	lsls	r3, r1, #6
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406e:	4651      	mov	r1, sl
 8004070:	018a      	lsls	r2, r1, #6
 8004072:	4651      	mov	r1, sl
 8004074:	ebb2 0801 	subs.w	r8, r2, r1
 8004078:	4659      	mov	r1, fp
 800407a:	eb63 0901 	sbc.w	r9, r3, r1
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004092:	4690      	mov	r8, r2
 8004094:	4699      	mov	r9, r3
 8004096:	4623      	mov	r3, r4
 8004098:	eb18 0303 	adds.w	r3, r8, r3
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	462b      	mov	r3, r5
 80040a0:	eb49 0303 	adc.w	r3, r9, r3
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040b2:	4629      	mov	r1, r5
 80040b4:	024b      	lsls	r3, r1, #9
 80040b6:	4621      	mov	r1, r4
 80040b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040bc:	4621      	mov	r1, r4
 80040be:	024a      	lsls	r2, r1, #9
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	2200      	movs	r2, #0
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d0:	f7fc f87a 	bl	80001c8 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040dc:	e058      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b38      	ldr	r3, [pc, #224]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	4611      	mov	r1, r2
 80040ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	f04f 0000 	mov.w	r0, #0
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	0159      	lsls	r1, r3, #5
 8004106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410a:	0150      	lsls	r0, r2, #5
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4641      	mov	r1, r8
 8004112:	ebb2 0a01 	subs.w	sl, r2, r1
 8004116:	4649      	mov	r1, r9
 8004118:	eb63 0b01 	sbc.w	fp, r3, r1
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800412c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004130:	ebb2 040a 	subs.w	r4, r2, sl
 8004134:	eb63 050b 	sbc.w	r5, r3, fp
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	00eb      	lsls	r3, r5, #3
 8004142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004146:	00e2      	lsls	r2, r4, #3
 8004148:	4614      	mov	r4, r2
 800414a:	461d      	mov	r5, r3
 800414c:	4643      	mov	r3, r8
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	464b      	mov	r3, r9
 8004154:	eb45 0303 	adc.w	r3, r5, r3
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004166:	4629      	mov	r1, r5
 8004168:	028b      	lsls	r3, r1, #10
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004170:	4621      	mov	r1, r4
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	61fa      	str	r2, [r7, #28]
 8004180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004184:	f7fc f820 	bl	80001c8 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3750      	adds	r7, #80	@ 0x50
 80041b8:	46bd      	mov	sp, r7
 80041ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	08008600 	.word	0x08008600

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffdc 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0b5b      	lsrs	r3, r3, #13
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	08008600 	.word	0x08008600

08004234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e042      	b.n	80042cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc faa0 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f973 	bl	8004564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800428c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800429c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d175      	bne.n	80043e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_UART_Transmit+0x2c>
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e06e      	b.n	80043e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2221      	movs	r2, #33	@ 0x21
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004312:	f7fc fbe1 	bl	8000ad8 <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432c:	d108      	bne.n	8004340 <HAL_UART_Transmit+0x6c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	e003      	b.n	8004348 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004348:	e02e      	b.n	80043a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	2180      	movs	r1, #128	@ 0x80
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f848 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e03a      	b.n	80043e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3302      	adds	r3, #2
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e007      	b.n	800439a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1cb      	bne.n	800434a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f814 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	e03b      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d037      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004404:	f7fc fb68 	bl	8000ad8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	429a      	cmp	r2, r3
 8004412:	d302      	bcc.n	800441a <UART_WaitOnFlagUntilTimeout+0x30>
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e03a      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d020      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	d01d      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b08      	cmp	r3, #8
 8004444:	d116      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f81d 	bl	800449c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2208      	movs	r2, #8
 8004466:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d0b4      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b095      	sub	sp, #84	@ 0x54
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d119      	bne.n	8004548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60bb      	str	r3, [r7, #8]
   return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	647b      	str	r3, [r7, #68]	@ 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004534:	61ba      	str	r2, [r7, #24]
 8004536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	@ 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004568:	b0c0      	sub	sp, #256	@ 0x100
 800456a:	af00      	add	r7, sp, #0
 800456c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	ea40 0301 	orr.w	r3, r0, r1
 800458c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045bc:	f021 010c 	bic.w	r1, r1, #12
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	6999      	ldr	r1, [r3, #24]
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	ea40 0301 	orr.w	r3, r0, r1
 80045ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004830 <UART_SetConfig+0x2cc>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d005      	beq.n	8004604 <UART_SetConfig+0xa0>
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004834 <UART_SetConfig+0x2d0>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d104      	bne.n	800460e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff fe02 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8004608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800460c:	e003      	b.n	8004616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460e:	f7ff fde9 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8004612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	f040 810c 	bne.w	800483c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800462e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	1891      	adds	r1, r2, r2
 800463c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800463e:	415b      	adcs	r3, r3
 8004640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004646:	4621      	mov	r1, r4
 8004648:	eb12 0801 	adds.w	r8, r2, r1
 800464c:	4629      	mov	r1, r5
 800464e:	eb43 0901 	adc.w	r9, r3, r1
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004666:	4690      	mov	r8, r2
 8004668:	4699      	mov	r9, r3
 800466a:	4623      	mov	r3, r4
 800466c:	eb18 0303 	adds.w	r3, r8, r3
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004674:	462b      	mov	r3, r5
 8004676:	eb49 0303 	adc.w	r3, r9, r3
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800468a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800468e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004692:	460b      	mov	r3, r1
 8004694:	18db      	adds	r3, r3, r3
 8004696:	653b      	str	r3, [r7, #80]	@ 0x50
 8004698:	4613      	mov	r3, r2
 800469a:	eb42 0303 	adc.w	r3, r2, r3
 800469e:	657b      	str	r3, [r7, #84]	@ 0x54
 80046a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a8:	f7fb fd8e 	bl	80001c8 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <UART_SetConfig+0x2d4>)
 80046b2:	fba3 2302 	umull	r2, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	011c      	lsls	r4, r3, #4
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	1891      	adds	r1, r2, r2
 80046d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046d4:	415b      	adcs	r3, r3
 80046d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046dc:	4641      	mov	r1, r8
 80046de:	eb12 0a01 	adds.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0b01 	adc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fc:	4692      	mov	sl, r2
 80046fe:	469b      	mov	fp, r3
 8004700:	4643      	mov	r3, r8
 8004702:	eb1a 0303 	adds.w	r3, sl, r3
 8004706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800470a:	464b      	mov	r3, r9
 800470c:	eb4b 0303 	adc.w	r3, fp, r3
 8004710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004728:	460b      	mov	r3, r1
 800472a:	18db      	adds	r3, r3, r3
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
 800472e:	4613      	mov	r3, r2
 8004730:	eb42 0303 	adc.w	r3, r2, r3
 8004734:	647b      	str	r3, [r7, #68]	@ 0x44
 8004736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800473a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800473e:	f7fb fd43 	bl	80001c8 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4611      	mov	r1, r2
 8004748:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <UART_SetConfig+0x2d4>)
 800474a:	fba3 2301 	umull	r2, r3, r3, r1
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2264      	movs	r2, #100	@ 0x64
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800475e:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004760:	fba3 2302 	umull	r2, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800477c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004788:	415b      	adcs	r3, r3
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800478c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6339      	str	r1, [r7, #48]	@ 0x30
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047fa:	f7fb fce5 	bl	80001c8 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	@ 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	@ 0x32
 8004816:	4a08      	ldr	r2, [pc, #32]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0207 	and.w	r2, r3, #7
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4422      	add	r2, r4
 800482a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800482c:	e106      	b.n	8004a3c <UART_SetConfig+0x4d8>
 800482e:	bf00      	nop
 8004830:	40011000 	.word	0x40011000
 8004834:	40011400 	.word	0x40011400
 8004838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004840:	2200      	movs	r2, #0
 8004842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800484a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800484e:	4642      	mov	r2, r8
 8004850:	464b      	mov	r3, r9
 8004852:	1891      	adds	r1, r2, r2
 8004854:	6239      	str	r1, [r7, #32]
 8004856:	415b      	adcs	r3, r3
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
 800485a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485e:	4641      	mov	r1, r8
 8004860:	1854      	adds	r4, r2, r1
 8004862:	4649      	mov	r1, r9
 8004864:	eb43 0501 	adc.w	r5, r3, r1
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004884:	464b      	mov	r3, r9
 8004886:	eb45 0303 	adc.w	r3, r5, r3
 800488a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800489a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048aa:	4629      	mov	r1, r5
 80048ac:	008b      	lsls	r3, r1, #2
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b4:	4621      	mov	r1, r4
 80048b6:	008a      	lsls	r2, r1, #2
 80048b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048bc:	f7fb fc84 	bl	80001c8 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	011c      	lsls	r4, r3, #4
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	1891      	adds	r1, r2, r2
 80048e6:	61b9      	str	r1, [r7, #24]
 80048e8:	415b      	adcs	r3, r3
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f0:	4641      	mov	r1, r8
 80048f2:	1851      	adds	r1, r2, r1
 80048f4:	6139      	str	r1, [r7, #16]
 80048f6:	4649      	mov	r1, r9
 80048f8:	414b      	adcs	r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	00cb      	lsls	r3, r1, #3
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004912:	4651      	mov	r1, sl
 8004914:	00ca      	lsls	r2, r1, #3
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	4603      	mov	r3, r0
 800491c:	4642      	mov	r2, r8
 800491e:	189b      	adds	r3, r3, r2
 8004920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004924:	464b      	mov	r3, r9
 8004926:	460a      	mov	r2, r1
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800493a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004948:	4649      	mov	r1, r9
 800494a:	008b      	lsls	r3, r1, #2
 800494c:	4641      	mov	r1, r8
 800494e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004952:	4641      	mov	r1, r8
 8004954:	008a      	lsls	r2, r1, #2
 8004956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800495a:	f7fb fc35 	bl	80001c8 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4611      	mov	r1, r2
 8004964:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004966:	fba3 2301 	umull	r2, r3, r3, r1
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	2264      	movs	r2, #100	@ 0x64
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	1acb      	subs	r3, r1, r3
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	3332      	adds	r3, #50	@ 0x32
 8004978:	4a33      	ldr	r2, [pc, #204]	@ (8004a48 <UART_SetConfig+0x4e4>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004984:	441c      	add	r4, r3
 8004986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800498a:	2200      	movs	r2, #0
 800498c:	673b      	str	r3, [r7, #112]	@ 0x70
 800498e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	415b      	adcs	r3, r3
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a4:	4641      	mov	r1, r8
 80049a6:	1851      	adds	r1, r2, r1
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	4649      	mov	r1, r9
 80049ac:	414b      	adcs	r3, r1
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049bc:	4659      	mov	r1, fp
 80049be:	00cb      	lsls	r3, r1, #3
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c6:	4651      	mov	r1, sl
 80049c8:	00ca      	lsls	r2, r1, #3
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	4642      	mov	r2, r8
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d6:	464b      	mov	r3, r9
 80049d8:	460a      	mov	r2, r1
 80049da:	eb42 0303 	adc.w	r3, r2, r3
 80049de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049f8:	4649      	mov	r1, r9
 80049fa:	008b      	lsls	r3, r1, #2
 80049fc:	4641      	mov	r1, r8
 80049fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a02:	4641      	mov	r1, r8
 8004a04:	008a      	lsls	r2, r1, #2
 8004a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a0a:	f7fb fbdd 	bl	80001c8 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	@ 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	3332      	adds	r3, #50	@ 0x32
 8004a26:	4a08      	ldr	r2, [pc, #32]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4422      	add	r2, r4
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a42:	46bd      	mov	sp, r7
 8004a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a48:	51eb851f 	.word	0x51eb851f

08004a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	f107 001c 	add.w	r0, r7, #28
 8004a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d123      	bne.n	8004aae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9dc 	bl	8004e60 <USB_CoreReset>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e01b      	b.n	8004ae6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9d0 	bl	8004e60 <USB_CoreReset>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ac4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ad8:	e005      	b.n	8004ae6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ae6:	7fbb      	ldrb	r3, [r7, #30]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d10b      	bne.n	8004b04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f043 0206 	orr.w	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b10:	b004      	add	sp, #16
 8004b12:	4770      	bx	lr

08004b14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d115      	bne.n	8004ba6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b86:	200a      	movs	r0, #10
 8004b88:	f7fb ffb2 	bl	8000af0 <HAL_Delay>
      ms += 10U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	330a      	adds	r3, #10
 8004b90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f956 	bl	8004e44 <USB_GetMode>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d01e      	beq.n	8004bdc <USB_SetCurrentMode+0x84>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ba2:	d9f0      	bls.n	8004b86 <USB_SetCurrentMode+0x2e>
 8004ba4:	e01a      	b.n	8004bdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d115      	bne.n	8004bd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f7fb ff99 	bl	8000af0 <HAL_Delay>
      ms += 10U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	330a      	adds	r3, #10
 8004bc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f93d 	bl	8004e44 <USB_GetMode>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <USB_SetCurrentMode+0x84>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bd4:	d9f0      	bls.n	8004bb8 <USB_SetCurrentMode+0x60>
 8004bd6:	e001      	b.n	8004bdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e005      	b.n	8004be8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2bc8      	cmp	r3, #200	@ 0xc8
 8004be0:	d101      	bne.n	8004be6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c0a:	d901      	bls.n	8004c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e01b      	b.n	8004c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	daf2      	bge.n	8004bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	019b      	lsls	r3, r3, #6
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c34:	d901      	bls.n	8004c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e006      	b.n	8004c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d0f0      	beq.n	8004c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c6c:	d901      	bls.n	8004c72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e018      	b.n	8004ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	daf2      	bge.n	8004c60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2210      	movs	r2, #16
 8004c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c90:	d901      	bls.n	8004c96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e006      	b.n	8004ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d0f0      	beq.n	8004c84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	@ 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	71fb      	strb	r3, [r7, #7]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d123      	bne.n	8004d1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	3303      	adds	r3, #3
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e018      	b.n	8004d16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	031a      	lsls	r2, r3, #12
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	3301      	adds	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3e2      	bcc.n	8004ce4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3724      	adds	r7, #36	@ 0x24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b08b      	sub	sp, #44	@ 0x2c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	089b      	lsrs	r3, r3, #2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	e014      	b.n	8004d82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	3301      	adds	r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	3301      	adds	r3, #1
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	3301      	adds	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	623b      	str	r3, [r7, #32]
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3e6      	bcc.n	8004d58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d8a:	8bfb      	ldrh	r3, [r7, #30]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01e      	beq.n	8004dce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	701a      	strb	r2, [r3, #0]
      i++;
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	3301      	adds	r3, #1
 8004dba:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004dc2:	8bfb      	ldrh	r3, [r7, #30]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dc8:	8bfb      	ldrh	r3, [r7, #30]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ea      	bne.n	8004da4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	372c      	adds	r7, #44	@ 0x2c
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004df4:	68fb      	ldr	r3, [r7, #12]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e36:	68bb      	ldr	r3, [r7, #8]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0301 	and.w	r3, r3, #1
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e78:	d901      	bls.n	8004e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e01b      	b.n	8004eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	daf2      	bge.n	8004e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ea2:	d901      	bls.n	8004ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d0f0      	beq.n	8004e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d119      	bne.n	8004f4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10a      	bne.n	8004f38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e014      	b.n	8004f62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f46:	f023 0304 	bic.w	r3, r3, #4
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e009      	b.n	8004f62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f62:	2110      	movs	r1, #16
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fe43 	bl	8004bf0 <USB_FlushTxFifo>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe6d 	bl	8004c54 <USB_FlushRxFifo>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	e015      	b.n	8004fb6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f96:	461a      	mov	r2, r3
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fba:	461a      	mov	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d3e3      	bcc.n	8004f8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	@ (8005034 <USB_HostInit+0x170>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10b      	bne.n	8004ff0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fde:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <USB_HostInit+0x174>)
 8004fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	@ (800503c <USB_HostInit+0x178>)
 8004fea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004fee:	e009      	b.n	8005004 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2280      	movs	r2, #128	@ 0x80
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a11      	ldr	r2, [pc, #68]	@ (8005040 <USB_HostInit+0x17c>)
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a11      	ldr	r2, [pc, #68]	@ (8005044 <USB_HostInit+0x180>)
 8005000:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 0210 	orr.w	r2, r3, #16
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699a      	ldr	r2, [r3, #24]
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <USB_HostInit+0x184>)
 800501e:	4313      	orrs	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005030:	b004      	add	sp, #16
 8005032:	4770      	bx	lr
 8005034:	40040000 	.word	0x40040000
 8005038:	01000200 	.word	0x01000200
 800503c:	00e00300 	.word	0x00e00300
 8005040:	00600080 	.word	0x00600080
 8005044:	004000e0 	.word	0x004000e0
 8005048:	a3200008 	.word	0xa3200008

0800504c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005094:	461a      	mov	r2, r3
 8005096:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800509a:	6053      	str	r3, [r2, #4]
 800509c:	e00c      	b.n	80050b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d107      	bne.n	80050b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050aa:	461a      	mov	r2, r3
 80050ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80050b0:	6053      	str	r3, [r2, #4]
 80050b2:	e001      	b.n	80050b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80050e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80050f6:	2064      	movs	r0, #100	@ 0x64
 80050f8:	f7fb fcfa 	bl	8000af0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005108:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800510a:	200a      	movs	r0, #10
 800510c:	f7fb fcf0 	bl	8000af0 <HAL_Delay>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800513e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <USB_DriveVbus+0x44>
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d106      	bne.n	800515e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800515c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005168:	d109      	bne.n	800517e <USB_DriveVbus+0x64>
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800517c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	0c5b      	lsrs	r3, r3, #17
 80051aa:	f003 0303 	and.w	r3, r3, #3
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	b29b      	uxth	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	70fb      	strb	r3, [r7, #3]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70bb      	strb	r3, [r7, #2]
 80051f2:	4613      	mov	r3, r2
 80051f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005212:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005216:	2b03      	cmp	r3, #3
 8005218:	d87c      	bhi.n	8005314 <USB_HC_Init+0x138>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <USB_HC_Init+0x44>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	080052d7 	.word	0x080052d7
 8005228:	08005231 	.word	0x08005231
 800522c:	08005299 	.word	0x08005299
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005248:	2b00      	cmp	r3, #0
 800524a:	da10      	bge.n	800526e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	440a      	add	r2, r1
 8005262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800526c:	e055      	b.n	800531a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a6f      	ldr	r2, [pc, #444]	@ (8005430 <USB_HC_Init+0x254>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d151      	bne.n	800531a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	440a      	add	r2, r1
 800528c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005290:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005294:	60d3      	str	r3, [r2, #12]
      break;
 8005296:	e040      	b.n	800531a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a4:	461a      	mov	r2, r3
 80052a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80052aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da34      	bge.n	800531e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80052d4:	e023      	b.n	800531e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	f240 2325 	movw	r3, #549	@ 0x225
 80052e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da17      	bge.n	8005322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800530c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005310:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005312:	e006      	b.n	8005322 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
      break;
 8005318:	e004      	b.n	8005324 <USB_HC_Init+0x148>
      break;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <USB_HC_Init+0x148>
      break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <USB_HC_Init+0x148>
      break;
 8005322:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	440a      	add	r2, r1
 800534c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	2101      	movs	r1, #1
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005370:	4313      	orrs	r3, r2
 8005372:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005380:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	da03      	bge.n	8005390 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e001      	b.n	8005394 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fef9 	bl	800518c <USB_GetHostSpeed>
 800539a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800539c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d106      	bne.n	80053b2 <USB_HC_Init+0x1d6>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80053aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e001      	b.n	80053b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053b6:	787b      	ldrb	r3, [r7, #1]
 80053b8:	059b      	lsls	r3, r3, #22
 80053ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80053be:	78bb      	ldrb	r3, [r7, #2]
 80053c0:	02db      	lsls	r3, r3, #11
 80053c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80053c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053cc:	049b      	lsls	r3, r3, #18
 80053ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80053d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80053d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80053d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80053da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	431a      	orrs	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80053f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80053f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d003      	beq.n	8005406 <USB_HC_Init+0x22a>
 80053fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10f      	bne.n	8005426 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	440a      	add	r2, r1
 800541c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005424:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005426:	7ffb      	ldrb	r3, [r7, #31]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40040000 	.word	0x40040000

08005434 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	@ 0x30
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800544c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005450:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a5d      	ldr	r2, [pc, #372]	@ (80055cc <USB_HC_StartXfer+0x198>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d12f      	bne.n	80054ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d11c      	bne.n	800549a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	7c9b      	ldrb	r3, [r3, #18]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <USB_HC_StartXfer+0x3c>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	7c9b      	ldrb	r3, [r3, #18]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d124      	bne.n	80054ba <USB_HC_StartXfer+0x86>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	799b      	ldrb	r3, [r3, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d120      	bne.n	80054ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	440a      	add	r2, r1
 800548e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60d3      	str	r3, [r2, #12]
 8005498:	e00f      	b.n	80054ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <USB_HC_StartXfer+0x86>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	795b      	ldrb	r3, [r3, #5]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	4619      	mov	r1, r3
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fb6b 	bl	8005b8c <USB_DoPing>
        return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e232      	b.n	8005920 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	799b      	ldrb	r3, [r3, #6]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d158      	bne.n	8005574 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80054ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	8a92      	ldrh	r2, [r2, #20]
 80054d4:	fb03 f202 	mul.w	r2, r3, r2
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61da      	str	r2, [r3, #28]
 80054dc:	e07c      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	7c9b      	ldrb	r3, [r3, #18]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d130      	bne.n	8005548 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80054ec:	d918      	bls.n	8005520 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	8a9b      	ldrh	r3, [r3, #20]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d003      	beq.n	8005510 <USB_HC_StartXfer+0xdc>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d103      	bne.n	8005518 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2202      	movs	r2, #2
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	e05f      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2201      	movs	r2, #1
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	e05b      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d007      	beq.n	8005540 <USB_HC_StartXfer+0x10c>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d003      	beq.n	8005540 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2204      	movs	r2, #4
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	e04b      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2203      	movs	r2, #3
 8005544:	60da      	str	r2, [r3, #12]
 8005546:	e047      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d10d      	bne.n	800556a <USB_HC_StartXfer+0x136>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	8a92      	ldrh	r2, [r2, #20]
 8005556:	4293      	cmp	r3, r2
 8005558:	d907      	bls.n	800556a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800555a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	8a92      	ldrh	r2, [r2, #20]
 8005560:	fb03 f202 	mul.w	r2, r3, r2
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	61da      	str	r2, [r3, #28]
 8005568:	e036      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61da      	str	r2, [r3, #28]
 8005572:	e031      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d018      	beq.n	80055ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	8a92      	ldrh	r2, [r2, #20]
 8005584:	4413      	add	r3, r2
 8005586:	3b01      	subs	r3, #1
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	8a92      	ldrh	r2, [r2, #20]
 800558c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005590:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005592:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005594:	8b7b      	ldrh	r3, [r7, #26]
 8005596:	429a      	cmp	r2, r3
 8005598:	d90b      	bls.n	80055b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800559a:	8b7b      	ldrh	r3, [r7, #26]
 800559c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800559e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	8a92      	ldrh	r2, [r2, #20]
 80055a4:	fb03 f202 	mul.w	r2, r3, r2
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	61da      	str	r2, [r3, #28]
 80055ac:	e001      	b.n	80055b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80055ae:	2301      	movs	r3, #1
 80055b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	78db      	ldrb	r3, [r3, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	8a92      	ldrh	r2, [r2, #20]
 80055c0:	fb03 f202 	mul.w	r2, r3, r2
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61da      	str	r2, [r3, #28]
 80055c8:	e006      	b.n	80055d8 <USB_HC_StartXfer+0x1a4>
 80055ca:	bf00      	nop
 80055cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055e2:	04d9      	lsls	r1, r3, #19
 80055e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005874 <USB_HC_StartXfer+0x440>)
 80055e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	7d9b      	ldrb	r3, [r3, #22]
 80055ee:	075b      	lsls	r3, r3, #29
 80055f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055f4:	69f9      	ldr	r1, [r7, #28]
 80055f6:	0148      	lsls	r0, r1, #5
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	4401      	add	r1, r0
 80055fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005600:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005602:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6999      	ldr	r1, [r3, #24]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561a:	460a      	mov	r2, r1
 800561c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	440a      	add	r2, r1
 800564c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005650:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005654:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	7e7b      	ldrb	r3, [r7, #25]
 8005666:	075b      	lsls	r3, r3, #29
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	0148      	lsls	r0, r1, #5
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	4401      	add	r1, r0
 8005670:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	799b      	ldrb	r3, [r3, #6]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 80c3 	bne.w	8005808 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	7c5b      	ldrb	r3, [r3, #17]
 8005686:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800568c:	4313      	orrs	r3, r2
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800569a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800569e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80056be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	79db      	ldrb	r3, [r3, #7]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d123      	bne.n	8005710 <USB_HC_StartXfer+0x2dc>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11f      	bne.n	8005710 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	440a      	add	r2, r1
 8005706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800570a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	7c9b      	ldrb	r3, [r3, #18]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d003      	beq.n	8005720 <USB_HC_StartXfer+0x2ec>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	7c9b      	ldrb	r3, [r3, #18]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d117      	bne.n	8005750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005724:	2b01      	cmp	r3, #1
 8005726:	d113      	bne.n	8005750 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d10f      	bne.n	8005750 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	440a      	add	r2, r1
 8005746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800574a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	7c9b      	ldrb	r3, [r3, #18]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d162      	bne.n	800581e <USB_HC_StartXfer+0x3ea>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d15e      	bne.n	800581e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	3b01      	subs	r3, #1
 8005766:	2b03      	cmp	r3, #3
 8005768:	d858      	bhi.n	800581c <USB_HC_StartXfer+0x3e8>
 800576a:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <USB_HC_StartXfer+0x33c>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005781 	.word	0x08005781
 8005774:	080057a3 	.word	0x080057a3
 8005778:	080057c5 	.word	0x080057c5
 800577c:	080057e7 	.word	0x080057e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579e:	6053      	str	r3, [r2, #4]
          break;
 80057a0:	e03d      	b.n	800581e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057bc:	f043 030e 	orr.w	r3, r3, #14
 80057c0:	6053      	str	r3, [r2, #4]
          break;
 80057c2:	e02c      	b.n	800581e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057e2:	6053      	str	r3, [r2, #4]
          break;
 80057e4:	e01b      	b.n	800581e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005804:	6053      	str	r3, [r2, #4]
          break;
 8005806:	e00a      	b.n	800581e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	e000      	b.n	800581e <USB_HC_StartXfer+0x3ea>
          break;
 800581c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005834:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e003      	b.n	8005850 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800584e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005856:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005864:	461a      	mov	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e055      	b.n	8005920 <USB_HC_StartXfer+0x4ec>
 8005874:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d14e      	bne.n	800591e <USB_HC_StartXfer+0x4ea>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d04a      	beq.n	800591e <USB_HC_StartXfer+0x4ea>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	79db      	ldrb	r3, [r3, #7]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d146      	bne.n	800591e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	7c9b      	ldrb	r3, [r3, #18]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d831      	bhi.n	80058fc <USB_HC_StartXfer+0x4c8>
 8005898:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <USB_HC_StartXfer+0x46c>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058b1 	.word	0x080058b1
 80058ac:	080058d5 	.word	0x080058d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	3303      	adds	r3, #3
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80058ba:	8afa      	ldrh	r2, [r7, #22]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d91c      	bls.n	8005900 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80058d2:	e015      	b.n	8005900 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	3303      	adds	r3, #3
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80058de:	8afa      	ldrh	r2, [r7, #22]
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90a      	bls.n	8005904 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80058fa:	e003      	b.n	8005904 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <USB_HC_StartXfer+0x4d2>
        break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <USB_HC_StartXfer+0x4d2>
        break;
 8005904:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6999      	ldr	r1, [r3, #24]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785a      	ldrb	r2, [r3, #1]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	b29b      	uxth	r3, r3
 8005914:	2000      	movs	r0, #0
 8005916:	9000      	str	r0, [sp, #0]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff f9c9 	bl	8004cb0 <USB_WritePacket>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3728      	adds	r7, #40	@ 0x28
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	b29b      	uxth	r3, r3
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800594a:	b480      	push	{r7}
 800594c:	b089      	sub	sp, #36	@ 0x24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0c9b      	lsrs	r3, r3, #18
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	0fdb      	lsrs	r3, r3, #31
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	0fdb      	lsrs	r3, r3, #31
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d10d      	bne.n	80059cc <USB_HC_Halt+0x82>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <USB_HC_Halt+0x82>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <USB_HC_Halt+0x7e>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d101      	bne.n	80059cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e0d8      	b.n	8005b7e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <USB_HC_Halt+0x8e>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d173      	bne.n	8005ac0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d14a      	bne.n	8005a9a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d133      	bne.n	8005a78 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a2e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	3301      	adds	r3, #1
 8005a54:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a5c:	d82e      	bhi.n	8005abc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a74:	d0ec      	beq.n	8005a50 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a76:	e081      	b.n	8005b7c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a96:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a98:	e070      	b.n	8005b7c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ab8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005aba:	e05f      	b.n	8005b7c <USB_HC_Halt+0x232>
            break;
 8005abc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005abe:	e05d      	b.n	8005b7c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ada:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ade:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d133      	bne.n	8005b58 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b3c:	d81d      	bhi.n	8005b7a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b54:	d0ec      	beq.n	8005b30 <USB_HC_Halt+0x1e6>
 8005b56:	e011      	b.n	8005b7c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e000      	b.n	8005b7c <USB_HC_Halt+0x232>
          break;
 8005b7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	@ 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	04da      	lsls	r2, r3, #19
 8005ba8:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <USB_DoPing+0x74>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bea:	461a      	mov	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	1ff80000 	.word	0x1ff80000

08005c04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fe ff8c 	bl	8004b36 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c1e:	2110      	movs	r1, #16
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fe ffe5 	bl	8004bf0 <USB_FlushTxFifo>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff f80f 	bl	8004c54 <USB_FlushRxFifo>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e01f      	b.n	8005c86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	3301      	adds	r3, #1
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b0f      	cmp	r3, #15
 8005c8a:	d9dc      	bls.n	8005c46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e034      	b.n	8005cfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ca8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cd8:	d80c      	bhi.n	8005cf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cf0:	d0ec      	beq.n	8005ccc <USB_StopHost+0xc8>
 8005cf2:	e000      	b.n	8005cf6 <USB_StopHost+0xf2>
        break;
 8005cf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d9c7      	bls.n	8005c92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fe fefb 	bl	8004b14 <USB_EnableGlobalInt>

  return ret;
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b089      	sub	sp, #36	@ 0x24
 8005d2c:	af04      	add	r7, sp, #16
 8005d2e:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8005d30:	2302      	movs	r3, #2
 8005d32:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8005d38:	23ff      	movs	r3, #255	@ 0xff
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fbb6 	bl	80064b0 <USBH_FindInterface>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2bff      	cmp	r3, #255	@ 0xff
 8005d4c:	d102      	bne.n	8005d54 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e0fc      	b.n	8005f4e <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb8d 	bl	8006478 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005d64:	201c      	movs	r0, #28
 8005d66:	f002 fadf 	bl	8008328 <malloc>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0e6      	b.n	8005f50 <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 8005d82:	221c      	movs	r2, #28
 8005d84:	2100      	movs	r1, #0
 8005d86:	68b8      	ldr	r0, [r7, #8]
 8005d88:	f002 fb8c 	bl	80084a4 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005d92:	4619      	mov	r1, r3
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	231a      	movs	r3, #26
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b25b      	sxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da1c      	bge.n	8005de4 <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005db0:	4619      	mov	r1, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	231a      	movs	r3, #26
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005dcc:	4619      	mov	r1, r3
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	231a      	movs	r3, #26
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ddc:	881a      	ldrh	r2, [r3, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	811a      	strh	r2, [r3, #8]
 8005de2:	e01b      	b.n	8005e1c <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005dea:	4619      	mov	r1, r3
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	231a      	movs	r3, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e06:	4619      	mov	r1, r3
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	231a      	movs	r3, #26
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005e16:	881a      	ldrh	r2, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e22:	4619      	mov	r1, r3
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	231a      	movs	r3, #26
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	b25b      	sxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da1c      	bge.n	8005e74 <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e40:	4619      	mov	r1, r3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	231a      	movs	r3, #26
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	231a      	movs	r3, #26
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005e6c:	881a      	ldrh	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	811a      	strh	r2, [r3, #8]
 8005e72:	e01b      	b.n	8005eac <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	231a      	movs	r3, #26
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005e96:	4619      	mov	r1, r3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	231a      	movs	r3, #26
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005ea6:	881a      	ldrh	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fe89 	bl	8007bca <USBH_AllocPipe>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fe7f 	bl	8007bca <USBH_AllocPipe>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	7899      	ldrb	r1, [r3, #2]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	78d8      	ldrb	r0, [r3, #3]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	88d2      	ldrh	r2, [r2, #6]
 8005eec:	9202      	str	r2, [sp, #8]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	9201      	str	r2, [sp, #4]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fe37 	bl	8007b6c <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7859      	ldrb	r1, [r3, #1]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	7918      	ldrb	r0, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	8912      	ldrh	r2, [r2, #8]
 8005f16:	9202      	str	r2, [sp, #8]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4623      	mov	r3, r4
 8005f20:	4602      	mov	r2, r0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fe22 	bl	8007b6c <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2200      	movs	r2, #0
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f002 f970 	bl	800821c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	789b      	ldrb	r3, [r3, #2]
 8005f40:	2200      	movs	r2, #0
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 f969 	bl	800821c <USBH_LL_SetToggle>
		status = USBH_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd90      	pop	{r4, r7, pc}

08005f58 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00e      	beq.n	8005f90 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	789b      	ldrb	r3, [r3, #2]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 fe16 	bl	8007baa <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	789b      	ldrb	r3, [r3, #2]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 fe41 	bl	8007c0c <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fe03 	bl	8007baa <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fe2e 	bl	8007c0c <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 f9b4 	bl	8008338 <free>
		phost->pActiveClass->pData = 0;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3

	return USBH_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d10e      	bne.n	800603c <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fdbd 	bl	8007baa <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	789b      	ldrb	r3, [r3, #2]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fdb7 	bl	8007baa <USBH_ClosePipe>
  }
  return USBH_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d010      	beq.n	800608a <USBH_MIDI_Process+0x44>
 8006068:	2b02      	cmp	r3, #2
 800606a:	dc1b      	bgt.n	80060a4 <USBH_MIDI_Process+0x5e>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <USBH_MIDI_Process+0x30>
 8006070:	2b01      	cmp	r3, #1
 8006072:	d003      	beq.n	800607c <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8006074:	e016      	b.n	80060a4 <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]
		break;
 800607a:	e016      	b.n	80060aa <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f84f 	bl	8006120 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8bd 	bl	8006202 <MIDI_ProcessReception>
		break;
 8006088:	e00f      	b.n	80060aa <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 800608a:	2100      	movs	r1, #0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 ffe7 	bl	8007060 <USBH_ClrFeature>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
		break;
 80060a2:	e001      	b.n	80060a8 <USBH_MIDI_Process+0x62>
		break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <USBH_MIDI_Process+0x64>
		break;
 80060a8:	bf00      	nop

	}

	return status;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 80060d8:	2301      	movs	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <USBH_MIDI_Receive+0x2c>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10d      	bne.n	8006112 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2203      	movs	r2, #3
 800610c:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
}
 8006114:	4618      	mov	r0, r3
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af02      	add	r7, sp, #8
 8006126:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006132:	2300      	movs	r3, #0
 8006134:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	7e1b      	ldrb	r3, [r3, #24]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d002      	beq.n	8006144 <MIDI_ProcessTransmission+0x24>
 800613e:	2b02      	cmp	r3, #2
 8006140:	d021      	beq.n	8006186 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8006142:	e05a      	b.n	80061fa <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8a9a      	ldrh	r2, [r3, #20]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88db      	ldrh	r3, [r3, #6]
 800614c:	429a      	cmp	r2, r3
 800614e:	d90b      	bls.n	8006168 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68d9      	ldr	r1, [r3, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88da      	ldrh	r2, [r3, #6]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	789b      	ldrb	r3, [r3, #2]
 800615c:	2001      	movs	r0, #1
 800615e:	9000      	str	r0, [sp, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 fcc0 	bl	8007ae6 <USBH_BulkSendData>
 8006166:	e00a      	b.n	800617e <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68d9      	ldr	r1, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8a9a      	ldrh	r2, [r3, #20]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	789b      	ldrb	r3, [r3, #2]
 8006174:	2001      	movs	r0, #1
 8006176:	9000      	str	r0, [sp, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fcb4 	bl	8007ae6 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2202      	movs	r2, #2
 8006182:	761a      	strb	r2, [r3, #24]
		break;
 8006184:	e039      	b.n	80061fa <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f002 f81b 	bl	80081c8 <USBH_LL_GetURBState>
 8006192:	4603      	mov	r3, r0
 8006194:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d127      	bne.n	80061ec <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8a9a      	ldrh	r2, [r3, #20]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88db      	ldrh	r3, [r3, #6]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d90f      	bls.n	80061c8 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8a9a      	ldrh	r2, [r3, #20]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88db      	ldrh	r3, [r3, #6]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	88d2      	ldrh	r2, [r2, #6]
 80061c0:	441a      	add	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	e002      	b.n	80061ce <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8a9b      	ldrh	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	761a      	strb	r2, [r3, #24]
		break;
 80061dc:	e00c      	b.n	80061f8 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f866 	bl	80062b6 <USBH_MIDI_TransmitCallback>
		break;
 80061ea:	e005      	b.n	80061f8 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d102      	bne.n	80061f8 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	761a      	strb	r2, [r3, #24]
		break;
 80061f8:	bf00      	nop
	}
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006214:	2300      	movs	r3, #0
 8006216:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	7e5b      	ldrb	r3, [r3, #25]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d002      	beq.n	8006226 <MIDI_ProcessReception+0x24>
 8006220:	2b04      	cmp	r3, #4
 8006222:	d00d      	beq.n	8006240 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8006224:	e043      	b.n	80062ae <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6919      	ldr	r1, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	891a      	ldrh	r2, [r3, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fc7c 	bl	8007b30 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2204      	movs	r2, #4
 800623c:	765a      	strb	r2, [r3, #25]
		break;
 800623e:	e036      	b.n	80062ae <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 ffbe 	bl	80081c8 <USBH_LL_GetURBState>
 800624c:	4603      	mov	r3, r0
 800624e:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8006250:	7afb      	ldrb	r3, [r7, #11]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d12a      	bne.n	80062ac <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 ff21 	bl	80080a4 <USBH_LL_GetLastXferSize>
 8006262:	4603      	mov	r3, r0
 8006264:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8adb      	ldrh	r3, [r3, #22]
 800626a:	461a      	mov	r2, r3
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	dd15      	ble.n	80062a0 <MIDI_ProcessReception+0x9e>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	891b      	ldrh	r3, [r3, #8]
 8006278:	893a      	ldrh	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d910      	bls.n	80062a0 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8ada      	ldrh	r2, [r3, #22]
 8006282:	893b      	ldrh	r3, [r7, #8]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	893b      	ldrh	r3, [r7, #8]
 8006292:	441a      	add	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2203      	movs	r2, #3
 800629c:	765a      	strb	r2, [r3, #25]
		break;
 800629e:	e005      	b.n	80062ac <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fd12 	bl	8007cd0 <USBH_MIDI_ReceiveCallback>
		break;
 80062ac:	bf00      	nop
	}
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]

}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80062de:	2302      	movs	r3, #2
 80062e0:	e029      	b.n	8006336 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	79fa      	ldrb	r2, [r7, #7]
 80062e6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f81f 	bl	800633e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f001 fe04 	bl	8007f3c <USBH_LL_Init>

  return USBH_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e009      	b.n	8006364 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	33e0      	adds	r3, #224	@ 0xe0
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d9f2      	bls.n	8006350 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e009      	b.n	8006384 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638a:	d3f1      	bcc.n	8006370 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2240      	movs	r2, #64	@ 0x40
 80063b0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	331c      	adds	r3, #28
 80063dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f002 f85e 	bl	80084a4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80063ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f002 f855 	bl	80084a4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006400:	2212      	movs	r2, #18
 8006402:	2100      	movs	r1, #0
 8006404:	4618      	mov	r0, r3
 8006406:	f002 f84d 	bl	80084a4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006410:	223e      	movs	r2, #62	@ 0x3e
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f002 f845 	bl	80084a4 <memset>

  return USBH_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10e      	bne.n	8006460 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006448:	1c59      	adds	r1, r3, #1
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	33de      	adds	r3, #222	@ 0xde
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
 800645e:	e004      	b.n	800646a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006460:	2302      	movs	r3, #2
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e001      	b.n	800646a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	429a      	cmp	r2, r3
 8006492:	d204      	bcs.n	800649e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800649c:	e001      	b.n	80064a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800649e:	2302      	movs	r3, #2
 80064a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	70fb      	strb	r3, [r7, #3]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70bb      	strb	r3, [r7, #2]
 80064c6:	4613      	mov	r3, r2
 80064c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80064d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064da:	e025      	b.n	8006528 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	221a      	movs	r2, #26
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	3308      	adds	r3, #8
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	3302      	adds	r3, #2
 80064ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	795b      	ldrb	r3, [r3, #5]
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d002      	beq.n	80064fe <USBH_FindInterface+0x4e>
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	2bff      	cmp	r3, #255	@ 0xff
 80064fc:	d111      	bne.n	8006522 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006502:	78ba      	ldrb	r2, [r7, #2]
 8006504:	429a      	cmp	r2, r3
 8006506:	d002      	beq.n	800650e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006508:	78bb      	ldrb	r3, [r7, #2]
 800650a:	2bff      	cmp	r3, #255	@ 0xff
 800650c:	d109      	bne.n	8006522 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006512:	787a      	ldrb	r2, [r7, #1]
 8006514:	429a      	cmp	r2, r3
 8006516:	d002      	beq.n	800651e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006518:	787b      	ldrb	r3, [r7, #1]
 800651a:	2bff      	cmp	r3, #255	@ 0xff
 800651c:	d101      	bne.n	8006522 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	e006      	b.n	8006530 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	3301      	adds	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d9d6      	bls.n	80064dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800652e:	23ff      	movs	r3, #255	@ 0xff
}
 8006530:	4618      	mov	r0, r3
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fd35 	bl	8007fb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800654a:	2101      	movs	r1, #1
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fe4e 	bl	80081ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af04      	add	r7, sp, #16
 8006562:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006564:	2302      	movs	r3, #2
 8006566:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d102      	bne.n	800657e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2203      	movs	r2, #3
 800657c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b0b      	cmp	r3, #11
 8006586:	f200 81bb 	bhi.w	8006900 <USBH_Process+0x3a4>
 800658a:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <USBH_Process+0x34>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065f3 	.word	0x080065f3
 8006598:	0800665b 	.word	0x0800665b
 800659c:	0800689b 	.word	0x0800689b
 80065a0:	08006901 	.word	0x08006901
 80065a4:	080066fb 	.word	0x080066fb
 80065a8:	08006841 	.word	0x08006841
 80065ac:	08006731 	.word	0x08006731
 80065b0:	08006751 	.word	0x08006751
 80065b4:	0800676f 	.word	0x0800676f
 80065b8:	080067b3 	.word	0x080067b3
 80065bc:	08006883 	.word	0x08006883
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 819b 	beq.w	8006904 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80065d4:	20c8      	movs	r0, #200	@ 0xc8
 80065d6:	f001 fe54 	bl	8008282 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fd47 	bl	800806e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065f0:	e188      	b.n	8006904 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800660a:	e18a      	b.n	8006922 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006616:	d914      	bls.n	8006642 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800661e:	3301      	adds	r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800662e:	2b03      	cmp	r3, #3
 8006630:	d903      	bls.n	800663a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	220d      	movs	r2, #13
 8006636:	701a      	strb	r2, [r3, #0]
      break;
 8006638:	e173      	b.n	8006922 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
      break;
 8006640:	e16f      	b.n	8006922 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006648:	f103 020a 	add.w	r2, r3, #10
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006652:	200a      	movs	r0, #10
 8006654:	f001 fe15 	bl	8008282 <USBH_Delay>
      break;
 8006658:	e163      	b.n	8006922 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800666a:	2104      	movs	r1, #4
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006670:	2064      	movs	r0, #100	@ 0x64
 8006672:	f001 fe06 	bl	8008282 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fcd2 	bl	8008020 <USBH_LL_GetSpeed>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2205      	movs	r2, #5
 800668a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fa9b 	bl	8007bca <USBH_AllocPipe>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800669c:	2180      	movs	r1, #128	@ 0x80
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fa93 	bl	8007bca <USBH_AllocPipe>
 80066a4:	4603      	mov	r3, r0
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7919      	ldrb	r1, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80066c0:	9202      	str	r2, [sp, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	9201      	str	r2, [sp, #4]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4603      	mov	r3, r0
 80066ca:	2280      	movs	r2, #128	@ 0x80
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fa4d 	bl	8007b6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7959      	ldrb	r1, [r3, #5]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80066e6:	9202      	str	r2, [sp, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4603      	mov	r3, r0
 80066f0:	2200      	movs	r2, #0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fa3a 	bl	8007b6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066f8:	e113      	b.n	8006922 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f916 	bl	800692c <USBH_HandleEnum>
 8006700:	4603      	mov	r3, r0
 8006702:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 80fd 	bne.w	8006908 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800671c:	2b01      	cmp	r3, #1
 800671e:	d103      	bne.n	8006728 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006726:	e0ef      	b.n	8006908 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2207      	movs	r2, #7
 800672c:	701a      	strb	r2, [r3, #0]
      break;
 800672e:	e0eb      	b.n	8006908 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80e8 	beq.w	800690c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006742:	2101      	movs	r1, #1
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2208      	movs	r2, #8
 800674c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800674e:	e0dd      	b.n	800690c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc3a 	bl	8006fd2 <USBH_SetCfg>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 80d5 	bne.w	8006910 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2209      	movs	r2, #9
 800676a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800676c:	e0d0      	b.n	8006910 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d016      	beq.n	80067aa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800677c:	2101      	movs	r1, #1
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc4a 	bl	8007018 <USBH_SetFeature>
 8006784:	4603      	mov	r3, r0
 8006786:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	220a      	movs	r2, #10
 8006794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006796:	e0bd      	b.n	8006914 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b03      	cmp	r3, #3
 800679e:	f040 80b9 	bne.w	8006914 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	220a      	movs	r2, #10
 80067a6:	701a      	strb	r2, [r3, #0]
      break;
 80067a8:	e0b4      	b.n	8006914 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	220a      	movs	r2, #10
 80067ae:	701a      	strb	r2, [r3, #0]
      break;
 80067b0:	e0b0      	b.n	8006914 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80ad 	beq.w	8006918 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	e016      	b.n	80067fa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80067cc:	7bfa      	ldrb	r2, [r7, #15]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32de      	adds	r2, #222	@ 0xde
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	791a      	ldrb	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80067de:	429a      	cmp	r2, r3
 80067e0:	d108      	bne.n	80067f4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80067e2:	7bfa      	ldrb	r2, [r7, #15]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32de      	adds	r2, #222	@ 0xde
 80067e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80067f2:	e005      	b.n	8006800 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	3301      	adds	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0e5      	beq.n	80067cc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2206      	movs	r2, #6
 8006820:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006828:	2103      	movs	r1, #3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800682e:	e073      	b.n	8006918 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	220d      	movs	r2, #13
 8006834:	701a      	strb	r2, [r3, #0]
      break;
 8006836:	e06f      	b.n	8006918 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	220d      	movs	r2, #13
 800683c:	701a      	strb	r2, [r3, #0]
      break;
 800683e:	e06b      	b.n	8006918 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d017      	beq.n	800687a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
 8006856:	4603      	mov	r3, r0
 8006858:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	220b      	movs	r2, #11
 8006866:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006868:	e058      	b.n	800691c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d154      	bne.n	800691c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	220d      	movs	r2, #13
 8006876:	701a      	strb	r2, [r3, #0]
      break;
 8006878:	e050      	b.n	800691c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	220d      	movs	r2, #13
 800687e:	701a      	strb	r2, [r3, #0]
      break;
 8006880:	e04c      	b.n	800691c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d049      	beq.n	8006920 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
      }
      break;
 8006898:	e042      	b.n	8006920 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fd4b 	bl	800633e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068d6:	2105      	movs	r1, #5
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d107      	bne.n	80068f8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fe23 	bl	800653c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068f6:	e014      	b.n	8006922 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fb5b 	bl	8007fb4 <USBH_LL_Start>
      break;
 80068fe:	e010      	b.n	8006922 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006900:	bf00      	nop
 8006902:	e00e      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006904:	bf00      	nop
 8006906:	e00c      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006908:	bf00      	nop
 800690a:	e00a      	b.n	8006922 <USBH_Process+0x3c6>
    break;
 800690c:	bf00      	nop
 800690e:	e008      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006910:	bf00      	nop
 8006912:	e006      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006914:	bf00      	nop
 8006916:	e004      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 800691c:	bf00      	nop
 800691e:	e000      	b.n	8006922 <USBH_Process+0x3c6>
      break;
 8006920:	bf00      	nop
  }
  return USBH_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af04      	add	r7, sp, #16
 8006932:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006938:	2301      	movs	r3, #1
 800693a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b07      	cmp	r3, #7
 8006942:	f200 81bd 	bhi.w	8006cc0 <USBH_HandleEnum+0x394>
 8006946:	a201      	add	r2, pc, #4	@ (adr r2, 800694c <USBH_HandleEnum+0x20>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	0800696d 	.word	0x0800696d
 8006950:	08006a27 	.word	0x08006a27
 8006954:	08006a91 	.word	0x08006a91
 8006958:	08006b1b 	.word	0x08006b1b
 800695c:	08006b85 	.word	0x08006b85
 8006960:	08006bf5 	.word	0x08006bf5
 8006964:	08006c3b 	.word	0x08006c3b
 8006968:	08006c81 	.word	0x08006c81
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800696c:	2108      	movs	r1, #8
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa4c 	bl	8006e0c <USBH_Get_DevDesc>
 8006974:	4603      	mov	r3, r0
 8006976:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d12e      	bne.n	80069dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7919      	ldrb	r1, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80069a2:	9202      	str	r2, [sp, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	9201      	str	r2, [sp, #4]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4603      	mov	r3, r0
 80069ac:	2280      	movs	r2, #128	@ 0x80
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f8dc 	bl	8007b6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7959      	ldrb	r1, [r3, #5]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069c8:	9202      	str	r2, [sp, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	9201      	str	r2, [sp, #4]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4603      	mov	r3, r0
 80069d2:	2200      	movs	r2, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 f8c9 	bl	8007b6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80069da:	e173      	b.n	8006cc4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	f040 8170 	bne.w	8006cc4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069ea:	3301      	adds	r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d903      	bls.n	8006a06 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220d      	movs	r2, #13
 8006a02:	701a      	strb	r2, [r3, #0]
      break;
 8006a04:	e15e      	b.n	8006cc4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	795b      	ldrb	r3, [r3, #5]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f8fd 	bl	8007c0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f8f7 	bl	8007c0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
      break;
 8006a24:	e14e      	b.n	8006cc4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006a26:	2112      	movs	r1, #18
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f9ef 	bl	8006e0c <USBH_Get_DevDesc>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a3e:	e143      	b.n	8006cc8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f040 8140 	bne.w	8006cc8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d903      	bls.n	8006a6a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	220d      	movs	r2, #13
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e12e      	b.n	8006cc8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	795b      	ldrb	r3, [r3, #5]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f8cb 	bl	8007c0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	791b      	ldrb	r3, [r3, #4]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f8c5 	bl	8007c0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	e11b      	b.n	8006cc8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa79 	bl	8006f8a <USBH_SetAddress>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d130      	bne.n	8006b04 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006aa2:	2002      	movs	r0, #2
 8006aa4:	f001 fbed 	bl	8008282 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	7919      	ldrb	r1, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006aca:	9202      	str	r2, [sp, #8]
 8006acc:	2200      	movs	r2, #0
 8006ace:	9201      	str	r2, [sp, #4]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2280      	movs	r2, #128	@ 0x80
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 f848 	bl	8007b6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7959      	ldrb	r1, [r3, #5]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	9201      	str	r2, [sp, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4603      	mov	r3, r0
 8006afa:	2200      	movs	r2, #0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f835 	bl	8007b6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b02:	e0e3      	b.n	8006ccc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	f040 80e0 	bne.w	8006ccc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	220d      	movs	r2, #13
 8006b10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	705a      	strb	r2, [r3, #1]
      break;
 8006b18:	e0d8      	b.n	8006ccc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006b1a:	2109      	movs	r1, #9
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9a1 	bl	8006e64 <USBH_Get_CfgDesc>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b32:	e0cd      	b.n	8006cd0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	f040 80ca 	bne.w	8006cd0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006b42:	3301      	adds	r3, #1
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d903      	bls.n	8006b5e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	220d      	movs	r2, #13
 8006b5a:	701a      	strb	r2, [r3, #0]
      break;
 8006b5c:	e0b8      	b.n	8006cd0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	795b      	ldrb	r3, [r3, #5]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f851 	bl	8007c0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	791b      	ldrb	r3, [r3, #4]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f84b 	bl	8007c0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	701a      	strb	r2, [r3, #0]
      break;
 8006b82:	e0a5      	b.n	8006cd0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f969 	bl	8006e64 <USBH_Get_CfgDesc>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2205      	movs	r2, #5
 8006ba0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ba2:	e097      	b.n	8006cd4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	f040 8094 	bne.w	8006cd4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d903      	bls.n	8006bce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	220d      	movs	r2, #13
 8006bca:	701a      	strb	r2, [r3, #0]
      break;
 8006bcc:	e082      	b.n	8006cd4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	795b      	ldrb	r3, [r3, #5]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f819 	bl	8007c0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	791b      	ldrb	r3, [r3, #4]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f813 	bl	8007c0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
      break;
 8006bf2:	e06f      	b.n	8006cd4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d019      	beq.n	8006c32 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c0a:	23ff      	movs	r3, #255	@ 0xff
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f953 	bl	8006eb8 <USBH_Get_StringDesc>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2206      	movs	r2, #6
 8006c20:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c22:	e059      	b.n	8006cd8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d156      	bne.n	8006cd8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2206      	movs	r2, #6
 8006c2e:	705a      	strb	r2, [r3, #1]
      break;
 8006c30:	e052      	b.n	8006cd8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2206      	movs	r2, #6
 8006c36:	705a      	strb	r2, [r3, #1]
      break;
 8006c38:	e04e      	b.n	8006cd8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d019      	beq.n	8006c78 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006c50:	23ff      	movs	r3, #255	@ 0xff
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f930 	bl	8006eb8 <USBH_Get_StringDesc>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2207      	movs	r2, #7
 8006c66:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c68:	e038      	b.n	8006cdc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d135      	bne.n	8006cdc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2207      	movs	r2, #7
 8006c74:	705a      	strb	r2, [r3, #1]
      break;
 8006c76:	e031      	b.n	8006cdc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	705a      	strb	r2, [r3, #1]
      break;
 8006c7e:	e02d      	b.n	8006cdc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d017      	beq.n	8006cba <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c96:	23ff      	movs	r3, #255	@ 0xff
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f90d 	bl	8006eb8 <USBH_Get_StringDesc>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006cac:	e018      	b.n	8006ce0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d115      	bne.n	8006ce0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb8:	e012      	b.n	8006ce0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbe:	e00f      	b.n	8006ce0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e00e      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e00c      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e00a      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006ccc:	bf00      	nop
 8006cce:	e008      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e006      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <USBH_HandleEnum+0x3b6>
      break;
 8006ce0:	bf00      	nop
  }
  return Status;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f804 	bl	8006d2e <USBH_HandleSof>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	d10a      	bne.n	8006d56 <USBH_HandleSof+0x28>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
  }
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006d6e:	bf00      	nop
}
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006d8a:	bf00      	nop
}
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f900 	bl	8007fea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ff0b 	bl	8007c0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	795b      	ldrb	r3, [r3, #5]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 ff05 	bl	8007c0c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1e:	d901      	bls.n	8006e24 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e01b      	b.n	8006e5c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006e2a:	887b      	ldrh	r3, [r7, #2]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f872 	bl	8006f20 <USBH_GetDescriptor>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f929 	bl	80070a8 <USBH_ParseDevDesc>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	331c      	adds	r3, #28
 8006e74:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006e76:	887b      	ldrh	r3, [r7, #2]
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7c:	d901      	bls.n	8006e82 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e016      	b.n	8006eb0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f846 	bl	8006f20 <USBH_GetDescriptor>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006e9e:	887b      	ldrh	r3, [r7, #2]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9af 	bl	8007208 <USBH_ParseCfgDesc>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	72fb      	strb	r3, [r7, #11]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006ecc:	893b      	ldrh	r3, [r7, #8]
 8006ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed2:	d802      	bhi.n	8006eda <USBH_Get_StringDesc+0x22>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e01c      	b.n	8006f18 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006ee6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006eee:	893b      	ldrh	r3, [r7, #8]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f812 	bl	8006f20 <USBH_GetDescriptor>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f0c:	893a      	ldrh	r2, [r7, #8]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fb8d 	bl	8007630 <USBH_ParseStringDesc>
  }

  return status;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	72fb      	strb	r3, [r7, #11]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d11c      	bne.n	8006f74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2206      	movs	r2, #6
 8006f4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	893a      	ldrh	r2, [r7, #8]
 8006f50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f52:	893b      	ldrh	r3, [r7, #8]
 8006f54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f5c:	d104      	bne.n	8006f68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f240 4209 	movw	r2, #1033	@ 0x409
 8006f64:	829a      	strh	r2, [r3, #20]
 8006f66:	e002      	b.n	8006f6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8b3a      	ldrh	r2, [r7, #24]
 8006f72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006f74:	8b3b      	ldrh	r3, [r7, #24]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fba5 	bl	80076ca <USBH_CtlReq>
 8006f80:	4603      	mov	r3, r0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	789b      	ldrb	r3, [r3, #2]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10f      	bne.n	8006fbe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2205      	movs	r2, #5
 8006fa8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fb81 	bl	80076ca <USBH_CtlReq>
 8006fc8:	4603      	mov	r3, r0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	789b      	ldrb	r3, [r3, #2]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10e      	bne.n	8007004 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2209      	movs	r2, #9
 8006ff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	887a      	ldrh	r2, [r7, #2]
 8006ff6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007004:	2200      	movs	r2, #0
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb5e 	bl	80076ca <USBH_CtlReq>
 800700e:	4603      	mov	r3, r0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	789b      	ldrb	r3, [r3, #2]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10f      	bne.n	800704c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2203      	movs	r2, #3
 8007036:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb3a 	bl	80076ca <USBH_CtlReq>
 8007056:	4603      	mov	r3, r0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10f      	bne.n	8007094 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb16 	bl	80076ca <USBH_CtlReq>
 800709e:	4603      	mov	r3, r0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80070bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e094      	b.n	80071f6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	785a      	ldrb	r2, [r3, #1]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3302      	adds	r3, #2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3303      	adds	r3, #3
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	791a      	ldrb	r2, [r3, #4]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	795a      	ldrb	r2, [r3, #5]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	799a      	ldrb	r2, [r3, #6]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	79da      	ldrb	r2, [r3, #7]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007126:	2b01      	cmp	r3, #1
 8007128:	d11b      	bne.n	8007162 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	79db      	ldrb	r3, [r3, #7]
 800712e:	2b20      	cmp	r3, #32
 8007130:	dc0f      	bgt.n	8007152 <USBH_ParseDevDesc+0xaa>
 8007132:	2b08      	cmp	r3, #8
 8007134:	db0f      	blt.n	8007156 <USBH_ParseDevDesc+0xae>
 8007136:	3b08      	subs	r3, #8
 8007138:	4a32      	ldr	r2, [pc, #200]	@ (8007204 <USBH_ParseDevDesc+0x15c>)
 800713a:	fa22 f303 	lsr.w	r3, r2, r3
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <USBH_ParseDevDesc+0xb6>
 8007150:	e001      	b.n	8007156 <USBH_ParseDevDesc+0xae>
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d003      	beq.n	800715e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2208      	movs	r2, #8
 800715a:	71da      	strb	r2, [r3, #7]
        break;
 800715c:	e000      	b.n	8007160 <USBH_ParseDevDesc+0xb8>
        break;
 800715e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007160:	e00e      	b.n	8007180 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007168:	2b02      	cmp	r3, #2
 800716a:	d107      	bne.n	800717c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	79db      	ldrb	r3, [r3, #7]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d005      	beq.n	8007180 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2208      	movs	r2, #8
 8007178:	71da      	strb	r2, [r3, #7]
 800717a:	e001      	b.n	8007180 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800717c:	2303      	movs	r3, #3
 800717e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	2b08      	cmp	r3, #8
 8007184:	d936      	bls.n	80071f4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3308      	adds	r3, #8
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3309      	adds	r3, #9
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	b29b      	uxth	r3, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	330a      	adds	r3, #10
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	330b      	adds	r3, #11
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	330c      	adds	r3, #12
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	330d      	adds	r3, #13
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	7b9a      	ldrb	r2, [r3, #14]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7bda      	ldrb	r2, [r3, #15]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	7c1a      	ldrb	r2, [r3, #16]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	7c5a      	ldrb	r2, [r3, #17]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	01000101 	.word	0x01000101

08007208 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	@ 0x30
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800721c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	e0da      	b.n	80073f0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b09      	cmp	r3, #9
 8007244:	d002      	beq.n	800724c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	2209      	movs	r2, #9
 800724a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785a      	ldrb	r2, [r3, #1]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3302      	adds	r3, #2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3303      	adds	r3, #3
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	4313      	orrs	r3, r2
 8007270:	b29b      	uxth	r3, r3
 8007272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007276:	bf28      	it	cs
 8007278:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800727c:	b29a      	uxth	r2, r3
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	791a      	ldrb	r2, [r3, #4]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	795a      	ldrb	r2, [r3, #5]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	799a      	ldrb	r2, [r3, #6]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	79da      	ldrb	r2, [r3, #7]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	7a1a      	ldrb	r2, [r3, #8]
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	f240 809d 	bls.w	80073ec <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80072b2:	2309      	movs	r3, #9
 80072b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072ba:	e081      	b.n	80073c0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072bc:	f107 0316 	add.w	r3, r7, #22
 80072c0:	4619      	mov	r1, r3
 80072c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c4:	f000 f9e7 	bl	8007696 <USBH_GetNextDesc>
 80072c8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d176      	bne.n	80073c0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d002      	beq.n	80072e0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	2209      	movs	r2, #9
 80072de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e4:	221a      	movs	r2, #26
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	3308      	adds	r3, #8
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	4413      	add	r3, r2
 80072f0:	3302      	adds	r3, #2
 80072f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80072f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072f6:	69f8      	ldr	r0, [r7, #28]
 80072f8:	f000 f87e 	bl	80073f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007306:	e043      	b.n	8007390 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007308:	f107 0316 	add.w	r3, r7, #22
 800730c:	4619      	mov	r1, r3
 800730e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007310:	f000 f9c1 	bl	8007696 <USBH_GetNextDesc>
 8007314:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d138      	bne.n	8007390 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	795b      	ldrb	r3, [r3, #5]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d113      	bne.n	800734e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800732a:	2b02      	cmp	r3, #2
 800732c:	d003      	beq.n	8007336 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	799b      	ldrb	r3, [r3, #6]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d10b      	bne.n	800734e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	79db      	ldrb	r3, [r3, #7]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <USBH_ParseCfgDesc+0x14e>
 800733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d007      	beq.n	8007356 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	2209      	movs	r2, #9
 800734a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800734c:	e003      	b.n	8007356 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	2207      	movs	r2, #7
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e000      	b.n	8007358 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007356:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800735c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007360:	3201      	adds	r2, #1
 8007362:	00d2      	lsls	r2, r2, #3
 8007364:	211a      	movs	r1, #26
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	4413      	add	r3, r2
 800736c:	3308      	adds	r3, #8
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	4413      	add	r3, r2
 8007372:	3304      	adds	r3, #4
 8007374:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f870 	bl	8007460 <USBH_ParseEPDesc>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800738a:	3301      	adds	r3, #1
 800738c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	791b      	ldrb	r3, [r3, #4]
 8007394:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007398:	429a      	cmp	r2, r3
 800739a:	d204      	bcs.n	80073a6 <USBH_ParseCfgDesc+0x19e>
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	885a      	ldrh	r2, [r3, #2]
 80073a0:	8afb      	ldrh	r3, [r7, #22]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d8b0      	bhi.n	8007308 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d201      	bcs.n	80073b6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e01c      	b.n	80073f0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80073b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073ba:	3301      	adds	r3, #1
 80073bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d805      	bhi.n	80073d4 <USBH_ParseCfgDesc+0x1cc>
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	885a      	ldrh	r2, [r3, #2]
 80073cc:	8afb      	ldrh	r3, [r7, #22]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	f63f af74 	bhi.w	80072bc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	791b      	ldrb	r3, [r3, #4]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	bf28      	it	cs
 80073dc:	2302      	movcs	r3, #2
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d201      	bcs.n	80073ec <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e001      	b.n	80073f0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80073ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3730      	adds	r7, #48	@ 0x30
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785a      	ldrb	r2, [r3, #1]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	789a      	ldrb	r2, [r3, #2]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	78da      	ldrb	r2, [r3, #3]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	3304      	adds	r3, #4
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	bf28      	it	cs
 800742c:	2302      	movcs	r3, #2
 800742e:	b2da      	uxtb	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	795a      	ldrb	r2, [r3, #5]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	799a      	ldrb	r2, [r3, #6]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	79da      	ldrb	r2, [r3, #7]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	7a1a      	ldrb	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	721a      	strb	r2, [r3, #8]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	785a      	ldrb	r2, [r3, #1]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	789a      	ldrb	r2, [r3, #2]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	78da      	ldrb	r2, [r3, #3]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3305      	adds	r3, #5
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	799a      	ldrb	r2, [r3, #6]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	889b      	ldrh	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80074be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c2:	d804      	bhi.n	80074ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80074c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074cc:	d901      	bls.n	80074d2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80074ce:	2303      	movs	r3, #3
 80074d0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d136      	bne.n	800754a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	78db      	ldrb	r3, [r3, #3]
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d108      	bne.n	80074fa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	889b      	ldrh	r3, [r3, #4]
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f0:	f240 8097 	bls.w	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80074f4:	2303      	movs	r3, #3
 80074f6:	75fb      	strb	r3, [r7, #23]
 80074f8:	e093      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	78db      	ldrb	r3, [r3, #3]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d107      	bne.n	8007516 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	889b      	ldrh	r3, [r3, #4]
 800750a:	2b40      	cmp	r3, #64	@ 0x40
 800750c:	f240 8089 	bls.w	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007510:	2303      	movs	r3, #3
 8007512:	75fb      	strb	r3, [r7, #23]
 8007514:	e085      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b01      	cmp	r3, #1
 8007520:	d005      	beq.n	800752e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	78db      	ldrb	r3, [r3, #3]
 8007526:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800752a:	2b03      	cmp	r3, #3
 800752c:	d10a      	bne.n	8007544 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	799b      	ldrb	r3, [r3, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <USBH_ParseEPDesc+0xde>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	799b      	ldrb	r3, [r3, #6]
 800753a:	2b10      	cmp	r3, #16
 800753c:	d970      	bls.n	8007620 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800753e:	2303      	movs	r3, #3
 8007540:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007542:	e06d      	b.n	8007620 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007544:	2303      	movs	r3, #3
 8007546:	75fb      	strb	r3, [r7, #23]
 8007548:	e06b      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007550:	2b01      	cmp	r3, #1
 8007552:	d13c      	bne.n	80075ce <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	78db      	ldrb	r3, [r3, #3]
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d005      	beq.n	800756c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	78db      	ldrb	r3, [r3, #3]
 8007564:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	889b      	ldrh	r3, [r3, #4]
 8007570:	2b40      	cmp	r3, #64	@ 0x40
 8007572:	d956      	bls.n	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007574:	2303      	movs	r3, #3
 8007576:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007578:	e053      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	78db      	ldrb	r3, [r3, #3]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10e      	bne.n	80075a4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	799b      	ldrb	r3, [r3, #6]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007592:	2b10      	cmp	r3, #16
 8007594:	d803      	bhi.n	800759e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d941      	bls.n	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800759e:	2303      	movs	r3, #3
 80075a0:	75fb      	strb	r3, [r7, #23]
 80075a2:	e03e      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	78db      	ldrb	r3, [r3, #3]
 80075a8:	f003 0303 	and.w	r3, r3, #3
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d10b      	bne.n	80075c8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	799b      	ldrb	r3, [r3, #6]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <USBH_ParseEPDesc+0x162>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	889b      	ldrh	r3, [r3, #4]
 80075bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c0:	d32f      	bcc.n	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80075c2:	2303      	movs	r3, #3
 80075c4:	75fb      	strb	r3, [r7, #23]
 80075c6:	e02c      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
 80075cc:	e029      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d120      	bne.n	800761a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	889b      	ldrh	r3, [r3, #4]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d01a      	beq.n	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
 80075f0:	e017      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d10a      	bne.n	8007614 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	799b      	ldrb	r3, [r3, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <USBH_ParseEPDesc+0x1ae>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	889b      	ldrh	r3, [r3, #4]
 800760a:	2b08      	cmp	r3, #8
 800760c:	d909      	bls.n	8007622 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800760e:	2303      	movs	r3, #3
 8007610:	75fb      	strb	r3, [r7, #23]
 8007612:	e006      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007614:	2303      	movs	r3, #3
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	e003      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800761a:	2303      	movs	r3, #3
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	e000      	b.n	8007622 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007620:	bf00      	nop
  }

  return status;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d120      	bne.n	800768a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	1e9a      	subs	r2, r3, #2
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	4293      	cmp	r3, r2
 8007652:	bf28      	it	cs
 8007654:	4613      	movcs	r3, r2
 8007656:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3302      	adds	r3, #2
 800765c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800765e:	2300      	movs	r3, #0
 8007660:	82fb      	strh	r3, [r7, #22]
 8007662:	e00b      	b.n	800767c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007664:	8afb      	ldrh	r3, [r7, #22]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	3302      	adds	r3, #2
 800767a:	82fb      	strh	r3, [r7, #22]
 800767c:	8afa      	ldrh	r2, [r7, #22]
 800767e:	8abb      	ldrh	r3, [r7, #20]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3ef      	bcc.n	8007664 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
  }
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	4413      	add	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	4613      	mov	r3, r2
 80076d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d002      	beq.n	80076ea <USBH_CtlReq+0x20>
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d00f      	beq.n	8007708 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076e8:	e027      	b.n	800773a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	88fa      	ldrh	r2, [r7, #6]
 80076f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2202      	movs	r2, #2
 8007700:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007702:	2301      	movs	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]
      break;
 8007706:	e018      	b.n	800773a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f81b 	bl	8007744 <USBH_HandleControl>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <USBH_CtlReq+0x54>
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d106      	bne.n	800772c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	761a      	strb	r2, [r3, #24]
      break;
 800772a:	e005      	b.n	8007738 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d102      	bne.n	8007738 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	709a      	strb	r2, [r3, #2]
      break;
 8007738:	bf00      	nop
  }
  return status;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af02      	add	r7, sp, #8
 800774a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7e1b      	ldrb	r3, [r3, #24]
 8007758:	3b01      	subs	r3, #1
 800775a:	2b0a      	cmp	r3, #10
 800775c:	f200 8156 	bhi.w	8007a0c <USBH_HandleControl+0x2c8>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <USBH_HandleControl+0x24>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007795 	.word	0x08007795
 800776c:	080077af 	.word	0x080077af
 8007770:	08007819 	.word	0x08007819
 8007774:	0800783f 	.word	0x0800783f
 8007778:	08007877 	.word	0x08007877
 800777c:	080078a1 	.word	0x080078a1
 8007780:	080078f3 	.word	0x080078f3
 8007784:	08007915 	.word	0x08007915
 8007788:	08007951 	.word	0x08007951
 800778c:	08007977 	.word	0x08007977
 8007790:	080079b5 	.word	0x080079b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f103 0110 	add.w	r1, r3, #16
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	795b      	ldrb	r3, [r3, #5]
 800779e:	461a      	mov	r2, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f943 	bl	8007a2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	761a      	strb	r2, [r3, #24]
      break;
 80077ac:	e139      	b.n	8007a22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fd07 	bl	80081c8 <USBH_LL_GetURBState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d11e      	bne.n	8007802 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7c1b      	ldrb	r3, [r3, #16]
 80077c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	8adb      	ldrh	r3, [r3, #22]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	2b80      	cmp	r3, #128	@ 0x80
 80077da:	d103      	bne.n	80077e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2203      	movs	r2, #3
 80077e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077e2:	e115      	b.n	8007a10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2205      	movs	r2, #5
 80077e8:	761a      	strb	r2, [r3, #24]
      break;
 80077ea:	e111      	b.n	8007a10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077ec:	7b7b      	ldrb	r3, [r7, #13]
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d103      	bne.n	80077fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2209      	movs	r2, #9
 80077f6:	761a      	strb	r2, [r3, #24]
      break;
 80077f8:	e10a      	b.n	8007a10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2207      	movs	r2, #7
 80077fe:	761a      	strb	r2, [r3, #24]
      break;
 8007800:	e106      	b.n	8007a10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d003      	beq.n	8007810 <USBH_HandleControl+0xcc>
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b02      	cmp	r3, #2
 800780c:	f040 8100 	bne.w	8007a10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	220b      	movs	r2, #11
 8007814:	761a      	strb	r2, [r3, #24]
      break;
 8007816:	e0fb      	b.n	8007a10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6899      	ldr	r1, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	899a      	ldrh	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	791b      	ldrb	r3, [r3, #4]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f93a 	bl	8007aaa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2204      	movs	r2, #4
 800783a:	761a      	strb	r2, [r3, #24]
      break;
 800783c:	e0f1      	b.n	8007a22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fcbf 	bl	80081c8 <USBH_LL_GetURBState>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d102      	bne.n	800785a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2209      	movs	r2, #9
 8007858:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b05      	cmp	r3, #5
 800785e:	d102      	bne.n	8007866 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007860:	2303      	movs	r3, #3
 8007862:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007864:	e0d6      	b.n	8007a14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b04      	cmp	r3, #4
 800786a:	f040 80d3 	bne.w	8007a14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	220b      	movs	r2, #11
 8007872:	761a      	strb	r2, [r3, #24]
      break;
 8007874:	e0ce      	b.n	8007a14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6899      	ldr	r1, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	899a      	ldrh	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	795b      	ldrb	r3, [r3, #5]
 8007882:	2001      	movs	r0, #1
 8007884:	9000      	str	r0, [sp, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f8ea 	bl	8007a60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2206      	movs	r2, #6
 800789c:	761a      	strb	r2, [r3, #24]
      break;
 800789e:	e0c0      	b.n	8007a22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	795b      	ldrb	r3, [r3, #5]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc8e 	bl	80081c8 <USBH_LL_GetURBState>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d103      	bne.n	80078be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2207      	movs	r2, #7
 80078ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078bc:	e0ac      	b.n	8007a18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	d105      	bne.n	80078d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220c      	movs	r2, #12
 80078c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
      break;
 80078ce:	e0a3      	b.n	8007a18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d103      	bne.n	80078de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	761a      	strb	r2, [r3, #24]
      break;
 80078dc:	e09c      	b.n	8007a18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	f040 8099 	bne.w	8007a18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	220b      	movs	r2, #11
 80078ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078ec:	2302      	movs	r3, #2
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e092      	b.n	8007a18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8d5 	bl	8007aaa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007906:	b29a      	uxth	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2208      	movs	r2, #8
 8007910:	761a      	strb	r2, [r3, #24]

      break;
 8007912:	e086      	b.n	8007a22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc54 	bl	80081c8 <USBH_LL_GetURBState>
 8007920:	4603      	mov	r3, r0
 8007922:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d105      	bne.n	8007936 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	220d      	movs	r2, #13
 800792e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007934:	e072      	b.n	8007a1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b04      	cmp	r3, #4
 800793a:	d103      	bne.n	8007944 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220b      	movs	r2, #11
 8007940:	761a      	strb	r2, [r3, #24]
      break;
 8007942:	e06b      	b.n	8007a1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b05      	cmp	r3, #5
 8007948:	d168      	bne.n	8007a1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
      break;
 800794e:	e065      	b.n	8007a1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	795b      	ldrb	r3, [r3, #5]
 8007954:	2201      	movs	r2, #1
 8007956:	9200      	str	r2, [sp, #0]
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f87f 	bl	8007a60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007968:	b29a      	uxth	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220a      	movs	r2, #10
 8007972:	761a      	strb	r2, [r3, #24]
      break;
 8007974:	e055      	b.n	8007a22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fc23 	bl	80081c8 <USBH_LL_GetURBState>
 8007982:	4603      	mov	r3, r0
 8007984:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d105      	bne.n	8007998 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	220d      	movs	r2, #13
 8007994:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007996:	e043      	b.n	8007a20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d103      	bne.n	80079a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2209      	movs	r2, #9
 80079a2:	761a      	strb	r2, [r3, #24]
      break;
 80079a4:	e03c      	b.n	8007a20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d139      	bne.n	8007a20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220b      	movs	r2, #11
 80079b0:	761a      	strb	r2, [r3, #24]
      break;
 80079b2:	e035      	b.n	8007a20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7e5b      	ldrb	r3, [r3, #25]
 80079b8:	3301      	adds	r3, #1
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	765a      	strb	r2, [r3, #25]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7e5b      	ldrb	r3, [r3, #25]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d806      	bhi.n	80079d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079d4:	e025      	b.n	8007a22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079dc:	2106      	movs	r1, #6
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	795b      	ldrb	r3, [r3, #5]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f90c 	bl	8007c0c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	791b      	ldrb	r3, [r3, #4]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f906 	bl	8007c0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a06:	2302      	movs	r3, #2
 8007a08:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0a:	e00a      	b.n	8007a22 <USBH_HandleControl+0x2de>

    default:
      break;
 8007a0c:	bf00      	nop
 8007a0e:	e008      	b.n	8007a22 <USBH_HandleControl+0x2de>
      break;
 8007a10:	bf00      	nop
 8007a12:	e006      	b.n	8007a22 <USBH_HandleControl+0x2de>
      break;
 8007a14:	bf00      	nop
 8007a16:	e004      	b.n	8007a22 <USBH_HandleControl+0x2de>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e002      	b.n	8007a22 <USBH_HandleControl+0x2de>
      break;
 8007a1c:	bf00      	nop
 8007a1e:	e000      	b.n	8007a22 <USBH_HandleControl+0x2de>
      break;
 8007a20:	bf00      	nop
  }

  return status;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af04      	add	r7, sp, #16
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a3a:	79f9      	ldrb	r1, [r7, #7]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	2308      	movs	r3, #8
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2200      	movs	r2, #0
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fb88 	bl	8008166 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af04      	add	r7, sp, #16
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	460b      	mov	r3, r1
 8007a70:	80fb      	strh	r3, [r7, #6]
 8007a72:	4613      	mov	r3, r2
 8007a74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a84:	7979      	ldrb	r1, [r7, #5]
 8007a86:	7e3b      	ldrb	r3, [r7, #24]
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	9302      	str	r3, [sp, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	2301      	movs	r3, #1
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2300      	movs	r3, #0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fb63 	bl	8008166 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b088      	sub	sp, #32
 8007aae:	af04      	add	r7, sp, #16
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	460b      	mov	r3, r1
 8007aba:	80fb      	strh	r3, [r7, #6]
 8007abc:	4613      	mov	r3, r2
 8007abe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ac0:	7979      	ldrb	r1, [r7, #5]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9303      	str	r3, [sp, #12]
 8007ac6:	88fb      	ldrh	r3, [r7, #6]
 8007ac8:	9302      	str	r3, [sp, #8]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fb45 	bl	8008166 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007adc:	2300      	movs	r3, #0

}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b088      	sub	sp, #32
 8007aea:	af04      	add	r7, sp, #16
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	4611      	mov	r1, r2
 8007af2:	461a      	mov	r2, r3
 8007af4:	460b      	mov	r3, r1
 8007af6:	80fb      	strh	r3, [r7, #6]
 8007af8:	4613      	mov	r3, r2
 8007afa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b0a:	7979      	ldrb	r1, [r7, #5]
 8007b0c:	7e3b      	ldrb	r3, [r7, #24]
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fb20 	bl	8008166 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af04      	add	r7, sp, #16
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	460b      	mov	r3, r1
 8007b40:	80fb      	strh	r3, [r7, #6]
 8007b42:	4613      	mov	r3, r2
 8007b44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b46:	7979      	ldrb	r1, [r7, #5]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	2301      	movs	r3, #1
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2302      	movs	r3, #2
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fb02 	bl	8008166 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af04      	add	r7, sp, #16
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	70fb      	strb	r3, [r7, #3]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70bb      	strb	r3, [r7, #2]
 8007b82:	4613      	mov	r3, r2
 8007b84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b86:	7878      	ldrb	r0, [r7, #1]
 8007b88:	78ba      	ldrb	r2, [r7, #2]
 8007b8a:	78f9      	ldrb	r1, [r7, #3]
 8007b8c:	8b3b      	ldrh	r3, [r7, #24]
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	7d3b      	ldrb	r3, [r7, #20]
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	7c3b      	ldrb	r3, [r7, #16]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa95 	bl	80080ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fab4 	bl	8008128 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f836 	bl	8007c48 <USBH_GetFreePipe>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007be0:	89fb      	ldrh	r3, [r7, #14]
 8007be2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00a      	beq.n	8007c00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	89fb      	ldrh	r3, [r7, #14]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	33e0      	adds	r3, #224	@ 0xe0
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c00:	89fb      	ldrh	r3, [r7, #14]
 8007c02:	b2db      	uxtb	r3, r3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	2b0f      	cmp	r3, #15
 8007c1c:	d80d      	bhi.n	8007c3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	33e0      	adds	r3, #224	@ 0xe0
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	33e0      	adds	r3, #224	@ 0xe0
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
 8007c58:	e00f      	b.n	8007c7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	33e0      	adds	r3, #224	@ 0xe0
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	e007      	b.n	8007c84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	3301      	adds	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	d9ec      	bls.n	8007c5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <MIDI_Application>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MIDI_Application(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
	if (Appli_state == APPLICATION_READY)
 8007c94:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc4 <MIDI_Application+0x34>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d107      	bne.n	8007cac <MIDI_Application+0x1c>
	{
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8007c9c:	2240      	movs	r2, #64	@ 0x40
 8007c9e:	490a      	ldr	r1, [pc, #40]	@ (8007cc8 <MIDI_Application+0x38>)
 8007ca0:	480a      	ldr	r0, [pc, #40]	@ (8007ccc <MIDI_Application+0x3c>)
 8007ca2:	f7fe fa12 	bl	80060ca <USBH_MIDI_Receive>
		Appli_state = APPLICATION_START;
 8007ca6:	4b07      	ldr	r3, [pc, #28]	@ (8007cc4 <MIDI_Application+0x34>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
	if (Appli_state == APPLICATION_START)
	{
		//....pffff......grrrrr......
	}

	if (Appli_state == APPLICATION_DISCONNECT)
 8007cac:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <MIDI_Application+0x34>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d105      	bne.n	8007cc0 <MIDI_Application+0x30>
	{
		Appli_state = APPLICATION_IDLE;
 8007cb4:	4b03      	ldr	r3, [pc, #12]	@ (8007cc4 <MIDI_Application+0x34>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8007cba:	4804      	ldr	r0, [pc, #16]	@ (8007ccc <MIDI_Application+0x3c>)
 8007cbc:	f7fe f9a1 	bl	8006002 <USBH_MIDI_Stop>
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200005a4 	.word	0x200005a4
 8007cc8:	2000018c 	.word	0x2000018c
 8007ccc:	200001cc 	.word	0x200001cc

08007cd0 <USBH_MIDI_ReceiveCallback>:
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, 30, 10);
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
}

void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	/*if(MIDI_RX_Buffer[0]!=0xff){
		USBH_MIDI_Stop(&hUsbHostFS);
		HAL_UART_Transmit_DMA(&huart2, MIDI_RX_Buffer, RX_BUFF_SIZE);
	}*/
	//else
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, 30, 10);
 8007cd8:	230a      	movs	r3, #10
 8007cda:	221e      	movs	r2, #30
 8007cdc:	4906      	ldr	r1, [pc, #24]	@ (8007cf8 <USBH_MIDI_ReceiveCallback+0x28>)
 8007cde:	4807      	ldr	r0, [pc, #28]	@ (8007cfc <USBH_MIDI_ReceiveCallback+0x2c>)
 8007ce0:	f7fc faf8 	bl	80042d4 <HAL_UART_Transmit>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8007ce4:	2240      	movs	r2, #64	@ 0x40
 8007ce6:	4906      	ldr	r1, [pc, #24]	@ (8007d00 <USBH_MIDI_ReceiveCallback+0x30>)
 8007ce8:	4806      	ldr	r0, [pc, #24]	@ (8007d04 <USBH_MIDI_ReceiveCallback+0x34>)
 8007cea:	f7fe f9ee 	bl	80060ca <USBH_MIDI_Receive>
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200005a8 	.word	0x200005a8
 8007cfc:	200000e0 	.word	0x200000e0
 8007d00:	2000018c 	.word	0x2000018c
 8007d04:	200001cc 	.word	0x200001cc

08007d08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	4910      	ldr	r1, [pc, #64]	@ (8007d50 <MX_USB_HOST_Init+0x48>)
 8007d10:	4810      	ldr	r0, [pc, #64]	@ (8007d54 <MX_USB_HOST_Init+0x4c>)
 8007d12:	f7fe fada 	bl	80062ca <USBH_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d1c:	f7f8 fd10 	bl	8000740 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8007d20:	490d      	ldr	r1, [pc, #52]	@ (8007d58 <MX_USB_HOST_Init+0x50>)
 8007d22:	480c      	ldr	r0, [pc, #48]	@ (8007d54 <MX_USB_HOST_Init+0x4c>)
 8007d24:	f7fe fb7e 	bl	8006424 <USBH_RegisterClass>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d2e:	f7f8 fd07 	bl	8000740 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d32:	4808      	ldr	r0, [pc, #32]	@ (8007d54 <MX_USB_HOST_Init+0x4c>)
 8007d34:	f7fe fc02 	bl	800653c <USBH_Start>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d3e:	f7f8 fcff 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8007d42:	2240      	movs	r2, #64	@ 0x40
 8007d44:	4905      	ldr	r1, [pc, #20]	@ (8007d5c <MX_USB_HOST_Init+0x54>)
 8007d46:	4803      	ldr	r0, [pc, #12]	@ (8007d54 <MX_USB_HOST_Init+0x4c>)
 8007d48:	f7fe f9bf 	bl	80060ca <USBH_MIDI_Receive>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d4c:	bf00      	nop
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	200001cc 	.word	0x200001cc
 8007d58:	2000000c 	.word	0x2000000c
 8007d5c:	2000018c 	.word	0x2000018c

08007d60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d64:	4802      	ldr	r0, [pc, #8]	@ (8007d70 <MX_USB_HOST_Process+0x10>)
 8007d66:	f7fe fbf9 	bl	800655c <USBH_Process>
}
 8007d6a:	bf00      	nop
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	200001cc 	.word	0x200001cc

08007d74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d819      	bhi.n	8007dbc <USBH_UserProcess+0x48>
 8007d88:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <USBH_UserProcess+0x1c>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007db5 	.word	0x08007db5
 8007da0:	08007da5 	.word	0x08007da5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007da4:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <USBH_UserProcess+0x58>)
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]
  break;
 8007daa:	e008      	b.n	8007dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <USBH_UserProcess+0x58>)
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
  break;
 8007db2:	e004      	b.n	8007dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007db4:	4b05      	ldr	r3, [pc, #20]	@ (8007dcc <USBH_UserProcess+0x58>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	701a      	strb	r2, [r3, #0]
  break;
 8007dba:	e000      	b.n	8007dbe <USBH_UserProcess+0x4a>

  default:
  break;
 8007dbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	200005a4 	.word	0x200005a4

08007dd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08a      	sub	sp, #40	@ 0x28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007df0:	d147      	bne.n	8007e82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	4b25      	ldr	r3, [pc, #148]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	4a24      	ldr	r2, [pc, #144]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e02:	4b22      	ldr	r3, [pc, #136]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	4619      	mov	r1, r3
 8007e22:	481b      	ldr	r0, [pc, #108]	@ (8007e90 <HAL_HCD_MspInit+0xc0>)
 8007e24:	f7f9 fa84 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e36:	2303      	movs	r3, #3
 8007e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	4619      	mov	r1, r3
 8007e44:	4812      	ldr	r0, [pc, #72]	@ (8007e90 <HAL_HCD_MspInit+0xc0>)
 8007e46:	f7f9 fa73 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e4a:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e54:	6353      	str	r3, [r2, #52]	@ 0x34
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e66:	4b09      	ldr	r3, [pc, #36]	@ (8007e8c <HAL_HCD_MspInit+0xbc>)
 8007e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	2043      	movs	r0, #67	@ 0x43
 8007e78:	f7f8 ff39 	bl	8000cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e7c:	2043      	movs	r0, #67	@ 0x43
 8007e7e:	f7f8 ff52 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e82:	bf00      	nop
 8007e84:	3728      	adds	r7, #40	@ 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	40020000 	.word	0x40020000

08007e94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe ff31 	bl	8006d0a <USBH_LL_IncTimer>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe ff69 	bl	8006d96 <USBH_LL_Connect>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe ff72 	bl	8006dc4 <USBH_LL_Disconnect>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe ff23 	bl	8006d5e <USBH_LL_PortEnabled>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe ff23 	bl	8006d7a <USBH_LL_PortDisabled>
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d12a      	bne.n	8007fa4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f4e:	4a18      	ldr	r2, [pc, #96]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f5a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f5e:	4b14      	ldr	r3, [pc, #80]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f66:	4b12      	ldr	r3, [pc, #72]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f68:	2208      	movs	r2, #8
 8007f6a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f6c:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f72:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f78:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f84:	480a      	ldr	r0, [pc, #40]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f86:	f7f9 fb88 	bl	800169a <HAL_HCD_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f90:	f7f8 fbd6 	bl	8000740 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f94:	4806      	ldr	r0, [pc, #24]	@ (8007fb0 <USBH_LL_Init+0x74>)
 8007f96:	f7f9 ffe9 	bl	8001f6c <HAL_HCD_GetCurrentFrame>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fe fea4 	bl	8006cec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200005c8 	.word	0x200005c8

08007fb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f9 ff56 	bl	8001e7c <HAL_HCD_Start>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f95e 	bl	8008298 <USBH_Get_USB_Status>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008000:	4618      	mov	r0, r3
 8008002:	f7f9 ff5e 	bl	8001ec2 <HAL_HCD_Stop>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f943 	bl	8008298 <USBH_Get_USB_Status>
 8008012:	4603      	mov	r3, r0
 8008014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008016:	7bbb      	ldrb	r3, [r7, #14]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008032:	4618      	mov	r0, r3
 8008034:	f7f9 ffa8 	bl	8001f88 <HAL_HCD_GetCurrentSpeed>
 8008038:	4603      	mov	r3, r0
 800803a:	2b02      	cmp	r3, #2
 800803c:	d00c      	beq.n	8008058 <USBH_LL_GetSpeed+0x38>
 800803e:	2b02      	cmp	r3, #2
 8008040:	d80d      	bhi.n	800805e <USBH_LL_GetSpeed+0x3e>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <USBH_LL_GetSpeed+0x2c>
 8008046:	2b01      	cmp	r3, #1
 8008048:	d003      	beq.n	8008052 <USBH_LL_GetSpeed+0x32>
 800804a:	e008      	b.n	800805e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	e008      	b.n	8008064 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
    break;
 8008056:	e005      	b.n	8008064 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008058:	2302      	movs	r3, #2
 800805a:	73fb      	strb	r3, [r7, #15]
    break;
 800805c:	e002      	b.n	8008064 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]
    break;
 8008062:	bf00      	nop
  }
  return  speed;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008084:	4618      	mov	r0, r3
 8008086:	f7f9 ff39 	bl	8001efc <HAL_HCD_ResetPort>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f901 	bl	8008298 <USBH_Get_USB_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809a:	7bbb      	ldrb	r3, [r7, #14]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7f9 ff41 	bl	8001f42 <HAL_HCD_HC_GetXferCount>
 80080c0:	4603      	mov	r3, r0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080ca:	b590      	push	{r4, r7, lr}
 80080cc:	b089      	sub	sp, #36	@ 0x24
 80080ce:	af04      	add	r7, sp, #16
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	461a      	mov	r2, r3
 80080d8:	4603      	mov	r3, r0
 80080da:	70fb      	strb	r3, [r7, #3]
 80080dc:	460b      	mov	r3, r1
 80080de:	70bb      	strb	r3, [r7, #2]
 80080e0:	4613      	mov	r3, r2
 80080e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80080f2:	787c      	ldrb	r4, [r7, #1]
 80080f4:	78ba      	ldrb	r2, [r7, #2]
 80080f6:	78f9      	ldrb	r1, [r7, #3]
 80080f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80080fa:	9302      	str	r3, [sp, #8]
 80080fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4623      	mov	r3, r4
 800810a:	f7f9 fb2d 	bl	8001768 <HAL_HCD_HC_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8bf 	bl	8008298 <USBH_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bd90      	pop	{r4, r7, pc}

08008128 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fbc6 	bl	80018d8 <HAL_HCD_HC_Halt>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8a0 	bl	8008298 <USBH_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008166:	b590      	push	{r4, r7, lr}
 8008168:	b089      	sub	sp, #36	@ 0x24
 800816a:	af04      	add	r7, sp, #16
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	461a      	mov	r2, r3
 8008174:	4603      	mov	r3, r0
 8008176:	70fb      	strb	r3, [r7, #3]
 8008178:	460b      	mov	r3, r1
 800817a:	70bb      	strb	r3, [r7, #2]
 800817c:	4613      	mov	r3, r2
 800817e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800818e:	787c      	ldrb	r4, [r7, #1]
 8008190:	78ba      	ldrb	r2, [r7, #2]
 8008192:	78f9      	ldrb	r1, [r7, #3]
 8008194:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800819c:	9302      	str	r3, [sp, #8]
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4623      	mov	r3, r4
 80081aa:	f7f9 fbb9 	bl	8001920 <HAL_HCD_HC_SubmitRequest>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 f86f 	bl	8008298 <USBH_Get_USB_Status>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081be:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd90      	pop	{r4, r7, pc}

080081c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	4611      	mov	r1, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f9 fe9a 	bl	8001f18 <HAL_HCD_HC_GetURBState>
 80081e4:	4603      	mov	r3, r0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008200:	2b01      	cmp	r3, #1
 8008202:	d103      	bne.n	800820c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f872 	bl	80082f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800820c:	20c8      	movs	r0, #200	@ 0xc8
 800820e:	f7f8 fc6f 	bl	8000af0 <HAL_Delay>
  return USBH_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
 8008228:	4613      	mov	r3, r2
 800822a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008232:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	4613      	mov	r3, r2
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	3317      	adds	r3, #23
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	68f9      	ldr	r1, [r7, #12]
 800824e:	4613      	mov	r3, r2
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	1a9b      	subs	r3, r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	333c      	adds	r3, #60	@ 0x3c
 800825a:	78ba      	ldrb	r2, [r7, #2]
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e009      	b.n	8008274 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	4613      	mov	r3, r2
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	333d      	adds	r3, #61	@ 0x3d
 8008270:	78ba      	ldrb	r2, [r7, #2]
 8008272:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7f8 fc30 	bl	8000af0 <HAL_Delay>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d817      	bhi.n	80082dc <USBH_Get_USB_Status+0x44>
 80082ac:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <USBH_Get_USB_Status+0x1c>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082cb 	.word	0x080082cb
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082d7 	.word	0x080082d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	e00b      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]
    break;
 80082ce:	e008      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	e005      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082d6:	2302      	movs	r3, #2
 80082d8:	73fb      	strb	r3, [r7, #15]
    break;
 80082da:	e002      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082dc:	2302      	movs	r3, #2
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	bf00      	nop
  }
  return usb_status;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
 8008308:	e001      	b.n	800830e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	461a      	mov	r2, r3
 8008312:	2101      	movs	r1, #1
 8008314:	4803      	ldr	r0, [pc, #12]	@ (8008324 <MX_DriverVbusFS+0x34>)
 8008316:	f7f9 f9a7 	bl	8001668 <HAL_GPIO_WritePin>
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	40020800 	.word	0x40020800

08008328 <malloc>:
 8008328:	4b02      	ldr	r3, [pc, #8]	@ (8008334 <malloc+0xc>)
 800832a:	4601      	mov	r1, r0
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f000 b82d 	b.w	800838c <_malloc_r>
 8008332:	bf00      	nop
 8008334:	2000002c 	.word	0x2000002c

08008338 <free>:
 8008338:	4b02      	ldr	r3, [pc, #8]	@ (8008344 <free+0xc>)
 800833a:	4601      	mov	r1, r0
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f000 b8ef 	b.w	8008520 <_free_r>
 8008342:	bf00      	nop
 8008344:	2000002c 	.word	0x2000002c

08008348 <sbrk_aligned>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4e0f      	ldr	r6, [pc, #60]	@ (8008388 <sbrk_aligned+0x40>)
 800834c:	460c      	mov	r4, r1
 800834e:	6831      	ldr	r1, [r6, #0]
 8008350:	4605      	mov	r5, r0
 8008352:	b911      	cbnz	r1, 800835a <sbrk_aligned+0x12>
 8008354:	f000 f8ae 	bl	80084b4 <_sbrk_r>
 8008358:	6030      	str	r0, [r6, #0]
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f8a9 	bl	80084b4 <_sbrk_r>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	d103      	bne.n	800836e <sbrk_aligned+0x26>
 8008366:	f04f 34ff 	mov.w	r4, #4294967295
 800836a:	4620      	mov	r0, r4
 800836c:	bd70      	pop	{r4, r5, r6, pc}
 800836e:	1cc4      	adds	r4, r0, #3
 8008370:	f024 0403 	bic.w	r4, r4, #3
 8008374:	42a0      	cmp	r0, r4
 8008376:	d0f8      	beq.n	800836a <sbrk_aligned+0x22>
 8008378:	1a21      	subs	r1, r4, r0
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f89a 	bl	80084b4 <_sbrk_r>
 8008380:	3001      	adds	r0, #1
 8008382:	d1f2      	bne.n	800836a <sbrk_aligned+0x22>
 8008384:	e7ef      	b.n	8008366 <sbrk_aligned+0x1e>
 8008386:	bf00      	nop
 8008388:	200009a8 	.word	0x200009a8

0800838c <_malloc_r>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	1ccd      	adds	r5, r1, #3
 8008392:	f025 0503 	bic.w	r5, r5, #3
 8008396:	3508      	adds	r5, #8
 8008398:	2d0c      	cmp	r5, #12
 800839a:	bf38      	it	cc
 800839c:	250c      	movcc	r5, #12
 800839e:	2d00      	cmp	r5, #0
 80083a0:	4606      	mov	r6, r0
 80083a2:	db01      	blt.n	80083a8 <_malloc_r+0x1c>
 80083a4:	42a9      	cmp	r1, r5
 80083a6:	d904      	bls.n	80083b2 <_malloc_r+0x26>
 80083a8:	230c      	movs	r3, #12
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	2000      	movs	r0, #0
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008488 <_malloc_r+0xfc>
 80083b6:	f000 f869 	bl	800848c <__malloc_lock>
 80083ba:	f8d8 3000 	ldr.w	r3, [r8]
 80083be:	461c      	mov	r4, r3
 80083c0:	bb44      	cbnz	r4, 8008414 <_malloc_r+0x88>
 80083c2:	4629      	mov	r1, r5
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff ffbf 	bl	8008348 <sbrk_aligned>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	4604      	mov	r4, r0
 80083ce:	d158      	bne.n	8008482 <_malloc_r+0xf6>
 80083d0:	f8d8 4000 	ldr.w	r4, [r8]
 80083d4:	4627      	mov	r7, r4
 80083d6:	2f00      	cmp	r7, #0
 80083d8:	d143      	bne.n	8008462 <_malloc_r+0xd6>
 80083da:	2c00      	cmp	r4, #0
 80083dc:	d04b      	beq.n	8008476 <_malloc_r+0xea>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	4639      	mov	r1, r7
 80083e2:	4630      	mov	r0, r6
 80083e4:	eb04 0903 	add.w	r9, r4, r3
 80083e8:	f000 f864 	bl	80084b4 <_sbrk_r>
 80083ec:	4581      	cmp	r9, r0
 80083ee:	d142      	bne.n	8008476 <_malloc_r+0xea>
 80083f0:	6821      	ldr	r1, [r4, #0]
 80083f2:	1a6d      	subs	r5, r5, r1
 80083f4:	4629      	mov	r1, r5
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ffa6 	bl	8008348 <sbrk_aligned>
 80083fc:	3001      	adds	r0, #1
 80083fe:	d03a      	beq.n	8008476 <_malloc_r+0xea>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	442b      	add	r3, r5
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	f8d8 3000 	ldr.w	r3, [r8]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	bb62      	cbnz	r2, 8008468 <_malloc_r+0xdc>
 800840e:	f8c8 7000 	str.w	r7, [r8]
 8008412:	e00f      	b.n	8008434 <_malloc_r+0xa8>
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	1b52      	subs	r2, r2, r5
 8008418:	d420      	bmi.n	800845c <_malloc_r+0xd0>
 800841a:	2a0b      	cmp	r2, #11
 800841c:	d917      	bls.n	800844e <_malloc_r+0xc2>
 800841e:	1961      	adds	r1, r4, r5
 8008420:	42a3      	cmp	r3, r4
 8008422:	6025      	str	r5, [r4, #0]
 8008424:	bf18      	it	ne
 8008426:	6059      	strne	r1, [r3, #4]
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	bf08      	it	eq
 800842c:	f8c8 1000 	streq.w	r1, [r8]
 8008430:	5162      	str	r2, [r4, r5]
 8008432:	604b      	str	r3, [r1, #4]
 8008434:	4630      	mov	r0, r6
 8008436:	f000 f82f 	bl	8008498 <__malloc_unlock>
 800843a:	f104 000b 	add.w	r0, r4, #11
 800843e:	1d23      	adds	r3, r4, #4
 8008440:	f020 0007 	bic.w	r0, r0, #7
 8008444:	1ac2      	subs	r2, r0, r3
 8008446:	bf1c      	itt	ne
 8008448:	1a1b      	subne	r3, r3, r0
 800844a:	50a3      	strne	r3, [r4, r2]
 800844c:	e7af      	b.n	80083ae <_malloc_r+0x22>
 800844e:	6862      	ldr	r2, [r4, #4]
 8008450:	42a3      	cmp	r3, r4
 8008452:	bf0c      	ite	eq
 8008454:	f8c8 2000 	streq.w	r2, [r8]
 8008458:	605a      	strne	r2, [r3, #4]
 800845a:	e7eb      	b.n	8008434 <_malloc_r+0xa8>
 800845c:	4623      	mov	r3, r4
 800845e:	6864      	ldr	r4, [r4, #4]
 8008460:	e7ae      	b.n	80083c0 <_malloc_r+0x34>
 8008462:	463c      	mov	r4, r7
 8008464:	687f      	ldr	r7, [r7, #4]
 8008466:	e7b6      	b.n	80083d6 <_malloc_r+0x4a>
 8008468:	461a      	mov	r2, r3
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	42a3      	cmp	r3, r4
 800846e:	d1fb      	bne.n	8008468 <_malloc_r+0xdc>
 8008470:	2300      	movs	r3, #0
 8008472:	6053      	str	r3, [r2, #4]
 8008474:	e7de      	b.n	8008434 <_malloc_r+0xa8>
 8008476:	230c      	movs	r3, #12
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	4630      	mov	r0, r6
 800847c:	f000 f80c 	bl	8008498 <__malloc_unlock>
 8008480:	e794      	b.n	80083ac <_malloc_r+0x20>
 8008482:	6005      	str	r5, [r0, #0]
 8008484:	e7d6      	b.n	8008434 <_malloc_r+0xa8>
 8008486:	bf00      	nop
 8008488:	200009ac 	.word	0x200009ac

0800848c <__malloc_lock>:
 800848c:	4801      	ldr	r0, [pc, #4]	@ (8008494 <__malloc_lock+0x8>)
 800848e:	f000 b845 	b.w	800851c <__retarget_lock_acquire_recursive>
 8008492:	bf00      	nop
 8008494:	20000aec 	.word	0x20000aec

08008498 <__malloc_unlock>:
 8008498:	4801      	ldr	r0, [pc, #4]	@ (80084a0 <__malloc_unlock+0x8>)
 800849a:	f000 b840 	b.w	800851e <__retarget_lock_release_recursive>
 800849e:	bf00      	nop
 80084a0:	20000aec 	.word	0x20000aec

080084a4 <memset>:
 80084a4:	4402      	add	r2, r0
 80084a6:	4603      	mov	r3, r0
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d100      	bne.n	80084ae <memset+0xa>
 80084ac:	4770      	bx	lr
 80084ae:	f803 1b01 	strb.w	r1, [r3], #1
 80084b2:	e7f9      	b.n	80084a8 <memset+0x4>

080084b4 <_sbrk_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	@ (80084d0 <_sbrk_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f000 f878 	bl	80085b4 <_sbrk>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_sbrk_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_sbrk_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000ae8 	.word	0x20000ae8

080084d4 <__libc_init_array>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4d0d      	ldr	r5, [pc, #52]	@ (800850c <__libc_init_array+0x38>)
 80084d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008510 <__libc_init_array+0x3c>)
 80084da:	1b64      	subs	r4, r4, r5
 80084dc:	10a4      	asrs	r4, r4, #2
 80084de:	2600      	movs	r6, #0
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	d109      	bne.n	80084f8 <__libc_init_array+0x24>
 80084e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008514 <__libc_init_array+0x40>)
 80084e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008518 <__libc_init_array+0x44>)
 80084e8:	f000 f872 	bl	80085d0 <_init>
 80084ec:	1b64      	subs	r4, r4, r5
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	2600      	movs	r6, #0
 80084f2:	42a6      	cmp	r6, r4
 80084f4:	d105      	bne.n	8008502 <__libc_init_array+0x2e>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fc:	4798      	blx	r3
 80084fe:	3601      	adds	r6, #1
 8008500:	e7ee      	b.n	80084e0 <__libc_init_array+0xc>
 8008502:	f855 3b04 	ldr.w	r3, [r5], #4
 8008506:	4798      	blx	r3
 8008508:	3601      	adds	r6, #1
 800850a:	e7f2      	b.n	80084f2 <__libc_init_array+0x1e>
 800850c:	08008618 	.word	0x08008618
 8008510:	08008618 	.word	0x08008618
 8008514:	08008618 	.word	0x08008618
 8008518:	0800861c 	.word	0x0800861c

0800851c <__retarget_lock_acquire_recursive>:
 800851c:	4770      	bx	lr

0800851e <__retarget_lock_release_recursive>:
 800851e:	4770      	bx	lr

08008520 <_free_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4605      	mov	r5, r0
 8008524:	2900      	cmp	r1, #0
 8008526:	d041      	beq.n	80085ac <_free_r+0x8c>
 8008528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852c:	1f0c      	subs	r4, r1, #4
 800852e:	2b00      	cmp	r3, #0
 8008530:	bfb8      	it	lt
 8008532:	18e4      	addlt	r4, r4, r3
 8008534:	f7ff ffaa 	bl	800848c <__malloc_lock>
 8008538:	4a1d      	ldr	r2, [pc, #116]	@ (80085b0 <_free_r+0x90>)
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	b933      	cbnz	r3, 800854c <_free_r+0x2c>
 800853e:	6063      	str	r3, [r4, #4]
 8008540:	6014      	str	r4, [r2, #0]
 8008542:	4628      	mov	r0, r5
 8008544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008548:	f7ff bfa6 	b.w	8008498 <__malloc_unlock>
 800854c:	42a3      	cmp	r3, r4
 800854e:	d908      	bls.n	8008562 <_free_r+0x42>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	1821      	adds	r1, r4, r0
 8008554:	428b      	cmp	r3, r1
 8008556:	bf01      	itttt	eq
 8008558:	6819      	ldreq	r1, [r3, #0]
 800855a:	685b      	ldreq	r3, [r3, #4]
 800855c:	1809      	addeq	r1, r1, r0
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	e7ed      	b.n	800853e <_free_r+0x1e>
 8008562:	461a      	mov	r2, r3
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	b10b      	cbz	r3, 800856c <_free_r+0x4c>
 8008568:	42a3      	cmp	r3, r4
 800856a:	d9fa      	bls.n	8008562 <_free_r+0x42>
 800856c:	6811      	ldr	r1, [r2, #0]
 800856e:	1850      	adds	r0, r2, r1
 8008570:	42a0      	cmp	r0, r4
 8008572:	d10b      	bne.n	800858c <_free_r+0x6c>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	4401      	add	r1, r0
 8008578:	1850      	adds	r0, r2, r1
 800857a:	4283      	cmp	r3, r0
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	d1e0      	bne.n	8008542 <_free_r+0x22>
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	6053      	str	r3, [r2, #4]
 8008586:	4408      	add	r0, r1
 8008588:	6010      	str	r0, [r2, #0]
 800858a:	e7da      	b.n	8008542 <_free_r+0x22>
 800858c:	d902      	bls.n	8008594 <_free_r+0x74>
 800858e:	230c      	movs	r3, #12
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	e7d6      	b.n	8008542 <_free_r+0x22>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	1821      	adds	r1, r4, r0
 8008598:	428b      	cmp	r3, r1
 800859a:	bf04      	itt	eq
 800859c:	6819      	ldreq	r1, [r3, #0]
 800859e:	685b      	ldreq	r3, [r3, #4]
 80085a0:	6063      	str	r3, [r4, #4]
 80085a2:	bf04      	itt	eq
 80085a4:	1809      	addeq	r1, r1, r0
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	6054      	str	r4, [r2, #4]
 80085aa:	e7ca      	b.n	8008542 <_free_r+0x22>
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	bf00      	nop
 80085b0:	200009ac 	.word	0x200009ac

080085b4 <_sbrk>:
 80085b4:	4a04      	ldr	r2, [pc, #16]	@ (80085c8 <_sbrk+0x14>)
 80085b6:	6811      	ldr	r1, [r2, #0]
 80085b8:	4603      	mov	r3, r0
 80085ba:	b909      	cbnz	r1, 80085c0 <_sbrk+0xc>
 80085bc:	4903      	ldr	r1, [pc, #12]	@ (80085cc <_sbrk+0x18>)
 80085be:	6011      	str	r1, [r2, #0]
 80085c0:	6810      	ldr	r0, [r2, #0]
 80085c2:	4403      	add	r3, r0
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	4770      	bx	lr
 80085c8:	20000af0 	.word	0x20000af0
 80085cc:	20000af8 	.word	0x20000af8

080085d0 <_init>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr

080085dc <_fini>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr


SERIAL_to_NSW_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800aed0  0800aed0  0000bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af48  0800af48  0000c2c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800af48  0800af48  0000c2c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af48  0800af48  0000c2c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af48  0800af48  0000bf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af4c  0800af4c  0000bf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  0800af50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c2c0  2**0
                  CONTENTS
 10 .bss          00000e50  200002c0  200002c0  0000c2c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001110  20001110  0000c2c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c3b  00000000  00000000  0000c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c90  00000000  00000000  00024f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00028bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3d  00000000  00000000  00029e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021056  00000000  00000000  0002ac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c03f  00000000  00000000  0004bceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5a9e  00000000  00000000  00067d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d7c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c08  00000000  00000000  0011d80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00122414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002c0 	.word	0x200002c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aeb8 	.word	0x0800aeb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002c4 	.word	0x200002c4
 80001c4:	0800aeb8 	.word	0x0800aeb8

080001c8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  tmp=0;
 80001d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000248 <HAL_UART_RxCpltCallback+0x80>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
  memcpy(circular_buffer[write_index], rx_buffer, BUFFER_SIZE);
 80001d6:	4b1d      	ldr	r3, [pc, #116]	@ (800024c <HAL_UART_RxCpltCallback+0x84>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	019b      	lsls	r3, r3, #6
 80001de:	4a1c      	ldr	r2, [pc, #112]	@ (8000250 <HAL_UART_RxCpltCallback+0x88>)
 80001e0:	4413      	add	r3, r2
 80001e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000254 <HAL_UART_RxCpltCallback+0x8c>)
 80001e4:	4614      	mov	r4, r2
 80001e6:	469c      	mov	ip, r3
 80001e8:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 80001ec:	4665      	mov	r5, ip
 80001ee:	4626      	mov	r6, r4
 80001f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80001f2:	6028      	str	r0, [r5, #0]
 80001f4:	6069      	str	r1, [r5, #4]
 80001f6:	60aa      	str	r2, [r5, #8]
 80001f8:	60eb      	str	r3, [r5, #12]
 80001fa:	3410      	adds	r4, #16
 80001fc:	f10c 0c10 	add.w	ip, ip, #16
 8000200:	4574      	cmp	r4, lr
 8000202:	d1f3      	bne.n	80001ec <HAL_UART_RxCpltCallback+0x24>
  write_index = (write_index + 1) % BLOCK_COUNT;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <HAL_UART_RxCpltCallback+0x84>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	b29b      	uxth	r3, r3
 800020a:	3301      	adds	r3, #1
 800020c:	425a      	negs	r2, r3
 800020e:	f003 030f 	and.w	r3, r3, #15
 8000212:	f002 020f 	and.w	r2, r2, #15
 8000216:	bf58      	it	pl
 8000218:	4253      	negpl	r3, r2
 800021a:	b29a      	uxth	r2, r3
 800021c:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <HAL_UART_RxCpltCallback+0x84>)
 800021e:	801a      	strh	r2, [r3, #0]
  if (write_index == read_index) {
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <HAL_UART_RxCpltCallback+0x84>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	b29a      	uxth	r2, r3
 8000226:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <HAL_UART_RxCpltCallback+0x90>)
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	b29b      	uxth	r3, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d102      	bne.n	8000236 <HAL_UART_RxCpltCallback+0x6e>
      buffer_full = 1;
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <HAL_UART_RxCpltCallback+0x94>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_DMA(&huart1, rx_buffer, BUFFER_SIZE);
 8000236:	2240      	movs	r2, #64	@ 0x40
 8000238:	4906      	ldr	r1, [pc, #24]	@ (8000254 <HAL_UART_RxCpltCallback+0x8c>)
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_UART_RxCpltCallback+0x98>)
 800023c:	f005 fb92 	bl	8005964 <HAL_UART_Receive_DMA>
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000248:	20000928 	.word	0x20000928
 800024c:	2000092c 	.word	0x2000092c
 8000250:	200004e8 	.word	0x200004e8
 8000254:	200008e8 	.word	0x200008e8
 8000258:	2000092e 	.word	0x2000092e
 800025c:	20000930 	.word	0x20000930
 8000260:	20000394 	.word	0x20000394

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f001 f9c6 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f86e 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f9cc 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000274:	f000 f9ac 	bl	80005d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000278:	f000 f8cc 	bl	8000414 <MX_I2C1_Init>
  MX_SPI1_Init();
 800027c:	f000 f90a 	bl	8000494 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000280:	f000 f946 	bl	8000510 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000284:	f00a fa06 	bl	800a694 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 8000288:	f000 f972 	bl	8000570 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ResetReport(&joystick_input);
 800028c:	4826      	ldr	r0, [pc, #152]	@ (8000328 <main+0xc4>)
 800028e:	f000 ff53 	bl	8001138 <ResetReport>
  SendReport(&hUsbDeviceFS, &joystick_input);
 8000292:	4925      	ldr	r1, [pc, #148]	@ (8000328 <main+0xc4>)
 8000294:	4825      	ldr	r0, [pc, #148]	@ (800032c <main+0xc8>)
 8000296:	f000 ff6b 	bl	8001170 <SendReport>
  HAL_UART_Receive_DMA(&huart1, rx_buffer, BUFFER_SIZE);
 800029a:	2240      	movs	r2, #64	@ 0x40
 800029c:	4924      	ldr	r1, [pc, #144]	@ (8000330 <main+0xcc>)
 800029e:	4825      	ldr	r0, [pc, #148]	@ (8000334 <main+0xd0>)
 80002a0:	f005 fb60 	bl	8005964 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while ((read_index != write_index) || buffer_full) {
 80002a4:	e032      	b.n	800030c <main+0xa8>
		tmp++;
 80002a6:	4b24      	ldr	r3, [pc, #144]	@ (8000338 <main+0xd4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	4a22      	ldr	r2, [pc, #136]	@ (8000338 <main+0xd4>)
 80002ae:	6013      	str	r3, [r2, #0]
		if(tmp>=1000){
 80002b0:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <main+0xd4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002b8:	db09      	blt.n	80002ce <main+0x6a>
			HAL_UART_DeInit(&huart1);
 80002ba:	481e      	ldr	r0, [pc, #120]	@ (8000334 <main+0xd0>)
 80002bc:	f005 fb15 	bl	80058ea <HAL_UART_DeInit>
			MX_USART1_UART_Init();
 80002c0:	f000 f926 	bl	8000510 <MX_USART1_UART_Init>
			HAL_UART_Receive_DMA(&huart1, rx_buffer, BUFFER_SIZE);
 80002c4:	2240      	movs	r2, #64	@ 0x40
 80002c6:	491a      	ldr	r1, [pc, #104]	@ (8000330 <main+0xcc>)
 80002c8:	481a      	ldr	r0, [pc, #104]	@ (8000334 <main+0xd0>)
 80002ca:	f005 fb4b 	bl	8005964 <HAL_UART_Receive_DMA>
		}
		serial_manager(circular_buffer[read_index]);
 80002ce:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <main+0xd8>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	019b      	lsls	r3, r3, #6
 80002d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000340 <main+0xdc>)
 80002d8:	4413      	add	r3, r2
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fa1a 	bl	8000714 <serial_manager>
		read_index = (read_index + 1) % BLOCK_COUNT;
 80002e0:	4b16      	ldr	r3, [pc, #88]	@ (800033c <main+0xd8>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	3301      	adds	r3, #1
 80002e8:	425a      	negs	r2, r3
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	f002 020f 	and.w	r2, r2, #15
 80002f2:	bf58      	it	pl
 80002f4:	4253      	negpl	r3, r2
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b10      	ldr	r3, [pc, #64]	@ (800033c <main+0xd8>)
 80002fa:	801a      	strh	r2, [r3, #0]
		if (buffer_full) {
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <main+0xe0>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <main+0xa8>
			buffer_full = 0;
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <main+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
	while ((read_index != write_index) || buffer_full) {
 800030c:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <main+0xd8>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	b29a      	uxth	r2, r3
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <main+0xe4>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	b29b      	uxth	r3, r3
 8000318:	429a      	cmp	r2, r3
 800031a:	d1c4      	bne.n	80002a6 <main+0x42>
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <main+0xe0>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1bf      	bne.n	80002a6 <main+0x42>
 8000326:	e7f1      	b.n	800030c <main+0xa8>
 8000328:	2000094c 	.word	0x2000094c
 800032c:	20000964 	.word	0x20000964
 8000330:	200008e8 	.word	0x200008e8
 8000334:	20000394 	.word	0x20000394
 8000338:	20000928 	.word	0x20000928
 800033c:	2000092e 	.word	0x2000092e
 8000340:	200004e8 	.word	0x200004e8
 8000344:	20000930 	.word	0x20000930
 8000348:	2000092c 	.word	0x2000092c

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b09e      	sub	sp, #120	@ 0x78
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000356:	2228      	movs	r2, #40	@ 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f00a fd80 	bl	800ae60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	223c      	movs	r2, #60	@ 0x3c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f00a fd72 	bl	800ae60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800037c:	2303      	movs	r3, #3
 800037e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000384:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038e:	2310      	movs	r3, #16
 8000390:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fd98 	bl	8003edc <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003b2:	f000 f9a9 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	230f      	movs	r3, #15
 80003b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	2302      	movs	r3, #2
 80003bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f004 fdc0 	bl	8004f58 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003de:	f000 f993 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <SystemClock_Config+0xc4>)
 80003e4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003f2:	2300      	movs	r3, #0
 80003f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	463b      	mov	r3, r7
 80003f8:	4618      	mov	r0, r3
 80003fa:	f004 ffcd 	bl	8005398 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000404:	f000 f980 	bl	8000708 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3778      	adds	r7, #120	@ 0x78
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	00020025 	.word	0x00020025

08000414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_I2C1_Init+0x74>)
 800041a:	4a1c      	ldr	r2, [pc, #112]	@ (800048c <MX_I2C1_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800041e:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <MX_I2C1_Init+0x7c>)
 8000422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_I2C1_Init+0x74>)
 800042c:	2201      	movs	r2, #1
 800042e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_I2C1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800044e:	480e      	ldr	r0, [pc, #56]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000450:	f001 ff60 	bl	8002314 <HAL_I2C_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800045a:	f000 f955 	bl	8000708 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800045e:	2100      	movs	r1, #0
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000462:	f001 fff2 	bl	800244a <HAL_I2CEx_ConfigAnalogFilter>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800046c:	f000 f94c 	bl	8000708 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000470:	2100      	movs	r1, #0
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_I2C1_Init+0x74>)
 8000474:	f002 f834 	bl	80024e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800047e:	f000 f943 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200002dc 	.word	0x200002dc
 800048c:	40005400 	.word	0x40005400
 8000490:	2000090e 	.word	0x2000090e

08000494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_SPI1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_SPI1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004f4:	f005 f900 	bl	80056f8 <HAL_SPI_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f903 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000330 	.word	0x20000330
 800050c:	40013000 	.word	0x40013000

08000510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_USART1_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1843200;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 800051c:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
 8000520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART1_UART_Init+0x58>)
 8000554:	f005 f97b 	bl	800584e <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f8d3 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000394 	.word	0x20000394
 800056c:	40013800 	.word	0x40013800

08000570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 8000576:	4a15      	ldr	r2, [pc, #84]	@ (80005cc <MX_USART3_UART_Init+0x5c>)
 8000578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800057a:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_USART3_UART_Init+0x58>)
 80005b4:	f005 f94b 	bl	800584e <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80005be:	f000 f8a3 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000041c 	.word	0x2000041c
 80005cc:	40004800 	.word	0x40004800

080005d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_DMA_Init+0x38>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <MX_DMA_Init+0x38>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_DMA_Init+0x38>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	200f      	movs	r0, #15
 80005f4:	f001 f965 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005f8:	200f      	movs	r0, #15
 80005fa:	f001 f97e 	bl	80018fa <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000622:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a36      	ldr	r2, [pc, #216]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b31      	ldr	r3, [pc, #196]	@ (8000700 <MX_GPIO_Init+0xf4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a30      	ldr	r2, [pc, #192]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b2e      	ldr	r3, [pc, #184]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000658:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <MX_GPIO_Init+0xf4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a24      	ldr	r2, [pc, #144]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a1e      	ldr	r2, [pc, #120]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_GPIO_Init+0xf4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800069a:	2200      	movs	r2, #0
 800069c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80006a0:	4818      	ldr	r0, [pc, #96]	@ (8000704 <MX_GPIO_Init+0xf8>)
 80006a2:	f001 fe1f 	bl	80022e4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006a6:	2337      	movs	r3, #55	@ 0x37
 80006a8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <MX_GPIO_Init+0xf8>)
 80006bc:	f001 fbbc 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006c0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80006c4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <MX_GPIO_Init+0xf8>)
 80006da:	f001 fbad 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f001 fba0 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	48001000 	.word	0x48001000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <serial_manager>:
static int pressed;
static int mode = MODE0;
serial_midi data;
extern USB_JoystickReport_Input joystick_input;

void serial_manager(uint8_t* rx_buffer){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	// Salvataggio dei dati
	data.cable_number = rx_buffer[0] & 0xF0;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000724:	4a9e      	ldr	r2, [pc, #632]	@ (80009a0 <serial_manager+0x28c>)
 8000726:	6013      	str	r3, [r2, #0]
	data.index_number = rx_buffer[0] & 0x0F;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	4a9b      	ldr	r2, [pc, #620]	@ (80009a0 <serial_manager+0x28c>)
 8000732:	6053      	str	r3, [r2, #4]
	// Channel_0
	data.midi0.note = rx_buffer[2];
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	789a      	ldrb	r2, [r3, #2]
 8000738:	4b99      	ldr	r3, [pc, #612]	@ (80009a0 <serial_manager+0x28c>)
 800073a:	721a      	strb	r2, [r3, #8]
	data.midi0.speed = rx_buffer[3];
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78da      	ldrb	r2, [r3, #3]
 8000740:	4b97      	ldr	r3, [pc, #604]	@ (80009a0 <serial_manager+0x28c>)
 8000742:	725a      	strb	r2, [r3, #9]

	// PRESSIONE O RILASCIO?
	if(data.index_number == MIDI_PRESSED)
 8000744:	4b96      	ldr	r3, [pc, #600]	@ (80009a0 <serial_manager+0x28c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b09      	cmp	r3, #9
 800074a:	d103      	bne.n	8000754 <serial_manager+0x40>
		pressed = 1;
 800074c:	4b95      	ldr	r3, [pc, #596]	@ (80009a4 <serial_manager+0x290>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e015      	b.n	8000780 <serial_manager+0x6c>
	else if(data.index_number == MIDI_RELEASED)
 8000754:	4b92      	ldr	r3, [pc, #584]	@ (80009a0 <serial_manager+0x28c>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d103      	bne.n	8000764 <serial_manager+0x50>
		pressed = 0;
 800075c:	4b91      	ldr	r3, [pc, #580]	@ (80009a4 <serial_manager+0x290>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	e00d      	b.n	8000780 <serial_manager+0x6c>
	else if(data.index_number == MIDI_RESET){
 8000764:	4b8e      	ldr	r3, [pc, #568]	@ (80009a0 <serial_manager+0x28c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	f040 84d5 	bne.w	8001118 <serial_manager+0xa04>
	  // Durante la riconnessione si avrà un index F, ci conviene risettare
	  ResetReport(&joystick_input);
 800076e:	488e      	ldr	r0, [pc, #568]	@ (80009a8 <serial_manager+0x294>)
 8000770:	f000 fce2 	bl	8001138 <ResetReport>
	  SendReport(&hUsbDeviceFS, &joystick_input);
 8000774:	498c      	ldr	r1, [pc, #560]	@ (80009a8 <serial_manager+0x294>)
 8000776:	488d      	ldr	r0, [pc, #564]	@ (80009ac <serial_manager+0x298>)
 8000778:	f000 fcfa 	bl	8001170 <SendReport>
	  return;
 800077c:	f000 bccf 	b.w	800111e <serial_manager+0xa0a>
	}
	else return;

	// QUALE PULSANTE?
	int pos = data.midi0.note%48;
 8000780:	4b87      	ldr	r3, [pc, #540]	@ (80009a0 <serial_manager+0x28c>)
 8000782:	7a1a      	ldrb	r2, [r3, #8]
 8000784:	4b8a      	ldr	r3, [pc, #552]	@ (80009b0 <serial_manager+0x29c>)
 8000786:	fba3 1302 	umull	r1, r3, r3, r2
 800078a:	0959      	lsrs	r1, r3, #5
 800078c:	460b      	mov	r3, r1
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	440b      	add	r3, r1
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	60fb      	str	r3, [r7, #12]
	int type = (hid_map[pos][mode])/100;
 800079a:	4b86      	ldr	r3, [pc, #536]	@ (80009b4 <serial_manager+0x2a0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4986      	ldr	r1, [pc, #536]	@ (80009b8 <serial_manager+0x2a4>)
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	0092      	lsls	r2, r2, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007aa:	4a84      	ldr	r2, [pc, #528]	@ (80009bc <serial_manager+0x2a8>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	1152      	asrs	r2, r2, #5
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	60bb      	str	r3, [r7, #8]

	switch (type){
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	f200 84ae 	bhi.w	800111c <serial_manager+0xa08>
 80007c0:	a201      	add	r2, pc, #4	@ (adr r2, 80007c8 <serial_manager+0xb4>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007e5 	.word	0x080007e5
 80007cc:	08000865 	.word	0x08000865
 80007d0:	080008b5 	.word	0x080008b5
 80007d4:	08000971 	.word	0x08000971
 80007d8:	08000a55 	.word	0x08000a55
 80007dc:	08000b17 	.word	0x08000b17
 80007e0:	08000bd1 	.word	0x08000bd1
	// PULSANTE
		case BUTTON_CTL:
			joystick_input.Button =
				(pressed == 1 && !(joystick_input.Button & (1 << hid_map[pos][mode]))) ?
 80007e4:	4b6f      	ldr	r3, [pc, #444]	@ (80009a4 <serial_manager+0x290>)
 80007e6:	681b      	ldr	r3, [r3, #0]
			joystick_input.Button =
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d123      	bne.n	8000834 <serial_manager+0x120>
				(pressed == 1 && !(joystick_input.Button & (1 << hid_map[pos][mode]))) ?
 80007ec:	4b6e      	ldr	r3, [pc, #440]	@ (80009a8 <serial_manager+0x294>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	4b70      	ldr	r3, [pc, #448]	@ (80009b4 <serial_manager+0x2a0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4970      	ldr	r1, [pc, #448]	@ (80009b8 <serial_manager+0x2a4>)
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000802:	fa40 f303 	asr.w	r3, r0, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d112      	bne.n	8000834 <serial_manager+0x120>
				(joystick_input.Button | (1 << hid_map[pos][mode])) : (joystick_input.Button & ~(1 << hid_map[pos][mode]));
 800080e:	4b66      	ldr	r3, [pc, #408]	@ (80009a8 <serial_manager+0x294>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b21a      	sxth	r2, r3
 8000814:	4b67      	ldr	r3, [pc, #412]	@ (80009b4 <serial_manager+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4867      	ldr	r0, [pc, #412]	@ (80009b8 <serial_manager+0x2a4>)
 800081a:	68f9      	ldr	r1, [r7, #12]
 800081c:	0089      	lsls	r1, r1, #2
 800081e:	440b      	add	r3, r1
 8000820:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21b      	sxth	r3, r3
			joystick_input.Button =
 8000830:	b29b      	uxth	r3, r3
 8000832:	e013      	b.n	800085c <serial_manager+0x148>
				(joystick_input.Button | (1 << hid_map[pos][mode])) : (joystick_input.Button & ~(1 << hid_map[pos][mode]));
 8000834:	4b5c      	ldr	r3, [pc, #368]	@ (80009a8 <serial_manager+0x294>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b5e      	ldr	r3, [pc, #376]	@ (80009b4 <serial_manager+0x2a0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	485e      	ldr	r0, [pc, #376]	@ (80009b8 <serial_manager+0x2a4>)
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	0089      	lsls	r1, r1, #2
 8000844:	440b      	add	r3, r1
 8000846:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b21b      	sxth	r3, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	b21b      	sxth	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	b21b      	sxth	r3, r3
			joystick_input.Button =
 800085a:	b29b      	uxth	r3, r3
 800085c:	4a52      	ldr	r2, [pc, #328]	@ (80009a8 <serial_manager+0x294>)
 800085e:	8013      	strh	r3, [r2, #0]
			break;
 8000860:	f000 bc54 	b.w	800110c <serial_manager+0x9f8>
	// MODE
		case MOD_CTL:
			if(pressed) switch(hid_map[pos][mode]){
 8000864:	4b4f      	ldr	r3, [pc, #316]	@ (80009a4 <serial_manager+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 8446 	beq.w	80010fa <serial_manager+0x9e6>
 800086e:	4b51      	ldr	r3, [pc, #324]	@ (80009b4 <serial_manager+0x2a0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4951      	ldr	r1, [pc, #324]	@ (80009b8 <serial_manager+0x2a4>)
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4413      	add	r3, r2
 800087a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800087e:	2b67      	cmp	r3, #103	@ 0x67
 8000880:	d00e      	beq.n	80008a0 <serial_manager+0x18c>
 8000882:	2b67      	cmp	r3, #103	@ 0x67
 8000884:	dc10      	bgt.n	80008a8 <serial_manager+0x194>
 8000886:	2b65      	cmp	r3, #101	@ 0x65
 8000888:	d002      	beq.n	8000890 <serial_manager+0x17c>
 800088a:	2b66      	cmp	r3, #102	@ 0x66
 800088c:	d004      	beq.n	8000898 <serial_manager+0x184>
 800088e:	e00b      	b.n	80008a8 <serial_manager+0x194>
				case MODE_1:
					mode = MODE1;
 8000890:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <serial_manager+0x2a0>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
					break;
 8000896:	e00b      	b.n	80008b0 <serial_manager+0x19c>
				case MODE_2:
					mode = MODE2;
 8000898:	4b46      	ldr	r3, [pc, #280]	@ (80009b4 <serial_manager+0x2a0>)
 800089a:	2202      	movs	r2, #2
 800089c:	601a      	str	r2, [r3, #0]
					break;
 800089e:	e007      	b.n	80008b0 <serial_manager+0x19c>
				case MODE_3:
					mode = MODE3;
 80008a0:	4b44      	ldr	r3, [pc, #272]	@ (80009b4 <serial_manager+0x2a0>)
 80008a2:	2203      	movs	r2, #3
 80008a4:	601a      	str	r2, [r3, #0]
					break;
 80008a6:	e003      	b.n	80008b0 <serial_manager+0x19c>
				default:
					mode = MODE0;
 80008a8:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <serial_manager+0x2a0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
					break;
 80008ae:	bf00      	nop
			}
			break;
 80008b0:	f000 bc23 	b.w	80010fa <serial_manager+0x9e6>
	// L-STICK(X)
		case LX_CTL:
			if(hid_map[pos][mode] == LX_MAX){
 80008b4:	4b3f      	ldr	r3, [pc, #252]	@ (80009b4 <serial_manager+0x2a0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	493f      	ldr	r1, [pc, #252]	@ (80009b8 <serial_manager+0x2a4>)
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	4413      	add	r3, r2
 80008c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80008c6:	d122      	bne.n	800090e <serial_manager+0x1fa>
				if(pressed){
 80008c8:	4b36      	ldr	r3, [pc, #216]	@ (80009a4 <serial_manager+0x290>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00f      	beq.n	80008f0 <serial_manager+0x1dc>
					if(joystick_input.LX==STICK_MIN)
 80008d0:	4b35      	ldr	r3, [pc, #212]	@ (80009a8 <serial_manager+0x294>)
 80008d2:	78db      	ldrb	r3, [r3, #3]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <serial_manager+0x1cc>
						joystick_input.LX=STICK_CENTER;
 80008d8:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <serial_manager+0x294>)
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	70da      	strb	r2, [r3, #3]
 80008de:	e016      	b.n	800090e <serial_manager+0x1fa>
					else if(joystick_input.LX==STICK_CENTER)
 80008e0:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <serial_manager+0x294>)
 80008e2:	78db      	ldrb	r3, [r3, #3]
 80008e4:	2b80      	cmp	r3, #128	@ 0x80
 80008e6:	d112      	bne.n	800090e <serial_manager+0x1fa>
						joystick_input.LX=STICK_MAX;
 80008e8:	4b2f      	ldr	r3, [pc, #188]	@ (80009a8 <serial_manager+0x294>)
 80008ea:	22ff      	movs	r2, #255	@ 0xff
 80008ec:	70da      	strb	r2, [r3, #3]
 80008ee:	e00e      	b.n	800090e <serial_manager+0x1fa>
					}
				else{
					if(joystick_input.LX==STICK_MAX)
 80008f0:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <serial_manager+0x294>)
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	2bff      	cmp	r3, #255	@ 0xff
 80008f6:	d103      	bne.n	8000900 <serial_manager+0x1ec>
						joystick_input.LX=STICK_CENTER;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <serial_manager+0x294>)
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	70da      	strb	r2, [r3, #3]
 80008fe:	e006      	b.n	800090e <serial_manager+0x1fa>
					else if(joystick_input.LX==STICK_CENTER)
 8000900:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <serial_manager+0x294>)
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	2b80      	cmp	r3, #128	@ 0x80
 8000906:	d102      	bne.n	800090e <serial_manager+0x1fa>
						joystick_input.LX=STICK_MIN;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <serial_manager+0x294>)
 800090a:	2200      	movs	r2, #0
 800090c:	70da      	strb	r2, [r3, #3]
					}
				}
			if(hid_map[pos][mode] == LX_MIN){
 800090e:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <serial_manager+0x2a0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4929      	ldr	r1, [pc, #164]	@ (80009b8 <serial_manager+0x2a4>)
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	4413      	add	r3, r2
 800091a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800091e:	2bc9      	cmp	r3, #201	@ 0xc9
 8000920:	f040 83ed 	bne.w	80010fe <serial_manager+0x9ea>
				if(pressed){
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <serial_manager+0x290>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d010      	beq.n	800094e <serial_manager+0x23a>
					if(joystick_input.LX==STICK_MAX)
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <serial_manager+0x294>)
 800092e:	78db      	ldrb	r3, [r3, #3]
 8000930:	2bff      	cmp	r3, #255	@ 0xff
 8000932:	d103      	bne.n	800093c <serial_manager+0x228>
						joystick_input.LX=STICK_CENTER;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <serial_manager+0x294>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	70da      	strb	r2, [r3, #3]
						joystick_input.LX=STICK_CENTER;
					else if(joystick_input.LX==STICK_CENTER)
						joystick_input.LX=STICK_MAX;
					}
				}
			break;
 800093a:	e3e0      	b.n	80010fe <serial_manager+0x9ea>
					else if(joystick_input.LX==STICK_CENTER)
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <serial_manager+0x294>)
 800093e:	78db      	ldrb	r3, [r3, #3]
 8000940:	2b80      	cmp	r3, #128	@ 0x80
 8000942:	f040 83dc 	bne.w	80010fe <serial_manager+0x9ea>
						joystick_input.LX=STICK_MIN;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <serial_manager+0x294>)
 8000948:	2200      	movs	r2, #0
 800094a:	70da      	strb	r2, [r3, #3]
			break;
 800094c:	e3d7      	b.n	80010fe <serial_manager+0x9ea>
					if(joystick_input.LX==STICK_MIN)
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <serial_manager+0x294>)
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <serial_manager+0x24a>
						joystick_input.LX=STICK_CENTER;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <serial_manager+0x294>)
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	70da      	strb	r2, [r3, #3]
			break;
 800095c:	e3cf      	b.n	80010fe <serial_manager+0x9ea>
					else if(joystick_input.LX==STICK_CENTER)
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <serial_manager+0x294>)
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	2b80      	cmp	r3, #128	@ 0x80
 8000964:	f040 83cb 	bne.w	80010fe <serial_manager+0x9ea>
						joystick_input.LX=STICK_MAX;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <serial_manager+0x294>)
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	70da      	strb	r2, [r3, #3]
			break;
 800096e:	e3c6      	b.n	80010fe <serial_manager+0x9ea>
	// L-STICK(Y)
		case LY_CTL:
			if(hid_map[pos][mode] == LY_MAX){
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <serial_manager+0x2a0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4910      	ldr	r1, [pc, #64]	@ (80009b8 <serial_manager+0x2a4>)
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	4413      	add	r3, r2
 800097c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000980:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000984:	d133      	bne.n	80009ee <serial_manager+0x2da>
				if(pressed){
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <serial_manager+0x290>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d020      	beq.n	80009d0 <serial_manager+0x2bc>
					if(joystick_input.LY==STICK_MIN)
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <serial_manager+0x294>)
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <serial_manager+0x2ac>
						joystick_input.LY=STICK_CENTER;
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <serial_manager+0x294>)
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	711a      	strb	r2, [r3, #4]
 800099c:	e027      	b.n	80009ee <serial_manager+0x2da>
 800099e:	bf00      	nop
 80009a0:	20000934 	.word	0x20000934
 80009a4:	20000944 	.word	0x20000944
 80009a8:	2000094c 	.word	0x2000094c
 80009ac:	20000964 	.word	0x20000964
 80009b0:	aaaaaaab 	.word	0xaaaaaaab
 80009b4:	20000948 	.word	0x20000948
 80009b8:	20000000 	.word	0x20000000
 80009bc:	51eb851f 	.word	0x51eb851f
					else if(joystick_input.LY==STICK_CENTER)
 80009c0:	4b9c      	ldr	r3, [pc, #624]	@ (8000c34 <serial_manager+0x520>)
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	2b80      	cmp	r3, #128	@ 0x80
 80009c6:	d112      	bne.n	80009ee <serial_manager+0x2da>
						joystick_input.LY=STICK_MAX;
 80009c8:	4b9a      	ldr	r3, [pc, #616]	@ (8000c34 <serial_manager+0x520>)
 80009ca:	22ff      	movs	r2, #255	@ 0xff
 80009cc:	711a      	strb	r2, [r3, #4]
 80009ce:	e00e      	b.n	80009ee <serial_manager+0x2da>
					}
				else{
					if(joystick_input.LY==STICK_MAX)
 80009d0:	4b98      	ldr	r3, [pc, #608]	@ (8000c34 <serial_manager+0x520>)
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	2bff      	cmp	r3, #255	@ 0xff
 80009d6:	d103      	bne.n	80009e0 <serial_manager+0x2cc>
						joystick_input.LY=STICK_CENTER;
 80009d8:	4b96      	ldr	r3, [pc, #600]	@ (8000c34 <serial_manager+0x520>)
 80009da:	2280      	movs	r2, #128	@ 0x80
 80009dc:	711a      	strb	r2, [r3, #4]
 80009de:	e006      	b.n	80009ee <serial_manager+0x2da>
					else if(joystick_input.LY==STICK_CENTER)
 80009e0:	4b94      	ldr	r3, [pc, #592]	@ (8000c34 <serial_manager+0x520>)
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	2b80      	cmp	r3, #128	@ 0x80
 80009e6:	d102      	bne.n	80009ee <serial_manager+0x2da>
						joystick_input.LY=STICK_MIN;
 80009e8:	4b92      	ldr	r3, [pc, #584]	@ (8000c34 <serial_manager+0x520>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	711a      	strb	r2, [r3, #4]
					}
				}
			if(hid_map[pos][mode] == LY_MIN){
 80009ee:	4b92      	ldr	r3, [pc, #584]	@ (8000c38 <serial_manager+0x524>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4992      	ldr	r1, [pc, #584]	@ (8000c3c <serial_manager+0x528>)
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009fe:	f240 122d 	movw	r2, #301	@ 0x12d
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 837d 	bne.w	8001102 <serial_manager+0x9ee>
				if(pressed){
 8000a08:	4b8d      	ldr	r3, [pc, #564]	@ (8000c40 <serial_manager+0x52c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d010      	beq.n	8000a32 <serial_manager+0x31e>
					if(joystick_input.LY==STICK_MAX)
 8000a10:	4b88      	ldr	r3, [pc, #544]	@ (8000c34 <serial_manager+0x520>)
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	2bff      	cmp	r3, #255	@ 0xff
 8000a16:	d103      	bne.n	8000a20 <serial_manager+0x30c>
						joystick_input.LY=STICK_CENTER;
 8000a18:	4b86      	ldr	r3, [pc, #536]	@ (8000c34 <serial_manager+0x520>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	711a      	strb	r2, [r3, #4]
						joystick_input.LY=STICK_CENTER;
					else if(joystick_input.LY==STICK_CENTER)
						joystick_input.LY=STICK_MAX;
					}
				}
			break;
 8000a1e:	e370      	b.n	8001102 <serial_manager+0x9ee>
					else if(joystick_input.LY==STICK_CENTER)
 8000a20:	4b84      	ldr	r3, [pc, #528]	@ (8000c34 <serial_manager+0x520>)
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	2b80      	cmp	r3, #128	@ 0x80
 8000a26:	f040 836c 	bne.w	8001102 <serial_manager+0x9ee>
						joystick_input.LY=STICK_MIN;
 8000a2a:	4b82      	ldr	r3, [pc, #520]	@ (8000c34 <serial_manager+0x520>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
			break;
 8000a30:	e367      	b.n	8001102 <serial_manager+0x9ee>
					if(joystick_input.LY==STICK_MIN)
 8000a32:	4b80      	ldr	r3, [pc, #512]	@ (8000c34 <serial_manager+0x520>)
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <serial_manager+0x32e>
						joystick_input.LY=STICK_CENTER;
 8000a3a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c34 <serial_manager+0x520>)
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	711a      	strb	r2, [r3, #4]
			break;
 8000a40:	e35f      	b.n	8001102 <serial_manager+0x9ee>
					else if(joystick_input.LY==STICK_CENTER)
 8000a42:	4b7c      	ldr	r3, [pc, #496]	@ (8000c34 <serial_manager+0x520>)
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	2b80      	cmp	r3, #128	@ 0x80
 8000a48:	f040 835b 	bne.w	8001102 <serial_manager+0x9ee>
						joystick_input.LY=STICK_MAX;
 8000a4c:	4b79      	ldr	r3, [pc, #484]	@ (8000c34 <serial_manager+0x520>)
 8000a4e:	22ff      	movs	r2, #255	@ 0xff
 8000a50:	711a      	strb	r2, [r3, #4]
			break;
 8000a52:	e356      	b.n	8001102 <serial_manager+0x9ee>
	// L-STICK(X)
		case RX_CTL:
			if(hid_map[pos][mode] == RX_MAX){
 8000a54:	4b78      	ldr	r3, [pc, #480]	@ (8000c38 <serial_manager+0x524>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4978      	ldr	r1, [pc, #480]	@ (8000c3c <serial_manager+0x528>)
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a64:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000a68:	d122      	bne.n	8000ab0 <serial_manager+0x39c>
				if(pressed){
 8000a6a:	4b75      	ldr	r3, [pc, #468]	@ (8000c40 <serial_manager+0x52c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00f      	beq.n	8000a92 <serial_manager+0x37e>
					if(joystick_input.RX==STICK_MIN)
 8000a72:	4b70      	ldr	r3, [pc, #448]	@ (8000c34 <serial_manager+0x520>)
 8000a74:	795b      	ldrb	r3, [r3, #5]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <serial_manager+0x36e>
						joystick_input.RX=STICK_CENTER;
 8000a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8000c34 <serial_manager+0x520>)
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	715a      	strb	r2, [r3, #5]
 8000a80:	e016      	b.n	8000ab0 <serial_manager+0x39c>
					else if(joystick_input.RX==STICK_CENTER)
 8000a82:	4b6c      	ldr	r3, [pc, #432]	@ (8000c34 <serial_manager+0x520>)
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	2b80      	cmp	r3, #128	@ 0x80
 8000a88:	d112      	bne.n	8000ab0 <serial_manager+0x39c>
						joystick_input.RX=STICK_MAX;
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8000c34 <serial_manager+0x520>)
 8000a8c:	22ff      	movs	r2, #255	@ 0xff
 8000a8e:	715a      	strb	r2, [r3, #5]
 8000a90:	e00e      	b.n	8000ab0 <serial_manager+0x39c>
					}
				else{
					if(joystick_input.RX==STICK_MAX)
 8000a92:	4b68      	ldr	r3, [pc, #416]	@ (8000c34 <serial_manager+0x520>)
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	2bff      	cmp	r3, #255	@ 0xff
 8000a98:	d103      	bne.n	8000aa2 <serial_manager+0x38e>
						joystick_input.RX=STICK_CENTER;
 8000a9a:	4b66      	ldr	r3, [pc, #408]	@ (8000c34 <serial_manager+0x520>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	715a      	strb	r2, [r3, #5]
 8000aa0:	e006      	b.n	8000ab0 <serial_manager+0x39c>
					else if(joystick_input.RX==STICK_CENTER)
 8000aa2:	4b64      	ldr	r3, [pc, #400]	@ (8000c34 <serial_manager+0x520>)
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	2b80      	cmp	r3, #128	@ 0x80
 8000aa8:	d102      	bne.n	8000ab0 <serial_manager+0x39c>
						joystick_input.RX=STICK_MIN;
 8000aaa:	4b62      	ldr	r3, [pc, #392]	@ (8000c34 <serial_manager+0x520>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	715a      	strb	r2, [r3, #5]
					}
				}
			if(hid_map[pos][mode] == RX_MIN){
 8000ab0:	4b61      	ldr	r3, [pc, #388]	@ (8000c38 <serial_manager+0x524>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4961      	ldr	r1, [pc, #388]	@ (8000c3c <serial_manager+0x528>)
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac0:	f240 1291 	movw	r2, #401	@ 0x191
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	f040 831e 	bne.w	8001106 <serial_manager+0x9f2>
				if(pressed){
 8000aca:	4b5d      	ldr	r3, [pc, #372]	@ (8000c40 <serial_manager+0x52c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d010      	beq.n	8000af4 <serial_manager+0x3e0>
					if(joystick_input.RX==STICK_MAX)
 8000ad2:	4b58      	ldr	r3, [pc, #352]	@ (8000c34 <serial_manager+0x520>)
 8000ad4:	795b      	ldrb	r3, [r3, #5]
 8000ad6:	2bff      	cmp	r3, #255	@ 0xff
 8000ad8:	d103      	bne.n	8000ae2 <serial_manager+0x3ce>
						joystick_input.RX=STICK_CENTER;
 8000ada:	4b56      	ldr	r3, [pc, #344]	@ (8000c34 <serial_manager+0x520>)
 8000adc:	2280      	movs	r2, #128	@ 0x80
 8000ade:	715a      	strb	r2, [r3, #5]
						joystick_input.RX=STICK_CENTER;
					else if(joystick_input.RX==STICK_CENTER)
						joystick_input.RX=STICK_MAX;
					}
				}
			break;
 8000ae0:	e311      	b.n	8001106 <serial_manager+0x9f2>
					else if(joystick_input.RX==STICK_CENTER)
 8000ae2:	4b54      	ldr	r3, [pc, #336]	@ (8000c34 <serial_manager+0x520>)
 8000ae4:	795b      	ldrb	r3, [r3, #5]
 8000ae6:	2b80      	cmp	r3, #128	@ 0x80
 8000ae8:	f040 830d 	bne.w	8001106 <serial_manager+0x9f2>
						joystick_input.RX=STICK_MIN;
 8000aec:	4b51      	ldr	r3, [pc, #324]	@ (8000c34 <serial_manager+0x520>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
			break;
 8000af2:	e308      	b.n	8001106 <serial_manager+0x9f2>
					if(joystick_input.RX==STICK_MIN)
 8000af4:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <serial_manager+0x520>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <serial_manager+0x3f0>
						joystick_input.RX=STICK_CENTER;
 8000afc:	4b4d      	ldr	r3, [pc, #308]	@ (8000c34 <serial_manager+0x520>)
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	715a      	strb	r2, [r3, #5]
			break;
 8000b02:	e300      	b.n	8001106 <serial_manager+0x9f2>
					else if(joystick_input.RX==STICK_CENTER)
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <serial_manager+0x520>)
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	2b80      	cmp	r3, #128	@ 0x80
 8000b0a:	f040 82fc 	bne.w	8001106 <serial_manager+0x9f2>
						joystick_input.RX=STICK_MAX;
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <serial_manager+0x520>)
 8000b10:	22ff      	movs	r2, #255	@ 0xff
 8000b12:	715a      	strb	r2, [r3, #5]
			break;
 8000b14:	e2f7      	b.n	8001106 <serial_manager+0x9f2>
	// L-STICK(Y)
		case RY_CTL:
			if(hid_map[pos][mode] == RY_MAX){
 8000b16:	4b48      	ldr	r3, [pc, #288]	@ (8000c38 <serial_manager+0x524>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4948      	ldr	r1, [pc, #288]	@ (8000c3c <serial_manager+0x528>)
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b2a:	d122      	bne.n	8000b72 <serial_manager+0x45e>
				if(pressed){
 8000b2c:	4b44      	ldr	r3, [pc, #272]	@ (8000c40 <serial_manager+0x52c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00f      	beq.n	8000b54 <serial_manager+0x440>
					if(joystick_input.RY==STICK_MIN)
 8000b34:	4b3f      	ldr	r3, [pc, #252]	@ (8000c34 <serial_manager+0x520>)
 8000b36:	799b      	ldrb	r3, [r3, #6]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <serial_manager+0x430>
						joystick_input.RY=STICK_CENTER;
 8000b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <serial_manager+0x520>)
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	719a      	strb	r2, [r3, #6]
 8000b42:	e016      	b.n	8000b72 <serial_manager+0x45e>
					else if(joystick_input.RY==STICK_CENTER)
 8000b44:	4b3b      	ldr	r3, [pc, #236]	@ (8000c34 <serial_manager+0x520>)
 8000b46:	799b      	ldrb	r3, [r3, #6]
 8000b48:	2b80      	cmp	r3, #128	@ 0x80
 8000b4a:	d112      	bne.n	8000b72 <serial_manager+0x45e>
						joystick_input.RY=STICK_MAX;
 8000b4c:	4b39      	ldr	r3, [pc, #228]	@ (8000c34 <serial_manager+0x520>)
 8000b4e:	22ff      	movs	r2, #255	@ 0xff
 8000b50:	719a      	strb	r2, [r3, #6]
 8000b52:	e00e      	b.n	8000b72 <serial_manager+0x45e>
					}
				else{
					if(joystick_input.RY==STICK_MAX)
 8000b54:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <serial_manager+0x520>)
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	2bff      	cmp	r3, #255	@ 0xff
 8000b5a:	d103      	bne.n	8000b64 <serial_manager+0x450>
						joystick_input.RY=STICK_CENTER;
 8000b5c:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <serial_manager+0x520>)
 8000b5e:	2280      	movs	r2, #128	@ 0x80
 8000b60:	719a      	strb	r2, [r3, #6]
 8000b62:	e006      	b.n	8000b72 <serial_manager+0x45e>
					else if(joystick_input.RY==STICK_CENTER)
 8000b64:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <serial_manager+0x520>)
 8000b66:	799b      	ldrb	r3, [r3, #6]
 8000b68:	2b80      	cmp	r3, #128	@ 0x80
 8000b6a:	d102      	bne.n	8000b72 <serial_manager+0x45e>
						joystick_input.RY=STICK_MIN;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <serial_manager+0x520>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	719a      	strb	r2, [r3, #6]
					}
				}
			if(hid_map[pos][mode] == RY_MIN){
 8000b72:	4b31      	ldr	r3, [pc, #196]	@ (8000c38 <serial_manager+0x524>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4931      	ldr	r1, [pc, #196]	@ (8000c3c <serial_manager+0x528>)
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b82:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d122      	bne.n	8000bd0 <serial_manager+0x4bc>
				if(pressed){
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <serial_manager+0x52c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00f      	beq.n	8000bb2 <serial_manager+0x49e>
					if(joystick_input.RY==STICK_MAX)
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <serial_manager+0x520>)
 8000b94:	799b      	ldrb	r3, [r3, #6]
 8000b96:	2bff      	cmp	r3, #255	@ 0xff
 8000b98:	d103      	bne.n	8000ba2 <serial_manager+0x48e>
						joystick_input.RY=STICK_CENTER;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <serial_manager+0x520>)
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	719a      	strb	r2, [r3, #6]
 8000ba0:	e016      	b.n	8000bd0 <serial_manager+0x4bc>
					else if(joystick_input.RY==STICK_CENTER)
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <serial_manager+0x520>)
 8000ba4:	799b      	ldrb	r3, [r3, #6]
 8000ba6:	2b80      	cmp	r3, #128	@ 0x80
 8000ba8:	d112      	bne.n	8000bd0 <serial_manager+0x4bc>
						joystick_input.RY=STICK_MIN;
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <serial_manager+0x520>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	719a      	strb	r2, [r3, #6]
 8000bb0:	e00e      	b.n	8000bd0 <serial_manager+0x4bc>
					}
				else{
					if(joystick_input.RY==STICK_MIN)
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <serial_manager+0x520>)
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <serial_manager+0x4ae>
						joystick_input.RY=STICK_CENTER;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <serial_manager+0x520>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	719a      	strb	r2, [r3, #6]
 8000bc0:	e006      	b.n	8000bd0 <serial_manager+0x4bc>
					else if(joystick_input.RY==STICK_CENTER)
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <serial_manager+0x520>)
 8000bc4:	799b      	ldrb	r3, [r3, #6]
 8000bc6:	2b80      	cmp	r3, #128	@ 0x80
 8000bc8:	d102      	bne.n	8000bd0 <serial_manager+0x4bc>
						joystick_input.RY=STICK_MAX;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <serial_manager+0x520>)
 8000bcc:	22ff      	movs	r2, #255	@ 0xff
 8000bce:	719a      	strb	r2, [r3, #6]
					}
				}
	// HAT
		case HAT_CTL:
			switch(joystick_input.HAT){
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <serial_manager+0x520>)
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	f200 8298 	bhi.w	800110a <serial_manager+0x9f6>
 8000bda:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <serial_manager+0x4cc>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c05 	.word	0x08000c05
 8000be4:	08000c9d 	.word	0x08000c9d
 8000be8:	08000d1d 	.word	0x08000d1d
 8000bec:	08000da5 	.word	0x08000da5
 8000bf0:	08000e25 	.word	0x08000e25
 8000bf4:	08000ebd 	.word	0x08000ebd
 8000bf8:	08000f3d 	.word	0x08000f3d
 8000bfc:	08000fc5 	.word	0x08000fc5
 8000c00:	08001045 	.word	0x08001045
				case HAT_TOP:
					switch(hid_map[pos][mode]){
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <serial_manager+0x524>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <serial_manager+0x528>)
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c14:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	f200 825c 	bhi.w	80010d6 <serial_manager+0x9c2>
 8000c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <serial_manager+0x510>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c45 	.word	0x08000c45
 8000c28:	08000c55 	.word	0x08000c55
 8000c2c:	08000c6d 	.word	0x08000c6d
 8000c30:	08000c85 	.word	0x08000c85
 8000c34:	2000094c 	.word	0x2000094c
 8000c38:	20000948 	.word	0x20000948
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000944 	.word	0x20000944
						case HT_TOP:
							if(!pressed) joystick_input.HAT=HAT_CENTER;
 8000c44:	4b99      	ldr	r3, [pc, #612]	@ (8000eac <serial_manager+0x798>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d123      	bne.n	8000c94 <serial_manager+0x580>
 8000c4c:	4b98      	ldr	r3, [pc, #608]	@ (8000eb0 <serial_manager+0x79c>)
 8000c4e:	2208      	movs	r2, #8
 8000c50:	709a      	strb	r2, [r3, #2]
							break;
 8000c52:	e01f      	b.n	8000c94 <serial_manager+0x580>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_TOP_LEFT;
 8000c54:	4b95      	ldr	r3, [pc, #596]	@ (8000eac <serial_manager+0x798>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <serial_manager+0x550>
 8000c5c:	4b94      	ldr	r3, [pc, #592]	@ (8000eb0 <serial_manager+0x79c>)
 8000c5e:	2207      	movs	r2, #7
 8000c60:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_TOP_RIGHT;
							break;
 8000c62:	e01a      	b.n	8000c9a <serial_manager+0x586>
							else joystick_input.HAT=HAT_TOP_RIGHT;
 8000c64:	4b92      	ldr	r3, [pc, #584]	@ (8000eb0 <serial_manager+0x79c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	709a      	strb	r2, [r3, #2]
							break;
 8000c6a:	e016      	b.n	8000c9a <serial_manager+0x586>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_TOP_RIGHT;
 8000c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8000eac <serial_manager+0x798>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <serial_manager+0x568>
 8000c74:	4b8e      	ldr	r3, [pc, #568]	@ (8000eb0 <serial_manager+0x79c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_TOP_LEFT;
							break;
 8000c7a:	e00e      	b.n	8000c9a <serial_manager+0x586>
							else joystick_input.HAT=HAT_TOP_LEFT;
 8000c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000eb0 <serial_manager+0x79c>)
 8000c7e:	2207      	movs	r2, #7
 8000c80:	709a      	strb	r2, [r3, #2]
							break;
 8000c82:	e00a      	b.n	8000c9a <serial_manager+0x586>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_CENTER;
 8000c84:	4b89      	ldr	r3, [pc, #548]	@ (8000eac <serial_manager+0x798>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <serial_manager+0x584>
 8000c8c:	4b88      	ldr	r3, [pc, #544]	@ (8000eb0 <serial_manager+0x79c>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	709a      	strb	r2, [r3, #2]
							break;
 8000c92:	e001      	b.n	8000c98 <serial_manager+0x584>
							break;
 8000c94:	bf00      	nop
 8000c96:	e21e      	b.n	80010d6 <serial_manager+0x9c2>
							break;
 8000c98:	bf00      	nop
					}
					break;
 8000c9a:	e21c      	b.n	80010d6 <serial_manager+0x9c2>
				case HAT_TOP_RIGHT:
					switch(hid_map[pos][mode]){
 8000c9c:	4b85      	ldr	r3, [pc, #532]	@ (8000eb4 <serial_manager+0x7a0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4985      	ldr	r1, [pc, #532]	@ (8000eb8 <serial_manager+0x7a4>)
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cac:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	f200 8212 	bhi.w	80010da <serial_manager+0x9c6>
 8000cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cbc <serial_manager+0x5a8>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000ccd 	.word	0x08000ccd
 8000cc0:	08000cdd 	.word	0x08000cdd
 8000cc4:	08000ced 	.word	0x08000ced
 8000cc8:	08000cfd 	.word	0x08000cfd
						case HT_TOP:
							if(!pressed) joystick_input.HAT=HAT_RIGHT;
 8000ccc:	4b77      	ldr	r3, [pc, #476]	@ (8000eac <serial_manager+0x798>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d11b      	bne.n	8000d0c <serial_manager+0x5f8>
 8000cd4:	4b76      	ldr	r3, [pc, #472]	@ (8000eb0 <serial_manager+0x79c>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	709a      	strb	r2, [r3, #2]
							break;
 8000cda:	e017      	b.n	8000d0c <serial_manager+0x5f8>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_TOP;
 8000cdc:	4b73      	ldr	r3, [pc, #460]	@ (8000eac <serial_manager+0x798>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d015      	beq.n	8000d10 <serial_manager+0x5fc>
 8000ce4:	4b72      	ldr	r3, [pc, #456]	@ (8000eb0 <serial_manager+0x79c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	709a      	strb	r2, [r3, #2]
							break;
 8000cea:	e011      	b.n	8000d10 <serial_manager+0x5fc>
						case HT_RGT:
							if(!pressed) joystick_input.HAT=HAT_TOP;
 8000cec:	4b6f      	ldr	r3, [pc, #444]	@ (8000eac <serial_manager+0x798>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10f      	bne.n	8000d14 <serial_manager+0x600>
 8000cf4:	4b6e      	ldr	r3, [pc, #440]	@ (8000eb0 <serial_manager+0x79c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	709a      	strb	r2, [r3, #2]
							break;
 8000cfa:	e00b      	b.n	8000d14 <serial_manager+0x600>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_RIGHT;
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8000eac <serial_manager+0x798>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <serial_manager+0x604>
 8000d04:	4b6a      	ldr	r3, [pc, #424]	@ (8000eb0 <serial_manager+0x79c>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	709a      	strb	r2, [r3, #2]
							break;
 8000d0a:	e005      	b.n	8000d18 <serial_manager+0x604>
							break;
 8000d0c:	bf00      	nop
 8000d0e:	e1e4      	b.n	80010da <serial_manager+0x9c6>
							break;
 8000d10:	bf00      	nop
 8000d12:	e1e2      	b.n	80010da <serial_manager+0x9c6>
							break;
 8000d14:	bf00      	nop
 8000d16:	e1e0      	b.n	80010da <serial_manager+0x9c6>
							break;
 8000d18:	bf00      	nop
					}
					break;
 8000d1a:	e1de      	b.n	80010da <serial_manager+0x9c6>
				case HAT_RIGHT:
					switch(hid_map[pos][mode]){
 8000d1c:	4b65      	ldr	r3, [pc, #404]	@ (8000eb4 <serial_manager+0x7a0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4965      	ldr	r1, [pc, #404]	@ (8000eb8 <serial_manager+0x7a4>)
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d2c:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	f200 81d4 	bhi.w	80010de <serial_manager+0x9ca>
 8000d36:	a201      	add	r2, pc, #4	@ (adr r2, 8000d3c <serial_manager+0x628>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d4d 	.word	0x08000d4d
 8000d40:	08000d65 	.word	0x08000d65
 8000d44:	08000d75 	.word	0x08000d75
 8000d48:	08000d85 	.word	0x08000d85
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_TOP_RIGHT;
 8000d4c:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <serial_manager+0x798>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <serial_manager+0x648>
 8000d54:	4b56      	ldr	r3, [pc, #344]	@ (8000eb0 <serial_manager+0x79c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_BOTTOM_RIGHT;
							break;
 8000d5a:	e022      	b.n	8000da2 <serial_manager+0x68e>
							else joystick_input.HAT=HAT_BOTTOM_RIGHT;
 8000d5c:	4b54      	ldr	r3, [pc, #336]	@ (8000eb0 <serial_manager+0x79c>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	709a      	strb	r2, [r3, #2]
							break;
 8000d62:	e01e      	b.n	8000da2 <serial_manager+0x68e>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_CENTER;
 8000d64:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <serial_manager+0x798>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d017      	beq.n	8000d9c <serial_manager+0x688>
 8000d6c:	4b50      	ldr	r3, [pc, #320]	@ (8000eb0 <serial_manager+0x79c>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	709a      	strb	r2, [r3, #2]
							break;
 8000d72:	e013      	b.n	8000d9c <serial_manager+0x688>
						case HT_RGT:
							if(!pressed) joystick_input.HAT=HAT_CENTER;
 8000d74:	4b4d      	ldr	r3, [pc, #308]	@ (8000eac <serial_manager+0x798>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d111      	bne.n	8000da0 <serial_manager+0x68c>
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb0 <serial_manager+0x79c>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	709a      	strb	r2, [r3, #2]
							break;
 8000d82:	e00d      	b.n	8000da0 <serial_manager+0x68c>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_BOTTOM_RIGHT;
 8000d84:	4b49      	ldr	r3, [pc, #292]	@ (8000eac <serial_manager+0x798>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <serial_manager+0x680>
 8000d8c:	4b48      	ldr	r3, [pc, #288]	@ (8000eb0 <serial_manager+0x79c>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_TOP_RIGHT;
							break;
 8000d92:	e006      	b.n	8000da2 <serial_manager+0x68e>
							else joystick_input.HAT=HAT_TOP_RIGHT;
 8000d94:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <serial_manager+0x79c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	709a      	strb	r2, [r3, #2]
							break;
 8000d9a:	e002      	b.n	8000da2 <serial_manager+0x68e>
							break;
 8000d9c:	bf00      	nop
 8000d9e:	e19e      	b.n	80010de <serial_manager+0x9ca>
							break;
 8000da0:	bf00      	nop
					}
					break;
 8000da2:	e19c      	b.n	80010de <serial_manager+0x9ca>
				case HAT_BOTTOM_RIGHT:
					switch(hid_map[pos][mode]){
 8000da4:	4b43      	ldr	r3, [pc, #268]	@ (8000eb4 <serial_manager+0x7a0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4943      	ldr	r1, [pc, #268]	@ (8000eb8 <serial_manager+0x7a4>)
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db4:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	f200 8192 	bhi.w	80010e2 <serial_manager+0x9ce>
 8000dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <serial_manager+0x6b0>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000de5 	.word	0x08000de5
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	08000e05 	.word	0x08000e05
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_RIGHT;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <serial_manager+0x798>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d01b      	beq.n	8000e14 <serial_manager+0x700>
 8000ddc:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <serial_manager+0x79c>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	709a      	strb	r2, [r3, #2]
							break;
 8000de2:	e017      	b.n	8000e14 <serial_manager+0x700>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_BOTTOM;
 8000de4:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <serial_manager+0x798>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d015      	beq.n	8000e18 <serial_manager+0x704>
 8000dec:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <serial_manager+0x79c>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	709a      	strb	r2, [r3, #2]
							break;
 8000df2:	e011      	b.n	8000e18 <serial_manager+0x704>
						case HT_RGT:
							if(!pressed) joystick_input.HAT=HAT_BOTTOM;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <serial_manager+0x798>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10f      	bne.n	8000e1c <serial_manager+0x708>
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <serial_manager+0x79c>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	709a      	strb	r2, [r3, #2]
							break;
 8000e02:	e00b      	b.n	8000e1c <serial_manager+0x708>
						case HT_DWN:
							if(!pressed) joystick_input.HAT=HAT_RIGHT;
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <serial_manager+0x798>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <serial_manager+0x70c>
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <serial_manager+0x79c>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	709a      	strb	r2, [r3, #2]
							break;
 8000e12:	e005      	b.n	8000e20 <serial_manager+0x70c>
							break;
 8000e14:	bf00      	nop
 8000e16:	e164      	b.n	80010e2 <serial_manager+0x9ce>
							break;
 8000e18:	bf00      	nop
 8000e1a:	e162      	b.n	80010e2 <serial_manager+0x9ce>
							break;
 8000e1c:	bf00      	nop
 8000e1e:	e160      	b.n	80010e2 <serial_manager+0x9ce>
							break;
 8000e20:	bf00      	nop
					}
					break;
 8000e22:	e15e      	b.n	80010e2 <serial_manager+0x9ce>
				case HAT_BOTTOM:
					switch(hid_map[pos][mode]){
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <serial_manager+0x7a0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4923      	ldr	r1, [pc, #140]	@ (8000eb8 <serial_manager+0x7a4>)
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e34:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	f200 8154 	bhi.w	80010e6 <serial_manager+0x9d2>
 8000e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <serial_manager+0x730>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e7d 	.word	0x08000e7d
 8000e50:	08000e95 	.word	0x08000e95
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_CENTER;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <serial_manager+0x798>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d023      	beq.n	8000ea4 <serial_manager+0x790>
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <serial_manager+0x79c>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	709a      	strb	r2, [r3, #2]
							break;
 8000e62:	e01f      	b.n	8000ea4 <serial_manager+0x790>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_BOTTOM_LEFT;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <serial_manager+0x798>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <serial_manager+0x760>
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <serial_manager+0x79c>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_BOTTOM_RIGHT;
							break;
 8000e72:	e01a      	b.n	8000eaa <serial_manager+0x796>
							else joystick_input.HAT=HAT_BOTTOM_RIGHT;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <serial_manager+0x79c>)
 8000e76:	2203      	movs	r2, #3
 8000e78:	709a      	strb	r2, [r3, #2]
							break;
 8000e7a:	e016      	b.n	8000eaa <serial_manager+0x796>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_BOTTOM_RIGHT;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <serial_manager+0x798>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <serial_manager+0x778>
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <serial_manager+0x79c>)
 8000e86:	2203      	movs	r2, #3
 8000e88:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_BOTTOM_LEFT;
							break;
 8000e8a:	e00e      	b.n	8000eaa <serial_manager+0x796>
							else joystick_input.HAT=HAT_BOTTOM_LEFT;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <serial_manager+0x79c>)
 8000e8e:	2205      	movs	r2, #5
 8000e90:	709a      	strb	r2, [r3, #2]
							break;
 8000e92:	e00a      	b.n	8000eaa <serial_manager+0x796>
						case HT_DWN:
							if(!pressed) joystick_input.HAT=HAT_CENTER;
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <serial_manager+0x798>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <serial_manager+0x794>
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <serial_manager+0x79c>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	709a      	strb	r2, [r3, #2]
							break;
 8000ea2:	e001      	b.n	8000ea8 <serial_manager+0x794>
							break;
 8000ea4:	bf00      	nop
 8000ea6:	e11e      	b.n	80010e6 <serial_manager+0x9d2>
							break;
 8000ea8:	bf00      	nop
					}
					break;
 8000eaa:	e11c      	b.n	80010e6 <serial_manager+0x9d2>
 8000eac:	20000944 	.word	0x20000944
 8000eb0:	2000094c 	.word	0x2000094c
 8000eb4:	20000948 	.word	0x20000948
 8000eb8:	20000000 	.word	0x20000000
				case HAT_BOTTOM_LEFT:
					switch(hid_map[pos][mode]){
 8000ebc:	4b99      	ldr	r3, [pc, #612]	@ (8001124 <serial_manager+0xa10>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4999      	ldr	r1, [pc, #612]	@ (8001128 <serial_manager+0xa14>)
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ecc:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f200 810a 	bhi.w	80010ea <serial_manager+0x9d6>
 8000ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8000edc <serial_manager+0x7c8>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000efd 	.word	0x08000efd
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	08000f1d 	.word	0x08000f1d
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_LEFT;
 8000eec:	4b8f      	ldr	r3, [pc, #572]	@ (800112c <serial_manager+0xa18>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01b      	beq.n	8000f2c <serial_manager+0x818>
 8000ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8001130 <serial_manager+0xa1c>)
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	709a      	strb	r2, [r3, #2]
							break;
 8000efa:	e017      	b.n	8000f2c <serial_manager+0x818>
						case HT_LFT:
							if(!pressed) joystick_input.HAT=HAT_BOTTOM;
 8000efc:	4b8b      	ldr	r3, [pc, #556]	@ (800112c <serial_manager+0xa18>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d115      	bne.n	8000f30 <serial_manager+0x81c>
 8000f04:	4b8a      	ldr	r3, [pc, #552]	@ (8001130 <serial_manager+0xa1c>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	709a      	strb	r2, [r3, #2]
							break;
 8000f0a:	e011      	b.n	8000f30 <serial_manager+0x81c>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_BOTTOM;
 8000f0c:	4b87      	ldr	r3, [pc, #540]	@ (800112c <serial_manager+0xa18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00f      	beq.n	8000f34 <serial_manager+0x820>
 8000f14:	4b86      	ldr	r3, [pc, #536]	@ (8001130 <serial_manager+0xa1c>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	709a      	strb	r2, [r3, #2]
							break;
 8000f1a:	e00b      	b.n	8000f34 <serial_manager+0x820>
						case HT_DWN:
							if(!pressed) joystick_input.HAT=HAT_LEFT;
 8000f1c:	4b83      	ldr	r3, [pc, #524]	@ (800112c <serial_manager+0xa18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <serial_manager+0x824>
 8000f24:	4b82      	ldr	r3, [pc, #520]	@ (8001130 <serial_manager+0xa1c>)
 8000f26:	2206      	movs	r2, #6
 8000f28:	709a      	strb	r2, [r3, #2]
							break;
 8000f2a:	e005      	b.n	8000f38 <serial_manager+0x824>
							break;
 8000f2c:	bf00      	nop
 8000f2e:	e0dc      	b.n	80010ea <serial_manager+0x9d6>
							break;
 8000f30:	bf00      	nop
 8000f32:	e0da      	b.n	80010ea <serial_manager+0x9d6>
							break;
 8000f34:	bf00      	nop
 8000f36:	e0d8      	b.n	80010ea <serial_manager+0x9d6>
							break;
 8000f38:	bf00      	nop
					}
					break;
 8000f3a:	e0d6      	b.n	80010ea <serial_manager+0x9d6>
				case HAT_LEFT:
					switch(hid_map[pos][mode]){
 8000f3c:	4b79      	ldr	r3, [pc, #484]	@ (8001124 <serial_manager+0xa10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4979      	ldr	r1, [pc, #484]	@ (8001128 <serial_manager+0xa14>)
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f4c:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	f200 80cc 	bhi.w	80010ee <serial_manager+0x9da>
 8000f56:	a201      	add	r2, pc, #4	@ (adr r2, 8000f5c <serial_manager+0x848>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f85 	.word	0x08000f85
 8000f64:	08000f95 	.word	0x08000f95
 8000f68:	08000fa5 	.word	0x08000fa5
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_TOP_LEFT;
 8000f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800112c <serial_manager+0xa18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <serial_manager+0x868>
 8000f74:	4b6e      	ldr	r3, [pc, #440]	@ (8001130 <serial_manager+0xa1c>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_BOTTOM_LEFT;
							break;
 8000f7a:	e022      	b.n	8000fc2 <serial_manager+0x8ae>
							else joystick_input.HAT=HAT_BOTTOM_LEFT;
 8000f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001130 <serial_manager+0xa1c>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	709a      	strb	r2, [r3, #2]
							break;
 8000f82:	e01e      	b.n	8000fc2 <serial_manager+0x8ae>
						case HT_LFT:
							if(!pressed) joystick_input.HAT=HAT_CENTER;
 8000f84:	4b69      	ldr	r3, [pc, #420]	@ (800112c <serial_manager+0xa18>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d117      	bne.n	8000fbc <serial_manager+0x8a8>
 8000f8c:	4b68      	ldr	r3, [pc, #416]	@ (8001130 <serial_manager+0xa1c>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	709a      	strb	r2, [r3, #2]
							break;
 8000f92:	e013      	b.n	8000fbc <serial_manager+0x8a8>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_CENTER;
 8000f94:	4b65      	ldr	r3, [pc, #404]	@ (800112c <serial_manager+0xa18>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d011      	beq.n	8000fc0 <serial_manager+0x8ac>
 8000f9c:	4b64      	ldr	r3, [pc, #400]	@ (8001130 <serial_manager+0xa1c>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	709a      	strb	r2, [r3, #2]
							break;
 8000fa2:	e00d      	b.n	8000fc0 <serial_manager+0x8ac>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_BOTTOM_LEFT;
 8000fa4:	4b61      	ldr	r3, [pc, #388]	@ (800112c <serial_manager+0xa18>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <serial_manager+0x8a0>
 8000fac:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <serial_manager+0xa1c>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_TOP_LEFT;
							break;
 8000fb2:	e006      	b.n	8000fc2 <serial_manager+0x8ae>
							else joystick_input.HAT=HAT_TOP_LEFT;
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001130 <serial_manager+0xa1c>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	709a      	strb	r2, [r3, #2]
							break;
 8000fba:	e002      	b.n	8000fc2 <serial_manager+0x8ae>
							break;
 8000fbc:	bf00      	nop
 8000fbe:	e096      	b.n	80010ee <serial_manager+0x9da>
							break;
 8000fc0:	bf00      	nop
					}
					break;
 8000fc2:	e094      	b.n	80010ee <serial_manager+0x9da>
				case HAT_TOP_LEFT:
					switch(hid_map[pos][mode]){
 8000fc4:	4b57      	ldr	r3, [pc, #348]	@ (8001124 <serial_manager+0xa10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4957      	ldr	r1, [pc, #348]	@ (8001128 <serial_manager+0xa14>)
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fd4:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	f200 808a 	bhi.w	80010f2 <serial_manager+0x9de>
 8000fde:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe4 <serial_manager+0x8d0>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001015 	.word	0x08001015
 8000ff0:	08001025 	.word	0x08001025
						case HT_TOP:
							if(!pressed) joystick_input.HAT=HAT_LEFT;
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800112c <serial_manager+0xa18>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11b      	bne.n	8001034 <serial_manager+0x920>
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8001130 <serial_manager+0xa1c>)
 8000ffe:	2206      	movs	r2, #6
 8001000:	709a      	strb	r2, [r3, #2]
							break;
 8001002:	e017      	b.n	8001034 <serial_manager+0x920>
						case HT_LFT:
							if(!pressed) joystick_input.HAT=HAT_TOP;
 8001004:	4b49      	ldr	r3, [pc, #292]	@ (800112c <serial_manager+0xa18>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d115      	bne.n	8001038 <serial_manager+0x924>
 800100c:	4b48      	ldr	r3, [pc, #288]	@ (8001130 <serial_manager+0xa1c>)
 800100e:	2200      	movs	r2, #0
 8001010:	709a      	strb	r2, [r3, #2]
							break;
 8001012:	e011      	b.n	8001038 <serial_manager+0x924>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_TOP;
 8001014:	4b45      	ldr	r3, [pc, #276]	@ (800112c <serial_manager+0xa18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00f      	beq.n	800103c <serial_manager+0x928>
 800101c:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <serial_manager+0xa1c>)
 800101e:	2200      	movs	r2, #0
 8001020:	709a      	strb	r2, [r3, #2]
							break;
 8001022:	e00b      	b.n	800103c <serial_manager+0x928>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_LEFT;
 8001024:	4b41      	ldr	r3, [pc, #260]	@ (800112c <serial_manager+0xa18>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <serial_manager+0x92c>
 800102c:	4b40      	ldr	r3, [pc, #256]	@ (8001130 <serial_manager+0xa1c>)
 800102e:	2206      	movs	r2, #6
 8001030:	709a      	strb	r2, [r3, #2]
							break;
 8001032:	e005      	b.n	8001040 <serial_manager+0x92c>
							break;
 8001034:	bf00      	nop
 8001036:	e05c      	b.n	80010f2 <serial_manager+0x9de>
							break;
 8001038:	bf00      	nop
 800103a:	e05a      	b.n	80010f2 <serial_manager+0x9de>
							break;
 800103c:	bf00      	nop
 800103e:	e058      	b.n	80010f2 <serial_manager+0x9de>
							break;
 8001040:	bf00      	nop
					}
					break;
 8001042:	e056      	b.n	80010f2 <serial_manager+0x9de>
				case HAT_CENTER:
					switch(hid_map[pos][mode]){
 8001044:	4b37      	ldr	r3, [pc, #220]	@ (8001124 <serial_manager+0xa10>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4937      	ldr	r1, [pc, #220]	@ (8001128 <serial_manager+0xa14>)
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4413      	add	r3, r2
 8001050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001054:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8001058:	2b03      	cmp	r3, #3
 800105a:	d84c      	bhi.n	80010f6 <serial_manager+0x9e2>
 800105c:	a201      	add	r2, pc, #4	@ (adr r2, 8001064 <serial_manager+0x950>)
 800105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001062:	bf00      	nop
 8001064:	08001075 	.word	0x08001075
 8001068:	0800108d 	.word	0x0800108d
 800106c:	080010a5 	.word	0x080010a5
 8001070:	080010bd 	.word	0x080010bd
						case HT_TOP:
							if(pressed) joystick_input.HAT=HAT_TOP;
 8001074:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <serial_manager+0xa18>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <serial_manager+0x970>
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <serial_manager+0xa1c>)
 800107e:	2200      	movs	r2, #0
 8001080:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_BOTTOM;
							break;
 8001082:	e027      	b.n	80010d4 <serial_manager+0x9c0>
							else joystick_input.HAT=HAT_BOTTOM;
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <serial_manager+0xa1c>)
 8001086:	2204      	movs	r2, #4
 8001088:	709a      	strb	r2, [r3, #2]
							break;
 800108a:	e023      	b.n	80010d4 <serial_manager+0x9c0>
						case HT_LFT:
							if(pressed) joystick_input.HAT=HAT_LEFT;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <serial_manager+0xa18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <serial_manager+0x988>
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <serial_manager+0xa1c>)
 8001096:	2206      	movs	r2, #6
 8001098:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_RIGHT;
							break;
 800109a:	e01b      	b.n	80010d4 <serial_manager+0x9c0>
							else joystick_input.HAT=HAT_RIGHT;
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <serial_manager+0xa1c>)
 800109e:	2202      	movs	r2, #2
 80010a0:	709a      	strb	r2, [r3, #2]
							break;
 80010a2:	e017      	b.n	80010d4 <serial_manager+0x9c0>
						case HT_RGT:
							if(pressed) joystick_input.HAT=HAT_RIGHT;
 80010a4:	4b21      	ldr	r3, [pc, #132]	@ (800112c <serial_manager+0xa18>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <serial_manager+0x9a0>
 80010ac:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <serial_manager+0xa1c>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_LEFT;
							break;
 80010b2:	e00f      	b.n	80010d4 <serial_manager+0x9c0>
							else joystick_input.HAT=HAT_LEFT;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <serial_manager+0xa1c>)
 80010b6:	2206      	movs	r2, #6
 80010b8:	709a      	strb	r2, [r3, #2]
							break;
 80010ba:	e00b      	b.n	80010d4 <serial_manager+0x9c0>
						case HT_DWN:
							if(pressed) joystick_input.HAT=HAT_BOTTOM;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <serial_manager+0xa18>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <serial_manager+0x9b8>
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <serial_manager+0xa1c>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	709a      	strb	r2, [r3, #2]
							else joystick_input.HAT=HAT_TOP;
							break;
 80010ca:	e002      	b.n	80010d2 <serial_manager+0x9be>
							else joystick_input.HAT=HAT_TOP;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <serial_manager+0xa1c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	709a      	strb	r2, [r3, #2]
							break;
 80010d2:	bf00      	nop
					}
					break;
 80010d4:	e00f      	b.n	80010f6 <serial_manager+0x9e2>
					break;
 80010d6:	bf00      	nop
 80010d8:	e017      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010da:	bf00      	nop
 80010dc:	e015      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010de:	bf00      	nop
 80010e0:	e013      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010e2:	bf00      	nop
 80010e4:	e011      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010e6:	bf00      	nop
 80010e8:	e00f      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010ea:	bf00      	nop
 80010ec:	e00d      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010ee:	bf00      	nop
 80010f0:	e00b      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010f2:	bf00      	nop
 80010f4:	e009      	b.n	800110a <serial_manager+0x9f6>
					break;
 80010f6:	bf00      	nop
				}
				break;
 80010f8:	e007      	b.n	800110a <serial_manager+0x9f6>
			break;
 80010fa:	bf00      	nop
 80010fc:	e006      	b.n	800110c <serial_manager+0x9f8>
			break;
 80010fe:	bf00      	nop
 8001100:	e004      	b.n	800110c <serial_manager+0x9f8>
			break;
 8001102:	bf00      	nop
 8001104:	e002      	b.n	800110c <serial_manager+0x9f8>
			break;
 8001106:	bf00      	nop
 8001108:	e000      	b.n	800110c <serial_manager+0x9f8>
				break;
 800110a:	bf00      	nop
		// Altrimenti ignoro
	}*/

	// INVIO REPORT
	//SendReport(&hUsbDeviceFS, &joystick_input);
	HoldReport(&hUsbDeviceFS, &joystick_input, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <serial_manager+0xa1c>)
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <serial_manager+0xa20>)
 8001112:	f000 f840 	bl	8001196 <HoldReport>
 8001116:	e002      	b.n	800111e <serial_manager+0xa0a>
	else return;
 8001118:	bf00      	nop
 800111a:	e000      	b.n	800111e <serial_manager+0xa0a>
			return;
 800111c:	bf00      	nop
}
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000948 	.word	0x20000948
 8001128:	20000000 	.word	0x20000000
 800112c:	20000944 	.word	0x20000944
 8001130:	2000094c 	.word	0x2000094c
 8001134:	20000964 	.word	0x20000964

08001138 <ResetReport>:
#include "ns_joystick.h"

USB_JoystickReport_Input joystick_input;
USB_JoystickReport_Output joystick_output;

void ResetReport(USB_JoystickReport_Input* report) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  memset(report, 0, sizeof(USB_JoystickReport_Input));
 8001140:	2208      	movs	r2, #8
 8001142:	2100      	movs	r1, #0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f009 fe8b 	bl	800ae60 <memset>
  report->LX = STICK_CENTER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	70da      	strb	r2, [r3, #3]
  report->LY = STICK_CENTER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	711a      	strb	r2, [r3, #4]
  report->RX = STICK_CENTER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2280      	movs	r2, #128	@ 0x80
 800115a:	715a      	strb	r2, [r3, #5]
  report->RY = STICK_CENTER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	719a      	strb	r2, [r3, #6]
  report->HAT = HAT_CENTER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2208      	movs	r2, #8
 8001166:	709a      	strb	r2, [r3, #2]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <SendReport>:

uint8_t SendReport(USBD_HandleTypeDef* pdev, USB_JoystickReport_Input* input_data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint8_t result = USBD_FAIL;
 800117a:	2302      	movs	r3, #2
 800117c:	73fb      	strb	r3, [r7, #15]
  result = USBD_HID_SendReport(pdev, (uint8_t*)input_data, sizeof(USB_JoystickReport_Input));
 800117e:	2208      	movs	r2, #8
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f008 f99a 	bl	80094bc <USBD_HID_SendReport>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
  return result;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HoldReport>:

void HoldReport(USBD_HandleTypeDef* pdev, USB_JoystickReport_Input* const input_data, uint32_t delay_ms)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a2:	f000 fa83 	bl	80016ac <HAL_GetTick>
 80011a6:	6178      	str	r0, [r7, #20]
  while ((HAL_GetTick() - tickstart) < delay_ms)
 80011a8:	e003      	b.n	80011b2 <HoldReport+0x1c>
  {
    SendReport(pdev, input_data);
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ffdf 	bl	8001170 <SendReport>
  while ((HAL_GetTick() - tickstart) < delay_ms)
 80011b2:	f000 fa7b 	bl	80016ac <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d8f3      	bhi.n	80011aa <HoldReport+0x14>
  }
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <HAL_MspInit+0x44>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HAL_MspInit+0x44>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_MspInit+0x44>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_MspInit+0x44>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_MspInit+0x44>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_MspInit+0x44>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001202:	2007      	movs	r0, #7
 8001204:	f000 fb52 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_I2C_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d127      	bne.n	8001286 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800124e:	23c0      	movs	r3, #192	@ 0xc0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <HAL_I2C_MspInit+0x84>)
 800126a:	f000 fde5 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_I2C_MspInit+0x80>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005400 	.word	0x40005400
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_SPI_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80012ee:	23e0      	movs	r3, #224	@ 0xe0
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fe:	2305      	movs	r3, #5
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f000 fd94 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a45      	ldr	r2, [pc, #276]	@ (8001454 <HAL_UART_MspInit+0x134>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d156      	bne.n	80013f0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a44      	ldr	r2, [pc, #272]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b42      	ldr	r3, [pc, #264]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <HAL_UART_MspInit+0x138>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a3e      	ldr	r2, [pc, #248]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b3c      	ldr	r3, [pc, #240]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001372:	2330      	movs	r3, #48	@ 0x30
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001382:	2307      	movs	r3, #7
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4833      	ldr	r0, [pc, #204]	@ (800145c <HAL_UART_MspInit+0x13c>)
 800138e:	f000 fd53 	bl	8001e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001392:	4b33      	ldr	r3, [pc, #204]	@ (8001460 <HAL_UART_MspInit+0x140>)
 8001394:	4a33      	ldr	r2, [pc, #204]	@ (8001464 <HAL_UART_MspInit+0x144>)
 8001396:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001398:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <HAL_UART_MspInit+0x140>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b30      	ldr	r3, [pc, #192]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013bc:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013c2:	4827      	ldr	r0, [pc, #156]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013c4:	f000 fac1 	bl	800194a <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80013ce:	f7ff f99b 	bl	8000708 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013d6:	675a      	str	r2, [r3, #116]	@ 0x74
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_UART_MspInit+0x140>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2025      	movs	r0, #37	@ 0x25
 80013e4:	f000 fa6d 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e8:	2025      	movs	r0, #37	@ 0x25
 80013ea:	f000 fa86 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ee:	e02d      	b.n	800144c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <HAL_UART_MspInit+0x148>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d128      	bne.n	800144c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a16      	ldr	r2, [pc, #88]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800142a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_UART_MspInit+0x14c>)
 8001448:	f000 fcf6 	bl	8001e38 <HAL_GPIO_Init>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000
 800145c:	48000800 	.word	0x48000800
 8001460:	200004a4 	.word	0x200004a4
 8001464:	40020058 	.word	0x40020058
 8001468:	40004800 	.word	0x40004800
 800146c:	48000400 	.word	0x48000400

08001470 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <HAL_UART_MspDeInit+0x60>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d112      	bne.n	80014a8 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <HAL_UART_MspDeInit+0x64>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a13      	ldr	r2, [pc, #76]	@ (80014d4 <HAL_UART_MspDeInit+0x64>)
 8001488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800148c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800148e:	2130      	movs	r1, #48	@ 0x30
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <HAL_UART_MspDeInit+0x68>)
 8001492:	f000 fe4b 	bl	800212c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fa9c 	bl	80019d8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80014a0:	2025      	movs	r0, #37	@ 0x25
 80014a2:	f000 fa38 	bl	8001916 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80014a6:	e00f      	b.n	80014c8 <HAL_UART_MspDeInit+0x58>
  else if(huart->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_UART_MspDeInit+0x6c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10a      	bne.n	80014c8 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_UART_MspDeInit+0x64>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_UART_MspDeInit+0x64>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014bc:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80014be:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <HAL_UART_MspDeInit+0x70>)
 80014c4:	f000 fe32 	bl	800212c <HAL_GPIO_DeInit>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000800 	.word	0x48000800
 80014dc:	40004800 	.word	0x40004800
 80014e0:	48000400 	.word	0x48000400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f8a3 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <DMA1_Channel5_IRQHandler+0x10>)
 800154a:	f000 fb68 	bl	8001c1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200004a4 	.word	0x200004a4

08001558 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800155e:	f001 f8f8 	bl	8002752 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000e28 	.word	0x20000e28

0800156c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <USART1_IRQHandler+0x10>)
 8001572:	f004 fa3b 	bl	80059ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000394 	.word	0x20000394

08001580 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f009 fc4d 	bl	800ae70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d6:	f7fe fe45 	bl	8000264 <main>

080015da <LoopForever>:

LoopForever:
    b LoopForever
 80015da:	e7fe      	b.n	80015da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80015e8:	0800af50 	.word	0x0800af50
  ldr r2, =_sbss
 80015ec:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80015f0:	20001110 	.word	0x20001110

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fdda 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f975 	bl	8001932 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000190 	.word	0x20000190
 800167c:	20000198 	.word	0x20000198
 8001680:	20000194 	.word	0x20000194

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000198 	.word	0x20000198
 80016a8:	2000095c 	.word	0x2000095c

080016ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000095c 	.word	0x2000095c

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db12      	blt.n	800179c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	490a      	ldr	r1, [pc, #40]	@ (80017a8 <__NVIC_DisableIRQ+0x44>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	3320      	adds	r3, #32
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001790:	f3bf 8f4f 	dsb	sy
}
 8001794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001796:	f3bf 8f6f 	isb	sy
}
 800179a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	@ (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	@ 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff05 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff1a 	bl	800170c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff0d 	bl	8001728 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff1d 	bl	8001764 <__NVIC_DisableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff94 	bl	8001868 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e037      	b.n	80019d0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001976:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800197a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fa04 	bl	8001dc0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e03a      	b.n	8001a60 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9d0 	bl	8001dc0 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_DMA_Start_IT+0x20>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e04a      	b.n	8001b1e <HAL_DMA_Start_IT+0xb6>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d13a      	bne.n	8001b10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f950 	bl	8001d64 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 020e 	orr.w	r2, r2, #14
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e00f      	b.n	8001afe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 020a 	orr.w	r2, r2, #10
 8001aec:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e005      	b.n	8001b1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e02e      	b.n	8001b96 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d008      	beq.n	8001b54 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2204      	movs	r2, #4
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e020      	b.n	8001b96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 020e 	bic.w	r2, r2, #14
 8001b62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d005      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e027      	b.n	8001c14 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
    }
  }
  return status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x72>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01f      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c76:	2104      	movs	r1, #4
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06a      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c8e:	e065      	b.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2202      	movs	r2, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02c      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xdc>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d027      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020a 	bic.w	r2, r2, #10
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2102      	movs	r1, #2
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d035      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cf8:	e030      	b.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2208      	movs	r2, #8
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d028      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020e 	bic.w	r2, r2, #14
 8001d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
    }
  }
}
 8001d5a:	e7ff      	b.n	8001d5c <HAL_DMA_IRQHandler+0x13e>
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d108      	bne.n	8001da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001da2:	e007      	b.n	8001db4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <DMA_CalcBaseAndBitshift+0x60>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d80f      	bhi.n	8001df4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <DMA_CalcBaseAndBitshift+0x6c>)
 8001df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001df2:	e00e      	b.n	8001e12 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <DMA_CalcBaseAndBitshift+0x70>)
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <DMA_CalcBaseAndBitshift+0x68>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	@ (8001e34 <DMA_CalcBaseAndBitshift+0x74>)
 8001e10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40020407 	.word	0x40020407
 8001e24:	bffdfff8 	.word	0xbffdfff8
 8001e28:	cccccccd 	.word	0xcccccccd
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	bffdfbf8 	.word	0xbffdfbf8
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e46:	e154      	b.n	80020f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8146 	beq.w	80020ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d005      	beq.n	8001e78 <HAL_GPIO_Init+0x40>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d130      	bne.n	8001eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 0201 	and.w	r2, r3, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d017      	beq.n	8001f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d123      	bne.n	8001f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	6939      	ldr	r1, [r7, #16]
 8001f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a0 	beq.w	80020ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fac:	4b58      	ldr	r3, [pc, #352]	@ (8002110 <HAL_GPIO_Init+0x2d8>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	@ (8002110 <HAL_GPIO_Init+0x2d8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b55      	ldr	r3, [pc, #340]	@ (8002110 <HAL_GPIO_Init+0x2d8>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc4:	4a53      	ldr	r2, [pc, #332]	@ (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fee:	d019      	beq.n	8002024 <HAL_GPIO_Init+0x1ec>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a49      	ldr	r2, [pc, #292]	@ (8002118 <HAL_GPIO_Init+0x2e0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1e8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a48      	ldr	r2, [pc, #288]	@ (800211c <HAL_GPIO_Init+0x2e4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1e4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a47      	ldr	r2, [pc, #284]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1e0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1dc>
 8002010:	2304      	movs	r3, #4
 8002012:	e008      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002014:	2305      	movs	r3, #5
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002018:	2303      	movs	r3, #3
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002036:	4937      	ldr	r1, [pc, #220]	@ (8002114 <HAL_GPIO_Init+0x2dc>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002044:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206e:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c2:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e6:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f aea3 	bne.w	8001e48 <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	48001000 	.word	0x48001000
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800213a:	e0b8      	b.n	80022ae <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ab 	beq.w	80022a8 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002152:	4a5e      	ldr	r2, [pc, #376]	@ (80022cc <HAL_GPIO_DeInit+0x1a0>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800217a:	d019      	beq.n	80021b0 <HAL_GPIO_DeInit+0x84>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a54      	ldr	r2, [pc, #336]	@ (80022d0 <HAL_GPIO_DeInit+0x1a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_GPIO_DeInit+0x80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <HAL_GPIO_DeInit+0x1a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_GPIO_DeInit+0x7c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_DeInit+0x1ac>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_DeInit+0x78>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a51      	ldr	r2, [pc, #324]	@ (80022dc <HAL_GPIO_DeInit+0x1b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_DeInit+0x74>
 800219c:	2304      	movs	r3, #4
 800219e:	e008      	b.n	80021b2 <HAL_GPIO_DeInit+0x86>
 80021a0:	2305      	movs	r3, #5
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_DeInit+0x86>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_DeInit+0x86>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_DeInit+0x86>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_DeInit+0x86>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d132      	bne.n	8002228 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4945      	ldr	r1, [pc, #276]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021d0:	4b43      	ldr	r3, [pc, #268]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4941      	ldr	r1, [pc, #260]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021de:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	493e      	ldr	r1, [pc, #248]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	493a      	ldr	r1, [pc, #232]	@ (80022e0 <HAL_GPIO_DeInit+0x1b4>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800220a:	4a30      	ldr	r2, [pc, #192]	@ (80022cc <HAL_GPIO_DeInit+0x1a0>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43da      	mvns	r2, r3
 800221a:	482c      	ldr	r0, [pc, #176]	@ (80022cc <HAL_GPIO_DeInit+0x1a0>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	400a      	ands	r2, r1
 8002222:	3302      	adds	r3, #2
 8002224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2103      	movs	r1, #3
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	08d2      	lsrs	r2, r2, #3
 800225e:	4019      	ands	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2103      	movs	r1, #3
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2101      	movs	r1, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2103      	movs	r1, #3
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]
    }

    position++;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f af40 	bne.w	800213c <HAL_GPIO_DeInit+0x10>
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	48000400 	.word	0x48000400
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000c00 	.word	0x48000c00
 80022dc:	48001000 	.word	0x48001000
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002300:	e002      	b.n	8002308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e08d      	b.n	8002442 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe ff6a 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	@ 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002364:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002374:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	e006      	b.n	800239c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800239a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d108      	bne.n	80023b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	e007      	b.n	80023c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	d138      	bne.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800246a:	2302      	movs	r3, #2
 800246c:	e032      	b.n	80024d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2224      	movs	r2, #36	@ 0x24
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800249c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d139      	bne.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002500:	2302      	movs	r3, #2
 8002502:	e033      	b.n	800256c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002532:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0b9      	b.n	80026fe <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f008 f9ae 	bl	800a900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 fb33 	bl	8006c1c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e03e      	b.n	800263a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3311      	adds	r3, #17
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	3310      	adds	r3, #16
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3313      	adds	r3, #19
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3320      	adds	r3, #32
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3324      	adds	r3, #36	@ 0x24
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3bb      	bcc.n	80025bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e044      	b.n	80026d4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3b5      	bcc.n	800264a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026ea:	f004 fab2 	bl	8006c52 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_Start+0x16>
 8002718:	2302      	movs	r3, #2
 800271a:	e016      	b.n	800274a <HAL_PCD_Start+0x44>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f004 fa60 	bl	8006bee <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800272e:	2101      	movs	r1, #1
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f008 fb5d 	bl	800adf0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f006 fd1e 	bl	800917c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f006 fd17 	bl	8009192 <USB_ReadInterrupts>
 8002764:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fa99 	bl	8002ca8 <PCD_EP_ISR_Handler>

    return;
 8002776:	e0bd      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d013      	beq.n	80027aa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800278a:	b29a      	uxth	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002794:	b292      	uxth	r2, r2
 8002796:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f008 f951 	bl	800aa42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027a0:	2100      	movs	r1, #0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8a9 	bl	80028fa <HAL_PCD_SetAddress>

    return;
 80027a8:	e0a4      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00c      	beq.n	80027ce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027c6:	b292      	uxth	r2, r2
 80027c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027cc:	e092      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027f0:	e080      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d027      	beq.n	800284c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0204 	bic.w	r2, r2, #4
 800280e:	b292      	uxth	r2, r2
 8002810:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f008 f941 	bl	800aab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002844:	b292      	uxth	r2, r2
 8002846:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800284a:	e053      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002852:	2b00      	cmp	r3, #0
 8002854:	d027      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0208 	orr.w	r2, r2, #8
 8002868:	b292      	uxth	r2, r2
 800286a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002880:	b292      	uxth	r2, r2
 8002882:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0204 	orr.w	r2, r2, #4
 8002898:	b292      	uxth	r2, r2
 800289a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f008 f8ee 	bl	800aa80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028a4:	e026      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00f      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028c2:	b292      	uxth	r2, r2
 80028c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f008 f8ac 	bl	800aa26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028ce:	e011      	b.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ec:	b292      	uxth	r2, r2
 80028ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028f2:	bf00      	nop
  }
}
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_PCD_SetAddress+0x1a>
 8002910:	2302      	movs	r3, #2
 8002912:	e012      	b.n	800293a <HAL_PCD_SetAddress+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f006 fc12 	bl	8009154 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	4608      	mov	r0, r1
 800294c:	4611      	mov	r1, r2
 800294e:	461a      	mov	r2, r3
 8002950:	4603      	mov	r3, r0
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	460b      	mov	r3, r1
 8002956:	803b      	strh	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da0e      	bge.n	8002986 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	3310      	adds	r3, #16
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	705a      	strb	r2, [r3, #1]
 8002984:	e00e      	b.n	80029a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0207 	and.w	r2, r3, #7
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029b0:	883a      	ldrh	r2, [r7, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	78ba      	ldrb	r2, [r7, #2]
 80029ba:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029bc:	78bb      	ldrb	r3, [r7, #2]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d102      	bne.n	80029c8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_PCD_EP_Open+0x94>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e00e      	b.n	80029f4 <HAL_PCD_EP_Open+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 f953 	bl	8006c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80029f2:	7afb      	ldrb	r3, [r7, #11]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da0e      	bge.n	8002a2e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0207 	and.w	r2, r3, #7
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	3310      	adds	r3, #16
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	705a      	strb	r2, [r3, #1]
 8002a2c:	e00e      	b.n	8002a4c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 0207 	and.w	r2, r3, #7
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_EP_Close+0x6a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e00e      	b.n	8002a84 <HAL_PCD_EP_Close+0x88>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fccf 	bl	8007418 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f003 0207 	and.w	r2, r3, #7
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	7afb      	ldrb	r3, [r7, #11]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6979      	ldr	r1, [r7, #20]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fe87 	bl	80077f2 <USB_EPStartXfer>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	460b      	mov	r3, r1
 8002afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	7afb      	ldrb	r3, [r7, #11]
 8002b00:	f003 0207 	and.w	r2, r3, #7
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2201      	movs	r2, #1
 8002b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6979      	ldr	r1, [r7, #20]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fe50 	bl	80077f2 <USB_EPStartXfer>

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	7912      	ldrb	r2, [r2, #4]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e03e      	b.n	8002bf8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da0e      	bge.n	8002ba0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 0207 	and.w	r2, r3, #7
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3310      	adds	r3, #16
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	705a      	strb	r2, [r3, #1]
 8002b9e:	e00c      	b.n	8002bba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_EP_SetStall+0x7e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e00e      	b.n	8002bf8 <HAL_PCD_EP_SetStall+0x9c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 f9b4 	bl	8008f56 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	7912      	ldrb	r2, [r2, #4]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e040      	b.n	8002ca0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da0e      	bge.n	8002c44 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 0207 	and.w	r2, r3, #7
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	3310      	adds	r3, #16
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	705a      	strb	r2, [r3, #1]
 8002c42:	e00e      	b.n	8002c62 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 0207 	and.w	r2, r3, #7
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_PCD_EP_ClrStall+0x82>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e00e      	b.n	8002ca0 <HAL_PCD_EP_ClrStall+0xa0>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f006 f9b1 	bl	8008ff8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b096      	sub	sp, #88	@ 0x58
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb0:	e3bb      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002cbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002ccc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 8175 	bne.w	8002fc0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002cd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d14e      	bne.n	8002d80 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf2:	81fb      	strh	r3, [r7, #14]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3310      	adds	r3, #16
 8002d0a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3302      	adds	r3, #2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	441a      	add	r2, r3
 8002d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d46:	2100      	movs	r1, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f007 fe52 	bl	800a9f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7b1b      	ldrb	r3, [r3, #12]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8368 	beq.w	800342a <PCD_EP_ISR_Handler+0x782>
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 8363 	bne.w	800342a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	731a      	strb	r2, [r3, #12]
 8002d7e:	e354      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d86:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d034      	beq.n	8002e08 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	3306      	adds	r3, #6
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f006 fa2e 	bl	800923e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002dee:	4013      	ands	r3, r2
 8002df0:	823b      	strh	r3, [r7, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	8a3a      	ldrh	r2, [r7, #16]
 8002df8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f007 fdc9 	bl	800a998 <HAL_PCD_SetupStageCallback>
 8002e06:	e310      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f280 830c 	bge.w	800342a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e1e:	4013      	ands	r3, r2
 8002e20:	83fb      	strh	r3, [r7, #30]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	8bfa      	ldrh	r2, [r7, #30]
 8002e28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	3306      	adds	r3, #6
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d019      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x1f0>
 8002e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e72:	6959      	ldr	r1, [r3, #20]
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f006 f9de 	bl	800923e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e90:	2100      	movs	r1, #0
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f007 fd92 	bl	800a9bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002ea2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 82bd 	bne.w	800342a <PCD_EP_ISR_Handler+0x782>
 8002eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002eb4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002eb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ebc:	f000 82b5 	beq.w	800342a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <PCD_EP_ISR_Handler+0x266>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e039      	b.n	8002f82 <PCD_EP_ISR_Handler+0x2da>
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f14:	d818      	bhi.n	8002f48 <PCD_EP_ISR_Handler+0x2a0>
 8002f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <PCD_EP_ISR_Handler+0x288>
 8002f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	029b      	lsls	r3, r3, #10
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e01c      	b.n	8002f82 <PCD_EP_ISR_Handler+0x2da>
 8002f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <PCD_EP_ISR_Handler+0x2ba>
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	029b      	lsls	r3, r3, #10
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	827b      	strh	r3, [r7, #18]
 8002f94:	8a7b      	ldrh	r3, [r7, #18]
 8002f96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f9a:	827b      	strh	r3, [r7, #18]
 8002f9c:	8a7b      	ldrh	r3, [r7, #18]
 8002f9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002fa2:	827b      	strh	r3, [r7, #18]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	8a7b      	ldrh	r3, [r7, #18]
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
 8002fbe:	e234      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fd4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f280 80fc 	bge.w	80031d6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800300c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003010:	b292      	uxth	r2, r2
 8003012:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003014:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800302a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302c:	7b1b      	ldrb	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d125      	bne.n	800307e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	3306      	adds	r3, #6
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800305e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8092 	beq.w	800318c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306e:	6959      	ldr	r1, [r3, #20]
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	88da      	ldrh	r2, [r3, #6]
 8003074:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003078:	f006 f8e1 	bl	800923e <USB_ReadPMA>
 800307c:	e086      	b.n	800318c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800307e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d10a      	bne.n	800309c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003086:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800308a:	461a      	mov	r2, r3
 800308c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9d9 	bl	8003446 <HAL_PCD_EP_DB_Receive>
 8003094:	4603      	mov	r3, r0
 8003096:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800309a:	e077      	b.n	800318c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	441a      	add	r2, r3
 80030c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d024      	beq.n	8003144 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	3302      	adds	r3, #2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003122:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003126:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d02e      	beq.n	800318c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003138:	891a      	ldrh	r2, [r3, #8]
 800313a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800313e:	f006 f87e 	bl	800923e <USB_ReadPMA>
 8003142:	e023      	b.n	800318c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	3306      	adds	r3, #6
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003170:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317e:	6959      	ldr	r1, [r3, #20]
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	895a      	ldrh	r2, [r3, #10]
 8003184:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003188:	f006 f859 	bl	800923e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800318c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003194:	441a      	add	r2, r3
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031a2:	441a      	add	r2, r3
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <PCD_EP_ISR_Handler+0x514>
 80031b0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d206      	bcs.n	80031ca <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f007 fbfa 	bl	800a9bc <HAL_PCD_DataOutStageCallback>
 80031c8:	e005      	b.n	80031d6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 fb0e 	bl	80077f2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8123 	beq.w	800342a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80031e4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3310      	adds	r3, #16
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003230:	b29b      	uxth	r3, r3
 8003232:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003236:	78db      	ldrb	r3, [r3, #3]
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 80a2 	bne.w	8003382 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003246:	7b1b      	ldrb	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8093 	beq.w	8003374 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800324e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d046      	beq.n	80032e8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800325a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d126      	bne.n	80032b0 <PCD_EP_ISR_Handler+0x608>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	4413      	add	r3, r2
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
 800327a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	011a      	lsls	r2, r3, #4
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	4413      	add	r3, r2
 8003284:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003288:	623b      	str	r3, [r7, #32]
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003294:	b29a      	uxth	r2, r3
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	e061      	b.n	8003374 <PCD_EP_ISR_Handler+0x6cc>
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d15d      	bne.n	8003374 <PCD_EP_ISR_Handler+0x6cc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	4413      	add	r3, r2
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	011a      	lsls	r2, r3, #4
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	4413      	add	r3, r2
 80032da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	e045      	b.n	8003374 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d126      	bne.n	8003344 <PCD_EP_ISR_Handler+0x69c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003304:	b29b      	uxth	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	4413      	add	r3, r2
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	011a      	lsls	r2, r3, #4
 8003314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003316:	4413      	add	r3, r2
 8003318:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003328:	b29a      	uxth	r2, r3
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333c:	b29a      	uxth	r2, r3
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e017      	b.n	8003374 <PCD_EP_ISR_Handler+0x6cc>
 8003344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d113      	bne.n	8003374 <PCD_EP_ISR_Handler+0x6cc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335a:	4413      	add	r3, r2
 800335c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	011a      	lsls	r2, r3, #4
 8003364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003366:	4413      	add	r3, r2
 8003368:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800336c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	2200      	movs	r2, #0
 8003372:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f007 fb39 	bl	800a9f2 <HAL_PCD_DataInStageCallback>
 8003380:	e053      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003382:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d146      	bne.n	800341c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	3302      	adds	r3, #2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80033ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d907      	bls.n	80033d6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033ce:	1ad2      	subs	r2, r2, r3
 80033d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d2:	619a      	str	r2, [r3, #24]
 80033d4:	e002      	b.n	80033dc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80033dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f007 fb01 	bl	800a9f2 <HAL_PCD_DataInStageCallback>
 80033f0:	e01b      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033fa:	441a      	add	r2, r3
 80033fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003408:	441a      	add	r2, r3
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003414:	4618      	mov	r0, r3
 8003416:	f004 f9ec 	bl	80077f2 <USB_EPStartXfer>
 800341a:	e006      	b.n	800342a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800341c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003420:	461a      	mov	r2, r3
 8003422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f91b 	bl	8003660 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003432:	b29b      	uxth	r3, r3
 8003434:	b21b      	sxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f6ff ac3b 	blt.w	8002cb2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3758      	adds	r7, #88	@ 0x58
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b088      	sub	sp, #32
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	4613      	mov	r3, r2
 8003452:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d07e      	beq.n	800355c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	3302      	adds	r3, #2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003486:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	8b7b      	ldrh	r3, [r7, #26]
 800348e:	429a      	cmp	r2, r3
 8003490:	d306      	bcc.n	80034a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	8b7b      	ldrh	r3, [r7, #26]
 8003498:	1ad2      	subs	r2, r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	619a      	str	r2, [r3, #24]
 800349e:	e002      	b.n	80034a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d123      	bne.n	80034f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c8:	833b      	strh	r3, [r7, #24]
 80034ca:	8b3b      	ldrh	r3, [r7, #24]
 80034cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034d0:	833b      	strh	r3, [r7, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	8b3b      	ldrh	r3, [r7, #24]
 80034e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01f      	beq.n	8003540 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351a:	82fb      	strh	r3, [r7, #22]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	8afb      	ldrh	r3, [r7, #22]
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003538:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6959      	ldr	r1, [r3, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	891a      	ldrh	r2, [r3, #8]
 8003554:	8b7b      	ldrh	r3, [r7, #26]
 8003556:	f005 fe72 	bl	800923e <USB_ReadPMA>
 800355a:	e07c      	b.n	8003656 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	3306      	adds	r3, #6
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003584:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	8b7b      	ldrh	r3, [r7, #26]
 800358c:	429a      	cmp	r2, r3
 800358e:	d306      	bcc.n	800359e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	8b7b      	ldrh	r3, [r7, #26]
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	619a      	str	r2, [r3, #24]
 800359c:	e002      	b.n	80035a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d123      	bne.n	80035f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	83fb      	strh	r3, [r7, #30]
 80035c8:	8bfb      	ldrh	r3, [r7, #30]
 80035ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035ce:	83fb      	strh	r3, [r7, #30]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	8bfb      	ldrh	r3, [r7, #30]
 80035e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003618:	83bb      	strh	r3, [r7, #28]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	441a      	add	r2, r3
 8003628:	8bbb      	ldrh	r3, [r7, #28]
 800362a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800362e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003636:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800363a:	b29b      	uxth	r3, r3
 800363c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800363e:	8b7b      	ldrh	r3, [r7, #26]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6959      	ldr	r1, [r3, #20]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	895a      	ldrh	r2, [r3, #10]
 8003650:	8b7b      	ldrh	r3, [r7, #26]
 8003652:	f005 fdf4 	bl	800923e <USB_ReadPMA>
    }
  }

  return count;
 8003656:	8b7b      	ldrh	r3, [r7, #26]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0a4      	sub	sp, #144	@ 0x90
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 81dd 	beq.w	8003a34 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	3302      	adds	r3, #2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d907      	bls.n	80036c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	619a      	str	r2, [r3, #24]
 80036c0:	e002      	b.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f040 80b9 	bne.w	8003844 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d126      	bne.n	8003728 <HAL_PCD_EP_DB_Transmit+0xc8>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011a      	lsls	r2, r3, #4
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370c:	b29a      	uxth	r2, r3
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003720:	b29a      	uxth	r2, r3
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e01a      	b.n	800375e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d116      	bne.n	800375e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	637b      	str	r3, [r7, #52]	@ 0x34
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003744:	4413      	add	r3, r2
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	011a      	lsls	r2, r3, #4
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	4413      	add	r3, r2
 8003752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	2200      	movs	r2, #0
 800375c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d126      	bne.n	80037ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	011a      	lsls	r2, r3, #4
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379e:	b29a      	uxth	r2, r3
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	e017      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d113      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	4413      	add	r3, r2
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	011a      	lsls	r2, r3, #4
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	4413      	add	r3, r2
 80037de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2200      	movs	r2, #0
 80037e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f007 f8fe 	bl	800a9f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 82fc 	beq.w	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381c:	82fb      	strh	r3, [r7, #22]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	441a      	add	r2, r3
 800382c:	8afb      	ldrh	r3, [r7, #22]
 800382e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800383a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]
 8003842:	e2da      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d021      	beq.n	8003892 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003868:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800387e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800388a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 82ae 	bne.w	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80038a6:	441a      	add	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80038b4:	441a      	add	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d30b      	bcc.n	80038de <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	621a      	str	r2, [r3, #32]
 80038dc:	e017      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80038e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80038ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038f6:	e00a      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d165      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x382>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392a:	4413      	add	r3, r2
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	011a      	lsls	r2, r3, #4
 8003934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003936:	4413      	add	r3, r2
 8003938:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003948:	b29a      	uxth	r2, r3
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003964:	b29a      	uxth	r2, r3
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	e057      	b.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800396c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003970:	2b3e      	cmp	r3, #62	@ 0x3e
 8003972:	d818      	bhi.n	80039a6 <HAL_PCD_EP_DB_Transmit+0x346>
 8003974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398a:	3301      	adds	r3, #1
 800398c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29a      	uxth	r2, r3
 8003994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003996:	b29b      	uxth	r3, r3
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	b29b      	uxth	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	e03a      	b.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x360>
 80039ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039bc:	3b01      	subs	r3, #1
 80039be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	029b      	lsls	r3, r3, #10
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e01c      	b.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d118      	bne.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fe:	4413      	add	r3, r2
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	011a      	lsls	r2, r3, #4
 8003a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6959      	ldr	r1, [r3, #20]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	891a      	ldrh	r2, [r3, #8]
 8003a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f005 fbc0 	bl	80091b2 <USB_WritePMA>
 8003a32:	e1e2      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	3306      	adds	r3, #6
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d307      	bcc.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a74:	1ad2      	subs	r2, r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	619a      	str	r2, [r3, #24]
 8003a7a:	e002      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80c0 	bne.w	8003c0c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d126      	bne.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x482>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aa8:	4413      	add	r3, r2
 8003aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	011a      	lsls	r2, r3, #4
 8003ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003aba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	e01a      	b.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d116      	bne.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003afe:	4413      	add	r3, r2
 8003b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	011a      	lsls	r2, r3, #4
 8003b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d12b      	bne.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3a:	4413      	add	r3, r2
 8003b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	011a      	lsls	r2, r3, #4
 8003b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b46:	4413      	add	r3, r2
 8003b48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e017      	b.n	8003bae <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d113      	bne.n	8003bae <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b94:	4413      	add	r3, r2
 8003b96:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	011a      	lsls	r2, r3, #4
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ba6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ba8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f006 ff1c 	bl	800a9f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 811a 	bne.w	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
 8003c0a:	e0f6      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d121      	bne.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 80ca 	bne.w	8003dfa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c6e:	441a      	add	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d30b      	bcc.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a1a      	ldr	r2, [r3, #32]
 8003c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	621a      	str	r2, [r3, #32]
 8003ca4:	e017      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003cae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cbe:	e00a      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d165      	bne.n	8003db0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf8:	4413      	add	r3, r2
 8003cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	011a      	lsls	r2, r3, #4
 8003d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x6da>
 8003d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e054      	b.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d40:	d818      	bhi.n	8003d74 <HAL_PCD_EP_DB_Transmit+0x714>
 8003d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003d56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d58:	3301      	adds	r3, #1
 8003d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	e037      	b.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003d88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	e019      	b.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d115      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc6:	4413      	add	r3, r2
 8003dc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	011a      	lsls	r2, r3, #4
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6959      	ldr	r1, [r3, #20]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	895a      	ldrh	r2, [r3, #10]
 8003df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f005 f9dc 	bl	80091b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e14:	82bb      	strh	r3, [r7, #20]
 8003e16:	8abb      	ldrh	r3, [r7, #20]
 8003e18:	f083 0310 	eor.w	r3, r3, #16
 8003e1c:	82bb      	strh	r3, [r7, #20]
 8003e1e:	8abb      	ldrh	r3, [r7, #20]
 8003e20:	f083 0320 	eor.w	r3, r3, #32
 8003e24:	82bb      	strh	r3, [r7, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	8abb      	ldrh	r3, [r7, #20]
 8003e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3790      	adds	r7, #144	@ 0x90
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	817b      	strh	r3, [r7, #10]
 8003e62:	4613      	mov	r3, r2
 8003e64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e66:	897b      	ldrh	r3, [r7, #10]
 8003e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	f003 0207 	and.w	r2, r3, #7
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	3310      	adds	r3, #16
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e009      	b.n	8003e9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e8a:	897a      	ldrh	r2, [r7, #10]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e9e:	893b      	ldrh	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	80da      	strh	r2, [r3, #6]
 8003eb2:	e00b      	b.n	8003ecc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f001 b823 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 817d 	beq.w	8004212 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f18:	4bbc      	ldr	r3, [pc, #752]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d00c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f24:	4bb9      	ldr	r3, [pc, #740]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d15c      	bne.n	8003fea <HAL_RCC_OscConfig+0x10e>
 8003f30:	4bb6      	ldr	r3, [pc, #728]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d155      	bne.n	8003fea <HAL_RCC_OscConfig+0x10e>
 8003f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f42:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <HAL_RCC_OscConfig+0x94>
 8003f6a:	4ba8      	ldr	r3, [pc, #672]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e015      	b.n	8003f9c <HAL_RCC_OscConfig+0xc0>
 8003f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f74:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003f84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f88:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003f8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003f98:	4b9c      	ldr	r3, [pc, #624]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fa0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003fa4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003fa8:	fa92 f2a2 	rbit	r2, r2
 8003fac:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003fb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003fb4:	fab2 f282 	clz	r2, r2
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f042 0220 	orr.w	r2, r2, #32
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f002 021f 	and.w	r2, r2, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 811f 	beq.w	8004210 <HAL_RCC_OscConfig+0x334>
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8116 	bne.w	8004210 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f000 bfaf 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x12e>
 8003ffc:	4b83      	ldr	r3, [pc, #524]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a82      	ldr	r2, [pc, #520]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e036      	b.n	8004078 <HAL_RCC_OscConfig+0x19c>
 800400a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x158>
 800401a:	4b7c      	ldr	r3, [pc, #496]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7b      	ldr	r2, [pc, #492]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b79      	ldr	r3, [pc, #484]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e021      	b.n	8004078 <HAL_RCC_OscConfig+0x19c>
 8004034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004038:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x184>
 8004046:	4b71      	ldr	r3, [pc, #452]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a70      	ldr	r2, [pc, #448]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b6e      	ldr	r3, [pc, #440]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6d      	ldr	r2, [pc, #436]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x19c>
 8004060:	4b6a      	ldr	r3, [pc, #424]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a69      	ldr	r2, [pc, #420]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b67      	ldr	r3, [pc, #412]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a66      	ldr	r2, [pc, #408]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004076:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004078:	4b64      	ldr	r3, [pc, #400]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	f023 020f 	bic.w	r2, r3, #15
 8004080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	495f      	ldr	r1, [pc, #380]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800408e:	4313      	orrs	r3, r2
 8004090:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d059      	beq.n	8004156 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd fb03 	bl	80016ac <HAL_GetTick>
 80040a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd fafe 	bl	80016ac <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b64      	cmp	r3, #100	@ 0x64
 80040ba:	d902      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	f000 bf43 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 80040c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040c6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80040d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_OscConfig+0x218>
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e015      	b.n	8004120 <HAL_RCC_OscConfig+0x244>
 80040f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040f8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800410c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004110:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800411c:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004124:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004128:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800412c:	fa92 f2a2 	rbit	r2, r2
 8004130:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004134:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004138:	fab2 f282 	clz	r2, r2
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f042 0220 	orr.w	r2, r2, #32
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	f002 021f 	and.w	r2, r2, #31
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f202 	lsl.w	r2, r1, r2
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ab      	beq.n	80040ac <HAL_RCC_OscConfig+0x1d0>
 8004154:	e05d      	b.n	8004212 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd faa9 	bl	80016ac <HAL_GetTick>
 800415a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd faa4 	bl	80016ac <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b64      	cmp	r3, #100	@ 0x64
 800416e:	d902      	bls.n	8004176 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f000 bee9 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004176:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800417a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800418a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d102      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2cc>
 80041a2:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	e015      	b.n	80041d4 <HAL_RCC_OscConfig+0x2f8>
 80041a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041ac:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80041bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041c0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80041c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80041d0:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <HAL_RCC_OscConfig+0x330>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041d8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80041dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80041e0:	fa92 f2a2 	rbit	r2, r2
 80041e4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80041e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80041ec:	fab2 f282 	clz	r2, r2
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f002 021f 	and.w	r2, r2, #31
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ab      	bne.n	8004160 <HAL_RCC_OscConfig+0x284>
 8004208:	e003      	b.n	8004212 <HAL_RCC_OscConfig+0x336>
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 817d 	beq.w	8004522 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004228:	4ba6      	ldr	r3, [pc, #664]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004234:	4ba3      	ldr	r3, [pc, #652]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d172      	bne.n	8004326 <HAL_RCC_OscConfig+0x44a>
 8004240:	4ba0      	ldr	r3, [pc, #640]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d16c      	bne.n	8004326 <HAL_RCC_OscConfig+0x44a>
 800424c:	2302      	movs	r3, #2
 800424e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800425e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d102      	bne.n	800427c <HAL_RCC_OscConfig+0x3a0>
 8004276:	4b93      	ldr	r3, [pc, #588]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	e013      	b.n	80042a4 <HAL_RCC_OscConfig+0x3c8>
 800427c:	2302      	movs	r3, #2
 800427e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800428e:	2302      	movs	r3, #2
 8004290:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004294:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042a0:	4b88      	ldr	r3, [pc, #544]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	2202      	movs	r2, #2
 80042a6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80042aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80042ae:	fa92 f2a2 	rbit	r2, r2
 80042b2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80042b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f042 0220 	orr.w	r2, r2, #32
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCC_OscConfig+0x410>
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f000 be2e 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b75      	ldr	r3, [pc, #468]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	21f8      	movs	r1, #248	@ 0xf8
 8004302:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800430a:	fa91 f1a1 	rbit	r1, r1
 800430e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004312:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004316:	fab1 f181 	clz	r1, r1
 800431a:	b2c9      	uxtb	r1, r1
 800431c:	408b      	lsls	r3, r1
 800431e:	4969      	ldr	r1, [pc, #420]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004324:	e0fd      	b.n	8004522 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8088 	beq.w	8004448 <HAL_RCC_OscConfig+0x56c>
 8004338:	2301      	movs	r3, #1
 800433a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800434a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004358:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	461a      	mov	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd f9a2 	bl	80016ac <HAL_GetTick>
 8004368:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436e:	f7fd f99d 	bl	80016ac <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d902      	bls.n	8004384 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	f000 bde2 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004384:	2302      	movs	r3, #2
 8004386:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004396:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4d8>
 80043ae:	4b45      	ldr	r3, [pc, #276]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e013      	b.n	80043dc <HAL_RCC_OscConfig+0x500>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80043c6:	2302      	movs	r3, #2
 80043c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80043cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80043d0:	fa93 f3a3 	rbit	r3, r3
 80043d4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80043d8:	4b3a      	ldr	r3, [pc, #232]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	2202      	movs	r2, #2
 80043de:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80043e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80043e6:	fa92 f2a2 	rbit	r2, r2
 80043ea:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80043ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80043f2:	fab2 f282 	clz	r2, r2
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	f042 0220 	orr.w	r2, r2, #32
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	f002 021f 	and.w	r2, r2, #31
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f202 	lsl.w	r2, r1, r2
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0af      	beq.n	800436e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	21f8      	movs	r1, #248	@ 0xf8
 8004424:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800442c:	fa91 f1a1 	rbit	r1, r1
 8004430:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004434:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004438:	fab1 f181 	clz	r1, r1
 800443c:	b2c9      	uxtb	r1, r1
 800443e:	408b      	lsls	r3, r1
 8004440:	4920      	ldr	r1, [pc, #128]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
 8004446:	e06c      	b.n	8004522 <HAL_RCC_OscConfig+0x646>
 8004448:	2301      	movs	r3, #1
 800444a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800445a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004468:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fd f91a 	bl	80016ac <HAL_GetTick>
 8004478:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd f915 	bl	80016ac <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d902      	bls.n	8004494 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	f000 bd5a 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004494:	2302      	movs	r3, #2
 8004496:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d104      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5ec>
 80044be:	4b01      	ldr	r3, [pc, #4]	@ (80044c4 <HAL_RCC_OscConfig+0x5e8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	e015      	b.n	80044f0 <HAL_RCC_OscConfig+0x614>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	2302      	movs	r3, #2
 80044ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80044da:	2302      	movs	r3, #2
 80044dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80044e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80044ec:	4bc8      	ldr	r3, [pc, #800]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2202      	movs	r2, #2
 80044f2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80044f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80044fa:	fa92 f2a2 	rbit	r2, r2
 80044fe:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004502:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004506:	fab2 f282 	clz	r2, r2
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	f042 0220 	orr.w	r2, r2, #32
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	f002 021f 	and.w	r2, r2, #31
 8004516:	2101      	movs	r1, #1
 8004518:	fa01 f202 	lsl.w	r2, r1, r2
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ad      	bne.n	800447e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8110 	beq.w	8004758 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d079      	beq.n	800463c <HAL_RCC_OscConfig+0x760>
 8004548:	2301      	movs	r3, #1
 800454a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	4bab      	ldr	r3, [pc, #684]	@ (8004814 <HAL_RCC_OscConfig+0x938>)
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	461a      	mov	r2, r3
 800456e:	2301      	movs	r3, #1
 8004570:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd f89b 	bl	80016ac <HAL_GetTick>
 8004576:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457c:	f7fd f896 	bl	80016ac <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	f000 bcdb 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004592:	2302      	movs	r3, #2
 8004594:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80045a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80045ac:	2202      	movs	r2, #2
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045d0:	2202      	movs	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	fa93 f2a3 	rbit	r2, r3
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80045ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ec:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 80045ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80045f8:	2102      	movs	r1, #2
 80045fa:	6019      	str	r1, [r3, #0]
 80045fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004600:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fa93 f1a3 	rbit	r1, r3
 800460a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004612:	6019      	str	r1, [r3, #0]
  return result;
 8004614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004618:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2101      	movs	r1, #1
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0a0      	beq.n	800457c <HAL_RCC_OscConfig+0x6a0>
 800463a:	e08d      	b.n	8004758 <HAL_RCC_OscConfig+0x87c>
 800463c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004640:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800465e:	601a      	str	r2, [r3, #0]
  return result;
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004668:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	4b68      	ldr	r3, [pc, #416]	@ (8004814 <HAL_RCC_OscConfig+0x938>)
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	461a      	mov	r2, r3
 800467a:	2300      	movs	r3, #0
 800467c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fd f815 	bl	80016ac <HAL_GetTick>
 8004682:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004688:	f7fd f810 	bl	80016ac <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d902      	bls.n	800469e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	f000 bc55 	b.w	8004f48 <HAL_RCC_OscConfig+0x106c>
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80046a6:	2202      	movs	r2, #2
 80046a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f2a3 	rbit	r2, r3
 80046b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80046ca:	2202      	movs	r2, #2
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80046ee:	2202      	movs	r2, #2
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	fa93 f2a3 	rbit	r2, r3
 8004700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004704:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004708:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470a:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 800470c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800470e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004712:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004716:	2102      	movs	r1, #2
 8004718:	6019      	str	r1, [r3, #0]
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	fa93 f1a3 	rbit	r1, r3
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004730:	6019      	str	r1, [r3, #0]
  return result;
 8004732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004736:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d197      	bne.n	8004688 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 81a1 	beq.w	8004ab0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004774:	4b26      	ldr	r3, [pc, #152]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d116      	bne.n	80047ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478a:	61d3      	str	r3, [r2, #28]
 800478c:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004798:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80047a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <HAL_RCC_OscConfig+0x93c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <HAL_RCC_OscConfig+0x93c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a16      	ldr	r2, [pc, #88]	@ (8004818 <HAL_RCC_OscConfig+0x93c>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fc ff71 	bl	80016ac <HAL_GetTick>
 80047ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	e009      	b.n	80047e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fc ff6c 	bl	80016ac <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b64      	cmp	r3, #100	@ 0x64
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e3b1      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_RCC_OscConfig+0x93c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10d      	bne.n	800481c <HAL_RCC_OscConfig+0x940>
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCC_OscConfig+0x934>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6213      	str	r3, [r2, #32]
 800480c:	e03c      	b.n	8004888 <HAL_RCC_OscConfig+0x9ac>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	10908120 	.word	0x10908120
 8004818:	40007000 	.word	0x40007000
 800481c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x96a>
 800482c:	4bc1      	ldr	r3, [pc, #772]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4ac0      	ldr	r2, [pc, #768]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6213      	str	r3, [r2, #32]
 8004838:	4bbe      	ldr	r3, [pc, #760]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	4abd      	ldr	r2, [pc, #756]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800483e:	f023 0304 	bic.w	r3, r3, #4
 8004842:	6213      	str	r3, [r2, #32]
 8004844:	e020      	b.n	8004888 <HAL_RCC_OscConfig+0x9ac>
 8004846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x994>
 8004856:	4bb7      	ldr	r3, [pc, #732]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4ab6      	ldr	r2, [pc, #728]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6213      	str	r3, [r2, #32]
 8004862:	4bb4      	ldr	r3, [pc, #720]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4ab3      	ldr	r2, [pc, #716]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6213      	str	r3, [r2, #32]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x9ac>
 8004870:	4bb0      	ldr	r3, [pc, #704]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	4aaf      	ldr	r2, [pc, #700]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6213      	str	r3, [r2, #32]
 800487c:	4bad      	ldr	r3, [pc, #692]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4aac      	ldr	r2, [pc, #688]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8081 	beq.w	800499c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489a:	f7fc ff07 	bl	80016ac <HAL_GetTick>
 800489e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fc ff02 	bl	80016ac <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e345      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
 80048bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048c4:	2202      	movs	r2, #2
 80048c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	fa93 f2a3 	rbit	r2, r3
 80048d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80048e8:	2202      	movs	r2, #2
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004902:	601a      	str	r2, [r3, #0]
  return result;
 8004904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004908:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800490c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d102      	bne.n	8004928 <HAL_RCC_OscConfig+0xa4c>
 8004922:	4b84      	ldr	r3, [pc, #528]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	e013      	b.n	8004950 <HAL_RCC_OscConfig+0xa74>
 8004928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004930:	2202      	movs	r2, #2
 8004932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	fa93 f2a3 	rbit	r2, r3
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	4b79      	ldr	r3, [pc, #484]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004954:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004958:	2102      	movs	r1, #2
 800495a:	6011      	str	r1, [r2, #0]
 800495c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004960:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	fa92 f1a2 	rbit	r1, r2
 800496a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800496e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004972:	6011      	str	r1, [r2, #0]
  return result;
 8004974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004978:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	fab2 f282 	clz	r2, r2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	f002 021f 	and.w	r2, r2, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f202 	lsl.w	r2, r1, r2
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d084      	beq.n	80048a4 <HAL_RCC_OscConfig+0x9c8>
 800499a:	e07f      	b.n	8004a9c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499c:	f7fc fe86 	bl	80016ac <HAL_GetTick>
 80049a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a4:	e00b      	b.n	80049be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fc fe81 	bl	80016ac <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e2c4      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
 80049be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80049c6:	2202      	movs	r2, #2
 80049c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	fa93 f2a3 	rbit	r2, r3
 80049d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049dc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fa93 f2a3 	rbit	r2, r3
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004a04:	601a      	str	r2, [r3, #0]
  return result;
 8004a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004a0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_OscConfig+0xb4e>
 8004a24:	4b43      	ldr	r3, [pc, #268]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	e013      	b.n	8004a52 <HAL_RCC_OscConfig+0xb76>
 8004a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004a32:	2202      	movs	r2, #2
 8004a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	fa93 f2a3 	rbit	r2, r3
 8004a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a48:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a56:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a62:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	fa92 f1a2 	rbit	r1, r2
 8004a6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a70:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004a74:	6011      	str	r1, [r2, #0]
  return result;
 8004a76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a7a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	fab2 f282 	clz	r2, r2
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f002 021f 	and.w	r2, r2, #31
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f202 	lsl.w	r2, r1, r2
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d184      	bne.n	80049a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b23      	ldr	r3, [pc, #140]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8242 	beq.w	8004f46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <HAL_RCC_OscConfig+0xc58>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	f000 8213 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	f040 8162 	bne.w	8004da6 <HAL_RCC_OscConfig+0xeca>
 8004ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004aea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	fa93 f2a3 	rbit	r2, r3
 8004afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004b06:	601a      	str	r2, [r3, #0]
  return result;
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004b10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc fdc0 	bl	80016ac <HAL_GetTick>
 8004b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b30:	e00c      	b.n	8004b4c <HAL_RCC_OscConfig+0xc70>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fc fdb8 	bl	80016ac <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e1fd      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b50:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004b70:	601a      	str	r2, [r3, #0]
  return result;
 8004b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b76:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004b7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_OscConfig+0xcba>
 8004b90:	4bb0      	ldr	r3, [pc, #704]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	e027      	b.n	8004be6 <HAL_RCC_OscConfig+0xd0a>
 8004b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004bc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bce:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	fa93 f2a3 	rbit	r2, r3
 8004bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bdc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	4b9c      	ldr	r3, [pc, #624]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bea:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004bee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bf8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	fa92 f1a2 	rbit	r1, r2
 8004c02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c06:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004c0a:	6011      	str	r1, [r2, #0]
  return result;
 8004c0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c10:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d182      	bne.n	8004b38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c32:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	430b      	orrs	r3, r1
 8004c54:	497f      	ldr	r1, [pc, #508]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
 8004c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004c62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	fa93 f2a3 	rbit	r2, r3
 8004c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004c7e:	601a      	str	r2, [r3, #0]
  return result;
 8004c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c84:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004c88:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fd04 	bl	80016ac <HAL_GetTick>
 8004ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ca8:	e009      	b.n	8004cbe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fc fcff 	bl	80016ac <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e144      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004cc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	fa93 f2a3 	rbit	r2, r3
 8004cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cde:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ce2:	601a      	str	r2, [r3, #0]
  return result;
 8004ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d102      	bne.n	8004d08 <HAL_RCC_OscConfig+0xe2c>
 8004d02:	4b54      	ldr	r3, [pc, #336]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e027      	b.n	8004d58 <HAL_RCC_OscConfig+0xe7c>
 8004d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	fa93 f2a3 	rbit	r2, r3
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d32:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004d36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	fa93 f2a3 	rbit	r2, r3
 8004d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	4b3f      	ldr	r3, [pc, #252]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d5c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004d60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d6a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	fa92 f1a2 	rbit	r1, r2
 8004d74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004d7c:	6011      	str	r1, [r2, #0]
  return result;
 8004d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d82:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	fab2 f282 	clz	r2, r2
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	f042 0220 	orr.w	r2, r2, #32
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	f002 021f 	and.w	r2, r2, #31
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d082      	beq.n	8004caa <HAL_RCC_OscConfig+0xdce>
 8004da4:	e0cf      	b.n	8004f46 <HAL_RCC_OscConfig+0x106a>
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004dae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	fa93 f2a3 	rbit	r2, r3
 8004dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004dca:	601a      	str	r2, [r3, #0]
  return result;
 8004dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004dd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004de0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	461a      	mov	r2, r3
 8004de8:	2300      	movs	r3, #0
 8004dea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fc fc5e 	bl	80016ac <HAL_GetTick>
 8004df0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df4:	e009      	b.n	8004e0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fc fc59 	bl	80016ac <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e09e      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
 8004e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e0e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004e12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	fa93 f2a3 	rbit	r2, r3
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004e2e:	601a      	str	r2, [r3, #0]
  return result;
 8004e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e34:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004e38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d104      	bne.n	8004e58 <HAL_RCC_OscConfig+0xf7c>
 8004e4e:	4b01      	ldr	r3, [pc, #4]	@ (8004e54 <HAL_RCC_OscConfig+0xf78>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e029      	b.n	8004ea8 <HAL_RCC_OscConfig+0xfcc>
 8004e54:	40021000 	.word	0x40021000
 8004e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	fa93 f2a3 	rbit	r2, r3
 8004e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e78:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e82:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004e86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e90:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	fa93 f2a3 	rbit	r2, r3
 8004e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e9e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <HAL_RCC_OscConfig+0x1078>)
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004eb0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eba:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	fa92 f1a2 	rbit	r1, r2
 8004ec4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ec8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004ecc:	6011      	str	r1, [r2, #0]
  return result;
 8004ece:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ed2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	fab2 f282 	clz	r2, r2
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f002 021f 	and.w	r2, r2, #31
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f202 	lsl.w	r2, r1, r2
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d180      	bne.n	8004df6 <HAL_RCC_OscConfig+0xf1a>
 8004ef4:	e027      	b.n	8004f46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e01e      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <HAL_RCC_OscConfig+0x1078>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004f16:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10b      	bne.n	8004f42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004f2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004f2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b09e      	sub	sp, #120	@ 0x78
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e162      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b90      	ldr	r3, [pc, #576]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	498b      	ldr	r1, [pc, #556]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b89      	ldr	r3, [pc, #548]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e14a      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b82      	ldr	r3, [pc, #520]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	497f      	ldr	r1, [pc, #508]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80dc 	beq.w	8005184 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d13c      	bne.n	800504e <HAL_RCC_ClockConfig+0xf6>
 8004fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d102      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xa6>
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	e00f      	b.n	800501e <HAL_RCC_ClockConfig+0xc6>
 8004ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005002:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005006:	fa93 f3a3 	rbit	r3, r3
 800500a:	667b      	str	r3, [r7, #100]	@ 0x64
 800500c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005010:	663b      	str	r3, [r7, #96]	@ 0x60
 8005012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501a:	4b67      	ldr	r3, [pc, #412]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005022:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005026:	fa92 f2a2 	rbit	r2, r2
 800502a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800502c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800502e:	fab2 f282 	clz	r2, r2
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	f042 0220 	orr.w	r2, r2, #32
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f002 021f 	and.w	r2, r2, #31
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f202 	lsl.w	r2, r1, r2
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d17b      	bne.n	8005142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0f3      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d13c      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x178>
 8005056:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800505a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005066:	fab3 f383 	clz	r3, r3
 800506a:	b2db      	uxtb	r3, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d102      	bne.n	8005080 <HAL_RCC_ClockConfig+0x128>
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	e00f      	b.n	80050a0 <HAL_RCC_ClockConfig+0x148>
 8005080:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005084:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005092:	643b      	str	r3, [r7, #64]	@ 0x40
 8005094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800509c:	4b46      	ldr	r3, [pc, #280]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050a4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80050a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050a8:	fa92 f2a2 	rbit	r2, r2
 80050ac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80050ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050b0:	fab2 f282 	clz	r2, r2
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	f042 0220 	orr.w	r2, r2, #32
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	f002 021f 	and.w	r2, r2, #31
 80050c0:	2101      	movs	r1, #1
 80050c2:	fa01 f202 	lsl.w	r2, r1, r2
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d13a      	bne.n	8005142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0b2      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
 80050d0:	2302      	movs	r3, #2
 80050d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1a0>
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	e00d      	b.n	8005114 <HAL_RCC_ClockConfig+0x1bc>
 80050f8:	2302      	movs	r3, #2
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
 8005104:	2302      	movs	r3, #2
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	fa93 f3a3 	rbit	r3, r3
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	4b29      	ldr	r3, [pc, #164]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	2202      	movs	r2, #2
 8005116:	61ba      	str	r2, [r7, #24]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	fa92 f2a2 	rbit	r2, r2
 800511e:	617a      	str	r2, [r7, #20]
  return result;
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	fab2 f282 	clz	r2, r2
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	f002 021f 	and.w	r2, r2, #31
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f202 	lsl.w	r2, r1, r2
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e079      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b1d      	ldr	r3, [pc, #116]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	491a      	ldr	r1, [pc, #104]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fc faaa 	bl	80016ac <HAL_GetTick>
 8005158:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fc faa6 	bl	80016ac <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e061      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b11      	ldr	r3, [pc, #68]	@ (80051b8 <HAL_RCC_ClockConfig+0x260>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b0b      	ldr	r3, [pc, #44]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d214      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b04      	ldr	r3, [pc, #16]	@ (80051b4 <HAL_RCC_ClockConfig+0x25c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e040      	b.n	8005236 <HAL_RCC_ClockConfig+0x2de>
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <HAL_RCC_ClockConfig+0x2e8>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	491a      	ldr	r1, [pc, #104]	@ (8005240 <HAL_RCC_ClockConfig+0x2e8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e6:	4b16      	ldr	r3, [pc, #88]	@ (8005240 <HAL_RCC_ClockConfig+0x2e8>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4912      	ldr	r1, [pc, #72]	@ (8005240 <HAL_RCC_ClockConfig+0x2e8>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051fa:	f000 f829 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 80051fe:	4601      	mov	r1, r0
 8005200:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <HAL_RCC_ClockConfig+0x2e8>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005208:	22f0      	movs	r2, #240	@ 0xf0
 800520a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	fa92 f2a2 	rbit	r2, r2
 8005212:	60fa      	str	r2, [r7, #12]
  return result;
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	fab2 f282 	clz	r2, r2
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	40d3      	lsrs	r3, r2
 800521e:	4a09      	ldr	r2, [pc, #36]	@ (8005244 <HAL_RCC_ClockConfig+0x2ec>)
 8005220:	5cd3      	ldrb	r3, [r2, r3]
 8005222:	fa21 f303 	lsr.w	r3, r1, r3
 8005226:	4a08      	ldr	r2, [pc, #32]	@ (8005248 <HAL_RCC_ClockConfig+0x2f0>)
 8005228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800522a:	4b08      	ldr	r3, [pc, #32]	@ (800524c <HAL_RCC_ClockConfig+0x2f4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fc f9f8 	bl	8001624 <HAL_InitTick>
  
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3778      	adds	r7, #120	@ 0x78
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	0800af10 	.word	0x0800af10
 8005248:	20000190 	.word	0x20000190
 800524c:	20000194 	.word	0x20000194

08005250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800526a:	4b1e      	ldr	r3, [pc, #120]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b04      	cmp	r3, #4
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x30>
 800527a:	2b08      	cmp	r3, #8
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x36>
 800527e:	e026      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005282:	613b      	str	r3, [r7, #16]
      break;
 8005284:	e026      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	0c9b      	lsrs	r3, r3, #18
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005290:	5cd3      	ldrb	r3, [r2, r3]
 8005292:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005294:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052ac:	4a0e      	ldr	r2, [pc, #56]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e004      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	613b      	str	r3, [r7, #16]
      break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052ce:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80052d0:	613b      	str	r3, [r7, #16]
      break;
 80052d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052d4:	693b      	ldr	r3, [r7, #16]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	007a1200 	.word	0x007a1200
 80052ec:	0800af28 	.word	0x0800af28
 80052f0:	0800af38 	.word	0x0800af38
 80052f4:	003d0900 	.word	0x003d0900

080052f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <HAL_RCC_GetHCLKFreq+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000190 	.word	0x20000190

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005316:	f7ff ffef 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 800531a:	4601      	mov	r1, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005324:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005328:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	fa92 f2a2 	rbit	r2, r2
 8005330:	603a      	str	r2, [r7, #0]
  return result;
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	fab2 f282 	clz	r2, r2
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	40d3      	lsrs	r3, r2
 800533c:	4a04      	ldr	r2, [pc, #16]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x40>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	0800af20 	.word	0x0800af20

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800535a:	f7ff ffcd 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 800535e:	4601      	mov	r1, r0
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005368:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800536c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	fa92 f2a2 	rbit	r2, r2
 8005374:	603a      	str	r2, [r7, #0]
  return result;
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	fab2 f282 	clz	r2, r2
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	40d3      	lsrs	r3, r2
 8005380:	4a04      	ldr	r2, [pc, #16]	@ (8005394 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	0800af20 	.word	0x0800af20

08005398 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b092      	sub	sp, #72	@ 0x48
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80d4 	beq.w	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053bc:	4b4e      	ldr	r3, [pc, #312]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10e      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c8:	4b4b      	ldr	r3, [pc, #300]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4a4a      	ldr	r2, [pc, #296]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	61d3      	str	r3, [r2, #28]
 80053d4:	4b48      	ldr	r3, [pc, #288]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e6:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d118      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f2:	4b42      	ldr	r3, [pc, #264]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a41      	ldr	r2, [pc, #260]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053fe:	f7fc f955 	bl	80016ac <HAL_GetTick>
 8005402:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005404:	e008      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005406:	f7fc f951 	bl	80016ac <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	@ 0x64
 8005412:	d901      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e169      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005424:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800542e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8084 	beq.w	800553e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005440:	429a      	cmp	r2, r3
 8005442:	d07c      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005444:	4b2c      	ldr	r3, [pc, #176]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800544e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	fa93 f3a3 	rbit	r3, r3
 800545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800545e:	fab3 f383 	clz	r3, r3
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	4b26      	ldr	r3, [pc, #152]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	461a      	mov	r2, r3
 800546e:	2301      	movs	r3, #1
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005476:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	4b1d      	ldr	r3, [pc, #116]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005496:	4a18      	ldr	r2, [pc, #96]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800549c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04b      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fc f901 	bl	80016ac <HAL_GetTick>
 80054aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fc f8fd 	bl	80016ac <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e113      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x354>
 80054c4:	2302      	movs	r3, #2
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d0:	2302      	movs	r3, #2
 80054d2:	623b      	str	r3, [r7, #32]
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	fa93 f3a3 	rbit	r3, r3
 80054da:	61fb      	str	r3, [r7, #28]
  return result;
 80054dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d108      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80054f2:	4b01      	ldr	r3, [pc, #4]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	e00d      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40007000 	.word	0x40007000
 8005500:	10908100 	.word	0x10908100
 8005504:	2302      	movs	r3, #2
 8005506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	4b78      	ldr	r3, [pc, #480]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	2202      	movs	r2, #2
 8005516:	613a      	str	r2, [r7, #16]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	fa92 f2a2 	rbit	r2, r2
 800551e:	60fa      	str	r2, [r7, #12]
  return result;
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	fab2 f282 	clz	r2, r2
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	f002 021f 	and.w	r2, r2, #31
 8005532:	2101      	movs	r1, #1
 8005534:	fa01 f202 	lsl.w	r2, r1, r2
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0b7      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800553e:	4b6d      	ldr	r3, [pc, #436]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	496a      	ldr	r1, [pc, #424]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005550:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b66      	ldr	r3, [pc, #408]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4a65      	ldr	r2, [pc, #404]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005570:	4b60      	ldr	r3, [pc, #384]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	f023 0203 	bic.w	r2, r3, #3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	495d      	ldr	r1, [pc, #372]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800558e:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4956      	ldr	r1, [pc, #344]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ac:	4b51      	ldr	r3, [pc, #324]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	494e      	ldr	r1, [pc, #312]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ca:	4b4a      	ldr	r3, [pc, #296]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	f023 0210 	bic.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	4947      	ldr	r1, [pc, #284]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055e8:	4b42      	ldr	r3, [pc, #264]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	493f      	ldr	r1, [pc, #252]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005606:	4b3b      	ldr	r3, [pc, #236]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	f023 0220 	bic.w	r2, r3, #32
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4938      	ldr	r1, [pc, #224]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	4930      	ldr	r1, [pc, #192]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005642:	4b2c      	ldr	r3, [pc, #176]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	4929      	ldr	r1, [pc, #164]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005660:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	4921      	ldr	r1, [pc, #132]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	491a      	ldr	r1, [pc, #104]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800569c:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	4912      	ldr	r1, [pc, #72]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056ba:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	490b      	ldr	r1, [pc, #44]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80056d8:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e4:	4903      	ldr	r1, [pc, #12]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3748      	adds	r7, #72	@ 0x48
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000

080056f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e09d      	b.n	8005846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d108      	bne.n	8005724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800571a:	d009      	beq.n	8005730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	61da      	str	r2, [r3, #28]
 8005722:	e005      	b.n	8005730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb fda6 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005770:	d902      	bls.n	8005778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e002      	b.n	800577e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800577c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005786:	d007      	beq.n	8005798 <HAL_SPI_Init+0xa0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005790:	d002      	beq.n	8005798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057da:	ea42 0103 	orr.w	r1, r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 0204 	and.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005814:	ea42 0103 	orr.w	r1, r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e040      	b.n	80058e2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fb fd55 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	@ 0x24
 800587a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fd8d 	bl	80063b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbb6 	bl	800600c <UART_SetConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e01b      	b.n	80058e2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fe0c 	bl	80064f8 <UART_CheckIdleState>
 80058e0:	4603      	mov	r3, r0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e02f      	b.n	800595c <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	@ 0x24
 8005900:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fda0 	bl	8001470 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005978:	2b20      	cmp	r3, #32
 800597a:	d132      	bne.n	80059e2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_UART_Receive_DMA+0x24>
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e02b      	b.n	80059e4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d018      	beq.n	80059d2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e6      	bne.n	80059a0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	461a      	mov	r2, r3
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fea3 	bl	8006724 <UART_Start_Receive_DMA>
 80059de:	4603      	mov	r3, r0
 80059e0:	e000      	b.n	80059e4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80059e2:	2302      	movs	r3, #2
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3728      	adds	r7, #40	@ 0x28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b0ba      	sub	sp, #232	@ 0xe8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d115      	bne.n	8005a54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00f      	beq.n	8005a54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 82ab 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
      }
      return;
 8005a52:	e2a5      	b.n	8005fa0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8117 	beq.w	8005c8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a6e:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_UART_IRQHandler+0x298>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 810a 	beq.w	8005c8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d011      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xbc>
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d011      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xec>
 8005ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ace:	f043 0204 	orr.w	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_UART_IRQHandler+0x11c>
 8005ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2204      	movs	r2, #4
 8005af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005afe:	f043 0202 	orr.w	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d017      	beq.n	8005b44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b3a:	f043 0208 	orr.w	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_UART_IRQHandler+0x18a>
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00c      	beq.n	8005b76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8211 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	d005      	beq.n	8005bce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04f      	beq.n	8005c6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fe6e 	bl	80068b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d141      	bne.n	8005c66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1d9      	bne.n	8005be2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d013      	beq.n	8005c5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3a:	4a13      	ldr	r2, [pc, #76]	@ (8005c88 <HAL_UART_IRQHandler+0x29c>)
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fb ffad 	bl	8001ba2 <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d017      	beq.n	8005c7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e00f      	b.n	8005c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9be 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00b      	b.n	8005c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9ba 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e007      	b.n	8005c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9b6 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c7c:	e192      	b.n	8005fa4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7e:	bf00      	nop
    return;
 8005c80:	e190      	b.n	8005fa4 <HAL_UART_IRQHandler+0x5b8>
 8005c82:	bf00      	nop
 8005c84:	04000120 	.word	0x04000120
 8005c88:	08006b5b 	.word	0x08006b5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	f040 814b 	bne.w	8005f2c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8144 	beq.w	8005f2c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 813d 	beq.w	8005f2c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	f040 80b5 	bne.w	8005e34 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8164 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f080 815c 	bcs.w	8005fa8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	f000 8086 	beq.w	8005e12 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d34:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1da      	bne.n	8005d06 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e1      	bne.n	8005d50 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005db0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005db6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e3      	bne.n	8005d8c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de2:	f023 0310 	bic.w	r3, r3, #16
 8005de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005df6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e4      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fb fe8a 	bl	8001b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8e1 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e32:	e0b9      	b.n	8005fa8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80ab 	beq.w	8005fac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80a6 	beq.w	8005fac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e4      	bne.n	8005e60 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e3      	bne.n	8005e96 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0310 	bic.w	r3, r3, #16
 8005ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	617b      	str	r3, [r7, #20]
   return(result);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e4      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f865 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f2a:	e03f      	b.n	8005fac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <HAL_UART_IRQHandler+0x56a>
 8005f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fe43 	bl	8006bda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f54:	e02d      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d008      	beq.n	8005f80 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01c      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
    }
    return;
 8005f7e:	e017      	b.n	8005fb0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d012      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00c      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fdf4 	bl	8006b86 <UART_EndTransmit_IT>
    return;
 8005f9e:	e008      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fa0:	bf00      	nop
 8005fa2:	e006      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005fa4:	bf00      	nop
 8005fa6:	e004      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fa8:	bf00      	nop
 8005faa:	e002      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005fb0:	bf00      	nop
  }

}
 8005fb2:	37e8      	adds	r7, #232	@ 0xe8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800603a:	f023 030c 	bic.w	r3, r3, #12
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	430b      	orrs	r3, r1
 8006046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4aa7      	ldr	r2, [pc, #668]	@ (8006324 <UART_SetConfig+0x318>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d120      	bne.n	80060ce <UART_SetConfig+0xc2>
 800608c:	4ba6      	ldr	r3, [pc, #664]	@ (8006328 <UART_SetConfig+0x31c>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b03      	cmp	r3, #3
 8006096:	d817      	bhi.n	80060c8 <UART_SetConfig+0xbc>
 8006098:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <UART_SetConfig+0x94>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060c3 	.word	0x080060c3
 80060ac:	080060b7 	.word	0x080060b7
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e0b5      	b.n	8006222 <UART_SetConfig+0x216>
 80060b6:	2302      	movs	r3, #2
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e0b2      	b.n	8006222 <UART_SetConfig+0x216>
 80060bc:	2304      	movs	r3, #4
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e0af      	b.n	8006222 <UART_SetConfig+0x216>
 80060c2:	2308      	movs	r3, #8
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e0ac      	b.n	8006222 <UART_SetConfig+0x216>
 80060c8:	2310      	movs	r3, #16
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e0a9      	b.n	8006222 <UART_SetConfig+0x216>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a96      	ldr	r2, [pc, #600]	@ (800632c <UART_SetConfig+0x320>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d124      	bne.n	8006122 <UART_SetConfig+0x116>
 80060d8:	4b93      	ldr	r3, [pc, #588]	@ (8006328 <UART_SetConfig+0x31c>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060e4:	d011      	beq.n	800610a <UART_SetConfig+0xfe>
 80060e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ea:	d817      	bhi.n	800611c <UART_SetConfig+0x110>
 80060ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f0:	d011      	beq.n	8006116 <UART_SetConfig+0x10a>
 80060f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f6:	d811      	bhi.n	800611c <UART_SetConfig+0x110>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <UART_SetConfig+0xf8>
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006100:	d006      	beq.n	8006110 <UART_SetConfig+0x104>
 8006102:	e00b      	b.n	800611c <UART_SetConfig+0x110>
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e08b      	b.n	8006222 <UART_SetConfig+0x216>
 800610a:	2302      	movs	r3, #2
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e088      	b.n	8006222 <UART_SetConfig+0x216>
 8006110:	2304      	movs	r3, #4
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e085      	b.n	8006222 <UART_SetConfig+0x216>
 8006116:	2308      	movs	r3, #8
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e082      	b.n	8006222 <UART_SetConfig+0x216>
 800611c:	2310      	movs	r3, #16
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e07f      	b.n	8006222 <UART_SetConfig+0x216>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a82      	ldr	r2, [pc, #520]	@ (8006330 <UART_SetConfig+0x324>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d124      	bne.n	8006176 <UART_SetConfig+0x16a>
 800612c:	4b7e      	ldr	r3, [pc, #504]	@ (8006328 <UART_SetConfig+0x31c>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006130:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006134:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006138:	d011      	beq.n	800615e <UART_SetConfig+0x152>
 800613a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800613e:	d817      	bhi.n	8006170 <UART_SetConfig+0x164>
 8006140:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006144:	d011      	beq.n	800616a <UART_SetConfig+0x15e>
 8006146:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800614a:	d811      	bhi.n	8006170 <UART_SetConfig+0x164>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <UART_SetConfig+0x14c>
 8006150:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006154:	d006      	beq.n	8006164 <UART_SetConfig+0x158>
 8006156:	e00b      	b.n	8006170 <UART_SetConfig+0x164>
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e061      	b.n	8006222 <UART_SetConfig+0x216>
 800615e:	2302      	movs	r3, #2
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e05e      	b.n	8006222 <UART_SetConfig+0x216>
 8006164:	2304      	movs	r3, #4
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e05b      	b.n	8006222 <UART_SetConfig+0x216>
 800616a:	2308      	movs	r3, #8
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e058      	b.n	8006222 <UART_SetConfig+0x216>
 8006170:	2310      	movs	r3, #16
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e055      	b.n	8006222 <UART_SetConfig+0x216>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a6e      	ldr	r2, [pc, #440]	@ (8006334 <UART_SetConfig+0x328>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d124      	bne.n	80061ca <UART_SetConfig+0x1be>
 8006180:	4b69      	ldr	r3, [pc, #420]	@ (8006328 <UART_SetConfig+0x31c>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006188:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800618c:	d011      	beq.n	80061b2 <UART_SetConfig+0x1a6>
 800618e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006192:	d817      	bhi.n	80061c4 <UART_SetConfig+0x1b8>
 8006194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006198:	d011      	beq.n	80061be <UART_SetConfig+0x1b2>
 800619a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800619e:	d811      	bhi.n	80061c4 <UART_SetConfig+0x1b8>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <UART_SetConfig+0x1a0>
 80061a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a8:	d006      	beq.n	80061b8 <UART_SetConfig+0x1ac>
 80061aa:	e00b      	b.n	80061c4 <UART_SetConfig+0x1b8>
 80061ac:	2300      	movs	r3, #0
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e037      	b.n	8006222 <UART_SetConfig+0x216>
 80061b2:	2302      	movs	r3, #2
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e034      	b.n	8006222 <UART_SetConfig+0x216>
 80061b8:	2304      	movs	r3, #4
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	e031      	b.n	8006222 <UART_SetConfig+0x216>
 80061be:	2308      	movs	r3, #8
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e02e      	b.n	8006222 <UART_SetConfig+0x216>
 80061c4:	2310      	movs	r3, #16
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e02b      	b.n	8006222 <UART_SetConfig+0x216>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5a      	ldr	r2, [pc, #360]	@ (8006338 <UART_SetConfig+0x32c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d124      	bne.n	800621e <UART_SetConfig+0x212>
 80061d4:	4b54      	ldr	r3, [pc, #336]	@ (8006328 <UART_SetConfig+0x31c>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80061dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061e0:	d011      	beq.n	8006206 <UART_SetConfig+0x1fa>
 80061e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061e6:	d817      	bhi.n	8006218 <UART_SetConfig+0x20c>
 80061e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ec:	d011      	beq.n	8006212 <UART_SetConfig+0x206>
 80061ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f2:	d811      	bhi.n	8006218 <UART_SetConfig+0x20c>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <UART_SetConfig+0x1f4>
 80061f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fc:	d006      	beq.n	800620c <UART_SetConfig+0x200>
 80061fe:	e00b      	b.n	8006218 <UART_SetConfig+0x20c>
 8006200:	2300      	movs	r3, #0
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e00d      	b.n	8006222 <UART_SetConfig+0x216>
 8006206:	2302      	movs	r3, #2
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e00a      	b.n	8006222 <UART_SetConfig+0x216>
 800620c:	2304      	movs	r3, #4
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e007      	b.n	8006222 <UART_SetConfig+0x216>
 8006212:	2308      	movs	r3, #8
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e004      	b.n	8006222 <UART_SetConfig+0x216>
 8006218:	2310      	movs	r3, #16
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e001      	b.n	8006222 <UART_SetConfig+0x216>
 800621e:	2310      	movs	r3, #16
 8006220:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622a:	d15b      	bne.n	80062e4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800622c:	7ffb      	ldrb	r3, [r7, #31]
 800622e:	2b08      	cmp	r3, #8
 8006230:	d827      	bhi.n	8006282 <UART_SetConfig+0x276>
 8006232:	a201      	add	r2, pc, #4	@ (adr r2, 8006238 <UART_SetConfig+0x22c>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	08006283 	.word	0x08006283
 8006248:	08006273 	.word	0x08006273
 800624c:	08006283 	.word	0x08006283
 8006250:	08006283 	.word	0x08006283
 8006254:	08006283 	.word	0x08006283
 8006258:	0800627b 	.word	0x0800627b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7ff f858 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8006260:	61b8      	str	r0, [r7, #24]
        break;
 8006262:	e013      	b.n	800628c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006264:	f7ff f876 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006268:	61b8      	str	r0, [r7, #24]
        break;
 800626a:	e00f      	b.n	800628c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b33      	ldr	r3, [pc, #204]	@ (800633c <UART_SetConfig+0x330>)
 800626e:	61bb      	str	r3, [r7, #24]
        break;
 8006270:	e00c      	b.n	800628c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fe ffed 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8006276:	61b8      	str	r0, [r7, #24]
        break;
 8006278:	e008      	b.n	800628c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800627e:	61bb      	str	r3, [r7, #24]
        break;
 8006280:	e004      	b.n	800628c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	77bb      	strb	r3, [r7, #30]
        break;
 800628a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8082 	beq.w	8006398 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	005a      	lsls	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b0f      	cmp	r3, #15
 80062ae:	d916      	bls.n	80062de <UART_SetConfig+0x2d2>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b6:	d212      	bcs.n	80062de <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f023 030f 	bic.w	r3, r3, #15
 80062c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	89fb      	ldrh	r3, [r7, #14]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	89fa      	ldrh	r2, [r7, #14]
 80062da:	60da      	str	r2, [r3, #12]
 80062dc:	e05c      	b.n	8006398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	77bb      	strb	r3, [r7, #30]
 80062e2:	e059      	b.n	8006398 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062e4:	7ffb      	ldrb	r3, [r7, #31]
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d835      	bhi.n	8006356 <UART_SetConfig+0x34a>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <UART_SetConfig+0x2e4>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006357 	.word	0x08006357
 8006300:	08006347 	.word	0x08006347
 8006304:	08006357 	.word	0x08006357
 8006308:	08006357 	.word	0x08006357
 800630c:	08006357 	.word	0x08006357
 8006310:	0800634f 	.word	0x0800634f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006314:	f7fe fffc 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8006318:	61b8      	str	r0, [r7, #24]
        break;
 800631a:	e021      	b.n	8006360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800631c:	f7ff f81a 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006320:	61b8      	str	r0, [r7, #24]
        break;
 8006322:	e01d      	b.n	8006360 <UART_SetConfig+0x354>
 8006324:	40013800 	.word	0x40013800
 8006328:	40021000 	.word	0x40021000
 800632c:	40004400 	.word	0x40004400
 8006330:	40004800 	.word	0x40004800
 8006334:	40004c00 	.word	0x40004c00
 8006338:	40005000 	.word	0x40005000
 800633c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <UART_SetConfig+0x3a4>)
 8006342:	61bb      	str	r3, [r7, #24]
        break;
 8006344:	e00c      	b.n	8006360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006346:	f7fe ff83 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800634a:	61b8      	str	r0, [r7, #24]
        break;
 800634c:	e008      	b.n	8006360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006352:	61bb      	str	r3, [r7, #24]
        break;
 8006354:	e004      	b.n	8006360 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	77bb      	strb	r3, [r7, #30]
        break;
 800635e:	bf00      	nop
    }

    if (pclk != 0U)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d018      	beq.n	8006398 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	085a      	lsrs	r2, r3, #1
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	441a      	add	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b0f      	cmp	r3, #15
 800637e:	d909      	bls.n	8006394 <UART_SetConfig+0x388>
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006386:	d205      	bcs.n	8006394 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	e001      	b.n	8006398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	007a1200 	.word	0x007a1200

080063b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01a      	beq.n	80064ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b2:	d10a      	bne.n	80064ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b098      	sub	sp, #96	@ 0x60
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006508:	f7fb f8d0 	bl	80016ac <HAL_GetTick>
 800650c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b08      	cmp	r3, #8
 800651a:	d12e      	bne.n	800657a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800651c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f88c 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d021      	beq.n	800657a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654a:	653b      	str	r3, [r7, #80]	@ 0x50
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006554:	647b      	str	r3, [r7, #68]	@ 0x44
 8006556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800655a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e6      	bne.n	8006536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e062      	b.n	8006640 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b04      	cmp	r3, #4
 8006586:	d149      	bne.n	800661c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006590:	2200      	movs	r2, #0
 8006592:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f856 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d03c      	beq.n	800661c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	623b      	str	r3, [r7, #32]
   return(result);
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065f4:	61fa      	str	r2, [r7, #28]
 80065f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	69b9      	ldr	r1, [r7, #24]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	617b      	str	r3, [r7, #20]
   return(result);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e011      	b.n	8006640 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3758      	adds	r7, #88	@ 0x58
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	e04f      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d04b      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fb f823 	bl	80016ac <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <UART_WaitOnFlagUntilTimeout+0x30>
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e04e      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d037      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b80      	cmp	r3, #128	@ 0x80
 800668e:	d034      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d031      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d110      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2208      	movs	r2, #8
 80066aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f8ff 	bl	80068b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2208      	movs	r2, #8
 80066b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e029      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d4:	d111      	bne.n	80066fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f8e5 	bl	80068b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e00f      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	429a      	cmp	r2, r3
 8006716:	d0a0      	beq.n	800665a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b096      	sub	sp, #88	@ 0x58
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2222      	movs	r2, #34	@ 0x22
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006754:	2b00      	cmp	r3, #0
 8006756:	d028      	beq.n	80067aa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675c:	4a3e      	ldr	r2, [pc, #248]	@ (8006858 <UART_Start_Receive_DMA+0x134>)
 800675e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006764:	4a3d      	ldr	r2, [pc, #244]	@ (800685c <UART_Start_Receive_DMA+0x138>)
 8006766:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676c:	4a3c      	ldr	r2, [pc, #240]	@ (8006860 <UART_Start_Receive_DMA+0x13c>)
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006774:	2200      	movs	r2, #0
 8006776:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3324      	adds	r3, #36	@ 0x24
 8006782:	4619      	mov	r1, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	461a      	mov	r2, r3
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	f7fb f96c 	bl	8001a68 <HAL_DMA_Start_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2210      	movs	r2, #16
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e051      	b.n	800684e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d018      	beq.n	80067e4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e6      	bne.n	80067b2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006804:	637a      	str	r2, [r7, #52]	@ 0x34
 8006806:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800680a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	613b      	str	r3, [r7, #16]
   return(result);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006838:	623a      	str	r2, [r7, #32]
 800683a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	69f9      	ldr	r1, [r7, #28]
 800683e:	6a3a      	ldr	r2, [r7, #32]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	61bb      	str	r3, [r7, #24]
   return(result);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3758      	adds	r7, #88	@ 0x58
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	08006979 	.word	0x08006979
 800685c:	08006a9f 	.word	0x08006a9f
 8006860:	08006add 	.word	0x08006add

08006864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b089      	sub	sp, #36	@ 0x24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	60bb      	str	r3, [r7, #8]
   return(result);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068a4:	bf00      	nop
 80068a6:	3724      	adds	r7, #36	@ 0x24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b095      	sub	sp, #84	@ 0x54
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80068d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e6      	bne.n	80068b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006922:	2b01      	cmp	r3, #1
 8006924:	d118      	bne.n	8006958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	60bb      	str	r3, [r7, #8]
   return(result);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f023 0310 	bic.w	r3, r3, #16
 800693a:	647b      	str	r3, [r7, #68]	@ 0x44
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	613b      	str	r3, [r7, #16]
   return(result);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e6      	bne.n	8006926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800696c:	bf00      	nop
 800696e:	3754      	adds	r7, #84	@ 0x54
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b09c      	sub	sp, #112	@ 0x70
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b20      	cmp	r3, #32
 800698c:	d071      	beq.n	8006a72 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800698e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006990:	2200      	movs	r2, #0
 8006992:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069e8:	647a      	str	r2, [r7, #68]	@ 0x44
 80069ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d118      	bne.n	8006a72 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f023 0310 	bic.w	r3, r3, #16
 8006a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	69b9      	ldr	r1, [r7, #24]
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e6      	bne.n	8006a40 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a74:	2200      	movs	r2, #0
 8006a76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a86:	4619      	mov	r1, r3
 8006a88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a8a:	f7ff fab3 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a8e:	e002      	b.n	8006a96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006a90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a92:	f7f9 fb99 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006a96:	bf00      	nop
 8006a98:	3770      	adds	r7, #112	@ 0x70
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d109      	bne.n	8006ace <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fa94 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006acc:	e002      	b.n	8006ad4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff fa7c 	bl	8005fcc <HAL_UART_RxHalfCpltCallback>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b02:	2b80      	cmp	r3, #128	@ 0x80
 8006b04:	d109      	bne.n	8006b1a <UART_DMAError+0x3e>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b21      	cmp	r3, #33	@ 0x21
 8006b0a:	d106      	bne.n	8006b1a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006b14:	6978      	ldr	r0, [r7, #20]
 8006b16:	f7ff fea5 	bl	8006864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	d109      	bne.n	8006b3c <UART_DMAError+0x60>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b22      	cmp	r3, #34	@ 0x22
 8006b2c:	d106      	bne.n	8006b3c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7ff feba 	bl	80068b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b42:	f043 0210 	orr.w	r2, r3, #16
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b4c:	6978      	ldr	r0, [r7, #20]
 8006b4e:	f7ff fa47 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fa31 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f9f3 	bl	8005fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd2:	bf00      	nop
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bfe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006c02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c24:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006c28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	43db      	mvns	r3, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b09d      	sub	sp, #116	@ 0x74
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d81f      	bhi.n	8006d02 <USB_ActivateEndpoint+0x72>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <USB_ActivateEndpoint+0x38>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006d0b 	.word	0x08006d0b
 8006cd4:	08006ce7 	.word	0x08006ce7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006ce4:	e012      	b.n	8006d0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ce6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006cee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006cf2:	e00b      	b.n	8006d0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006d00:	e004      	b.n	8006d0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006d08:	e000      	b.n	8006d0c <USB_ActivateEndpoint+0x7c>
      break;
 8006d0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b21b      	sxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d46:	b21a      	sxth	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b21b      	sxth	r3, r3
 8006d52:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	7b1b      	ldrb	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8178 	bne.w	8007072 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8084 	beq.w	8006e94 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	88db      	ldrh	r3, [r3, #6]
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	827b      	strh	r3, [r7, #18]
 8006dce:	8a7b      	ldrh	r3, [r7, #18]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01b      	beq.n	8006e10 <USB_ActivateEndpoint+0x180>
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dee:	823b      	strh	r3, [r7, #16]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	8a3b      	ldrh	r3, [r7, #16]
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	78db      	ldrb	r3, [r3, #3]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d020      	beq.n	8006e5a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2e:	81bb      	strh	r3, [r7, #12]
 8006e30:	89bb      	ldrh	r3, [r7, #12]
 8006e32:	f083 0320 	eor.w	r3, r3, #32
 8006e36:	81bb      	strh	r3, [r7, #12]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	89bb      	ldrh	r3, [r7, #12]
 8006e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	8013      	strh	r3, [r2, #0]
 8006e58:	e2d5      	b.n	8007406 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e70:	81fb      	strh	r3, [r7, #14]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	8013      	strh	r3, [r2, #0]
 8006e92:	e2b8      	b.n	8007406 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	4413      	add	r3, r2
 8006ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	011a      	lsls	r2, r3, #4
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	4413      	add	r3, r2
 8006eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	011a      	lsls	r2, r3, #4
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <USB_ActivateEndpoint+0x28a>
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e039      	b.n	8006f8e <USB_ActivateEndpoint+0x2fe>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f20:	d818      	bhi.n	8006f54 <USB_ActivateEndpoint+0x2c4>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <USB_ActivateEndpoint+0x2ac>
 8006f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f38:	3301      	adds	r3, #1
 8006f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	029b      	lsls	r3, r3, #10
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e01c      	b.n	8006f8e <USB_ActivateEndpoint+0x2fe>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <USB_ActivateEndpoint+0x2de>
 8006f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006f9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01b      	beq.n	8006fde <USB_ActivateEndpoint+0x34e>
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbc:	843b      	strh	r3, [r7, #32]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	8c3b      	ldrh	r3, [r7, #32]
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d124      	bne.n	8007030 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffc:	83bb      	strh	r3, [r7, #28]
 8006ffe:	8bbb      	ldrh	r3, [r7, #28]
 8007000:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007004:	83bb      	strh	r3, [r7, #28]
 8007006:	8bbb      	ldrh	r3, [r7, #28]
 8007008:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800700c:	83bb      	strh	r3, [r7, #28]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8bbb      	ldrh	r3, [r7, #28]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
 800702e:	e1ea      	b.n	8007406 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007046:	83fb      	strh	r3, [r7, #30]
 8007048:	8bfb      	ldrh	r3, [r7, #30]
 800704a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800704e:	83fb      	strh	r3, [r7, #30]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	8bfb      	ldrh	r3, [r7, #30]
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]
 8007070:	e1c9      	b.n	8007406 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	78db      	ldrb	r3, [r3, #3]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d11e      	bne.n	80070b8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007090:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
 80070b6:	e01d      	b.n	80070f4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ce:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007104:	4413      	add	r3, r2
 8007106:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	011a      	lsls	r2, r3, #4
 800710e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007110:	4413      	add	r3, r2
 8007112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	891b      	ldrh	r3, [r3, #8]
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	b29b      	uxth	r3, r3
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	657b      	str	r3, [r7, #84]	@ 0x54
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007132:	b29b      	uxth	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007138:	4413      	add	r3, r2
 800713a:	657b      	str	r3, [r7, #84]	@ 0x54
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007144:	4413      	add	r3, r2
 8007146:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800714a:	653b      	str	r3, [r7, #80]	@ 0x50
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	b29b      	uxth	r3, r3
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800715a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f040 8093 	bne.w	800728c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800717a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01b      	beq.n	80071ba <USB_ActivateEndpoint+0x52a>
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007198:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80071c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01b      	beq.n	800720a <USB_ActivateEndpoint+0x57a>
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800721c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007220:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007222:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007224:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007228:	873b      	strh	r3, [r7, #56]	@ 0x38
 800722a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800722c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007230:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	441a      	add	r2, r3
 800723c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800723e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800724a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724e:	b29b      	uxth	r3, r3
 8007250:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007268:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	441a      	add	r2, r3
 8007274:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800727a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800727e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007286:	b29b      	uxth	r3, r3
 8007288:	8013      	strh	r3, [r2, #0]
 800728a:	e0bc      	b.n	8007406 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800729c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80072a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01d      	beq.n	80072e4 <USB_ActivateEndpoint+0x654>
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072be:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	441a      	add	r2, r3
 80072cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80072d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80072f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80072f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01d      	beq.n	800733c <USB_ActivateEndpoint+0x6ac>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007316:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800732c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007334:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d024      	beq.n	800738e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800735e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007362:	f083 0320 	eor.w	r3, r3, #32
 8007366:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]
 800738c:	e01d      	b.n	80073ca <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80073b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007406:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800740a:	4618      	mov	r0, r3
 800740c:	3774      	adds	r7, #116	@ 0x74
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007418:	b480      	push	{r7}
 800741a:	b08d      	sub	sp, #52	@ 0x34
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	7b1b      	ldrb	r3, [r3, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 808e 	bne.w	8007548 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d044      	beq.n	80074be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	81bb      	strh	r3, [r7, #12]
 8007442:	89bb      	ldrh	r3, [r7, #12]
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <USB_DeactivateEndpoint+0x6c>
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	817b      	strh	r3, [r7, #10]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	897b      	ldrh	r3, [r7, #10]
 8007470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800747c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007480:	b29b      	uxth	r3, r3
 8007482:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800749a:	813b      	strh	r3, [r7, #8]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	893b      	ldrh	r3, [r7, #8]
 80074a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	8013      	strh	r3, [r2, #0]
 80074bc:	e192      	b.n	80077e4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	827b      	strh	r3, [r7, #18]
 80074cc:	8a7b      	ldrh	r3, [r7, #18]
 80074ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01b      	beq.n	800750e <USB_DeactivateEndpoint+0xf6>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ec:	823b      	strh	r3, [r7, #16]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	441a      	add	r2, r3
 80074f8:	8a3b      	ldrh	r3, [r7, #16]
 80074fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007502:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800750a:	b29b      	uxth	r3, r3
 800750c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007524:	81fb      	strh	r3, [r7, #14]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	441a      	add	r2, r3
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800753e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007542:	b29b      	uxth	r3, r3
 8007544:	8013      	strh	r3, [r2, #0]
 8007546:	e14d      	b.n	80077e4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 80a5 	bne.w	800769c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	843b      	strh	r3, [r7, #32]
 8007560:	8c3b      	ldrh	r3, [r7, #32]
 8007562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01b      	beq.n	80075a2 <USB_DeactivateEndpoint+0x18a>
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800757c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007580:	83fb      	strh	r3, [r7, #30]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	441a      	add	r2, r3
 800758c:	8bfb      	ldrh	r3, [r7, #30]
 800758e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800759a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759e:	b29b      	uxth	r3, r3
 80075a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	83bb      	strh	r3, [r7, #28]
 80075b0:	8bbb      	ldrh	r3, [r7, #28]
 80075b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01b      	beq.n	80075f2 <USB_DeactivateEndpoint+0x1da>
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d0:	837b      	strh	r3, [r7, #26]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	441a      	add	r2, r3
 80075dc:	8b7b      	ldrh	r3, [r7, #26]
 80075de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007608:	833b      	strh	r3, [r7, #24]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	441a      	add	r2, r3
 8007614:	8b3b      	ldrh	r3, [r7, #24]
 8007616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007622:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007626:	b29b      	uxth	r3, r3
 8007628:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800763c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007640:	82fb      	strh	r3, [r7, #22]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	8afb      	ldrh	r3, [r7, #22]
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800765a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007678:	82bb      	strh	r3, [r7, #20]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	8abb      	ldrh	r3, [r7, #20]
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
 800769a:	e0a3      	b.n	80077e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80076aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80076ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <USB_DeactivateEndpoint+0x2d4>
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80076fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80076fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01b      	beq.n	800773c <USB_DeactivateEndpoint+0x324>
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800771a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007734:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	441a      	add	r2, r3
 800775e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800776c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007770:	b29b      	uxth	r3, r3
 8007772:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800778a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	441a      	add	r2, r3
 8007796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800779c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80077d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3734      	adds	r7, #52	@ 0x34
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b0c2      	sub	sp, #264	@ 0x108
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	6018      	str	r0, [r3, #0]
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	f040 86b7 	bne.w	800858c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800781e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d908      	bls.n	800784c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800784a:	e007      	b.n	800785c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	7b1b      	ldrb	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d13a      	bne.n	80078e2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6959      	ldr	r1, [r3, #20]
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	88da      	ldrh	r2, [r3, #6]
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	b29b      	uxth	r3, r3
 800788a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800788e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	f001 fc8d 	bl	80091b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4413      	add	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	011a      	lsls	r2, r3, #4
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	4413      	add	r3, r2
 80078ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	f000 be1f 	b.w	8008520 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	78db      	ldrb	r3, [r3, #3]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	f040 8462 	bne.w	80081b8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	f240 83df 	bls.w	80080d0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007938:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800793c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	441a      	add	r2, r3
 8007956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800795a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800795e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007962:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796a:	b29b      	uxth	r3, r3
 800796c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800796e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 81c7 	beq.w	8007d42 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d177      	bne.n	8007ac0 <USB_EPStartXfer+0x2ce>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	4413      	add	r3, r2
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	011a      	lsls	r2, r3, #4
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <USB_EPStartXfer+0x248>
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e067      	b.n	8007b0a <USB_EPStartXfer+0x318>
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a40:	d81c      	bhi.n	8007a7c <USB_EPStartXfer+0x28a>
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USB_EPStartXfer+0x270>
 8007a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	029b      	lsls	r3, r3, #10
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e046      	b.n	8007b0a <USB_EPStartXfer+0x318>
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <USB_EPStartXfer+0x2aa>
 8007a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a96:	3b01      	subs	r3, #1
 8007a98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	029b      	lsls	r3, r3, #10
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4313      	orrs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e024      	b.n	8007b0a <USB_EPStartXfer+0x318>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d11c      	bne.n	8007b0a <USB_EPStartXfer+0x318>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	4413      	add	r3, r2
 8007ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	011a      	lsls	r2, r3, #4
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	4413      	add	r3, r2
 8007afa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	895b      	ldrh	r3, [r3, #10]
 8007b16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6959      	ldr	r1, [r3, #20]
 8007b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b38:	6800      	ldr	r0, [r0, #0]
 8007b3a:	f001 fb3a 	bl	80091b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4e:	441a      	add	r2, r3
 8007b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6a1a      	ldr	r2, [r3, #32]
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d90f      	bls.n	8007b98 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	621a      	str	r2, [r3, #32]
 8007b96:	e00e      	b.n	8007bb6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d177      	bne.n	8007cb6 <USB_EPStartXfer+0x4c4>
 8007bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	4413      	add	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	011a      	lsls	r2, r3, #4
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <USB_EPStartXfer+0x43e>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e06d      	b.n	8007d0c <USB_EPStartXfer+0x51a>
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c36:	d81c      	bhi.n	8007c72 <USB_EPStartXfer+0x480>
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3c:	085b      	lsrs	r3, r3, #1
 8007c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <USB_EPStartXfer+0x466>
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c52:	3301      	adds	r3, #1
 8007c54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	029b      	lsls	r3, r3, #10
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	e04c      	b.n	8007d0c <USB_EPStartXfer+0x51a>
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <USB_EPStartXfer+0x4a0>
 8007c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	029b      	lsls	r3, r3, #10
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	e02a      	b.n	8007d0c <USB_EPStartXfer+0x51a>
 8007cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d122      	bne.n	8007d0c <USB_EPStartXfer+0x51a>
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	623b      	str	r3, [r7, #32]
 8007cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	623b      	str	r3, [r7, #32]
 8007cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	011a      	lsls	r2, r3, #4
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	891b      	ldrh	r3, [r3, #8]
 8007d18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6959      	ldr	r1, [r3, #20]
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	f001 fa39 	bl	80091b2 <USB_WritePMA>
 8007d40:	e3ee      	b.n	8008520 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d177      	bne.n	8007e42 <USB_EPStartXfer+0x650>
 8007d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d72:	4413      	add	r3, r2
 8007d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	011a      	lsls	r2, r3, #4
 8007d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d86:	4413      	add	r3, r2
 8007d88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <USB_EPStartXfer+0x5ca>
 8007da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e06d      	b.n	8007e98 <USB_EPStartXfer+0x6a6>
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dc2:	d81c      	bhi.n	8007dfe <USB_EPStartXfer+0x60c>
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <USB_EPStartXfer+0x5f2>
 8007dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dde:	3301      	adds	r3, #1
 8007de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	029b      	lsls	r3, r3, #10
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	e04c      	b.n	8007e98 <USB_EPStartXfer+0x6a6>
 8007dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <USB_EPStartXfer+0x62c>
 8007e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	029b      	lsls	r3, r3, #10
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e3e:	801a      	strh	r2, [r3, #0]
 8007e40:	e02a      	b.n	8007e98 <USB_EPStartXfer+0x6a6>
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d122      	bne.n	8007e98 <USB_EPStartXfer+0x6a6>
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e72:	4413      	add	r3, r2
 8007e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	011a      	lsls	r2, r3, #4
 8007e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e86:	4413      	add	r3, r2
 8007e88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6959      	ldr	r1, [r3, #20]
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ebe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ec2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	f001 f973 	bl	80091b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007edc:	441a      	add	r2, r3
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d90f      	bls.n	8007f26 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	621a      	str	r2, [r3, #32]
 8007f24:	e00e      	b.n	8007f44 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d177      	bne.n	8008050 <USB_EPStartXfer+0x85e>
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	4413      	add	r3, r2
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	011a      	lsls	r2, r3, #4
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	4413      	add	r3, r2
 8007f96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <USB_EPStartXfer+0x7d8>
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	e067      	b.n	800809a <USB_EPStartXfer+0x8a8>
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fd0:	d81c      	bhi.n	800800c <USB_EPStartXfer+0x81a>
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <USB_EPStartXfer+0x800>
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fec:	3301      	adds	r3, #1
 8007fee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	029b      	lsls	r3, r3, #10
 8008000:	b29b      	uxth	r3, r3
 8008002:	4313      	orrs	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	e046      	b.n	800809a <USB_EPStartXfer+0x8a8>
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <USB_EPStartXfer+0x83a>
 8008022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008026:	3b01      	subs	r3, #1
 8008028:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008036:	b29b      	uxth	r3, r3
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	b29b      	uxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008048:	b29a      	uxth	r2, r3
 800804a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e024      	b.n	800809a <USB_EPStartXfer+0x8a8>
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d11c      	bne.n	800809a <USB_EPStartXfer+0x8a8>
 8008060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008074:	4413      	add	r3, r2
 8008076:	643b      	str	r3, [r7, #64]	@ 0x40
 8008078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	011a      	lsls	r2, r3, #4
 8008086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008088:	4413      	add	r3, r2
 800808a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	b29a      	uxth	r2, r3
 8008096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008098:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800809a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	895b      	ldrh	r3, [r3, #10]
 80080a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6959      	ldr	r1, [r3, #20]
 80080b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080c8:	6800      	ldr	r0, [r0, #0]
 80080ca:	f001 f872 	bl	80091b2 <USB_WritePMA>
 80080ce:	e227      	b.n	8008520 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008106:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	441a      	add	r2, r3
 8008124:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800813c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800815c:	4413      	add	r3, r2
 800815e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	011a      	lsls	r2, r3, #4
 800816e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008170:	4413      	add	r3, r2
 8008172:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	b29a      	uxth	r2, r3
 800817e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008180:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	891b      	ldrh	r3, [r3, #8]
 800818e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6959      	ldr	r1, [r3, #20]
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80081a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80081ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80081b0:	6800      	ldr	r0, [r0, #0]
 80081b2:	f000 fffe 	bl	80091b2 <USB_WritePMA>
 80081b6:	e1b3      	b.n	8008520 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80081b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6a1a      	ldr	r2, [r3, #32]
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80c6 	beq.w	800838a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	673b      	str	r3, [r7, #112]	@ 0x70
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d177      	bne.n	800830a <USB_EPStartXfer+0xb18>
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008234:	b29b      	uxth	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800823a:	4413      	add	r3, r2
 800823c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800823e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	011a      	lsls	r2, r3, #4
 800824c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800824e:	4413      	add	r3, r2
 8008250:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008254:	667b      	str	r3, [r7, #100]	@ 0x64
 8008256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008260:	b29a      	uxth	r2, r3
 8008262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <USB_EPStartXfer+0xa92>
 800826e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e067      	b.n	8008354 <USB_EPStartXfer+0xb62>
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008288:	2b3e      	cmp	r3, #62	@ 0x3e
 800828a:	d81c      	bhi.n	80082c6 <USB_EPStartXfer+0xad4>
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	085b      	lsrs	r3, r3, #1
 8008292:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <USB_EPStartXfer+0xaba>
 80082a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082a6:	3301      	adds	r3, #1
 80082a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	029b      	lsls	r3, r3, #10
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	4313      	orrs	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	e046      	b.n	8008354 <USB_EPStartXfer+0xb62>
 80082c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <USB_EPStartXfer+0xaf4>
 80082dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	029b      	lsls	r3, r3, #10
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008302:	b29a      	uxth	r2, r3
 8008304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008306:	801a      	strh	r2, [r3, #0]
 8008308:	e024      	b.n	8008354 <USB_EPStartXfer+0xb62>
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d11c      	bne.n	8008354 <USB_EPStartXfer+0xb62>
 800831a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800832e:	4413      	add	r3, r2
 8008330:	673b      	str	r3, [r7, #112]	@ 0x70
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	011a      	lsls	r2, r3, #4
 8008340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008342:	4413      	add	r3, r2
 8008344:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008348:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	b29a      	uxth	r2, r3
 8008350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008352:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	895b      	ldrh	r3, [r3, #10]
 8008360:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6959      	ldr	r1, [r3, #20]
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008374:	b29b      	uxth	r3, r3
 8008376:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800837a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800837e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008382:	6800      	ldr	r0, [r0, #0]
 8008384:	f000 ff15 	bl	80091b2 <USB_WritePMA>
 8008388:	e0ca      	b.n	8008520 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800838a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d177      	bne.n	800848a <USB_EPStartXfer+0xc98>
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ba:	4413      	add	r3, r2
 80083bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	011a      	lsls	r2, r3, #4
 80083cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ce:	4413      	add	r3, r2
 80083d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <USB_EPStartXfer+0xc12>
 80083ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e073      	b.n	80084ec <USB_EPStartXfer+0xcfa>
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	2b3e      	cmp	r3, #62	@ 0x3e
 800840a:	d81c      	bhi.n	8008446 <USB_EPStartXfer+0xc54>
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <USB_EPStartXfer+0xc3a>
 8008422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008426:	3301      	adds	r3, #1
 8008428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800842c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29a      	uxth	r2, r3
 8008432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008436:	b29b      	uxth	r3, r3
 8008438:	029b      	lsls	r3, r3, #10
 800843a:	b29b      	uxth	r3, r3
 800843c:	4313      	orrs	r3, r2
 800843e:	b29a      	uxth	r2, r3
 8008440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	e052      	b.n	80084ec <USB_EPStartXfer+0xcfa>
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <USB_EPStartXfer+0xc74>
 800845c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008460:	3b01      	subs	r3, #1
 8008462:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008470:	b29b      	uxth	r3, r3
 8008472:	029b      	lsls	r3, r3, #10
 8008474:	b29b      	uxth	r3, r3
 8008476:	4313      	orrs	r3, r2
 8008478:	b29b      	uxth	r3, r3
 800847a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008482:	b29a      	uxth	r2, r3
 8008484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e030      	b.n	80084ec <USB_EPStartXfer+0xcfa>
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d128      	bne.n	80084ec <USB_EPStartXfer+0xcfa>
 800849a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084be:	4413      	add	r3, r2
 80084c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	011a      	lsls	r2, r3, #4
 80084d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084d6:	4413      	add	r3, r2
 80084d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80084ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	891b      	ldrh	r3, [r3, #8]
 80084f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6959      	ldr	r1, [r3, #20]
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	b29b      	uxth	r3, r3
 800850e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008512:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008516:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	f000 fe49 	bl	80091b2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008546:	817b      	strh	r3, [r7, #10]
 8008548:	897b      	ldrh	r3, [r7, #10]
 800854a:	f083 0310 	eor.w	r3, r3, #16
 800854e:	817b      	strh	r3, [r7, #10]
 8008550:	897b      	ldrh	r3, [r7, #10]
 8008552:	f083 0320 	eor.w	r3, r3, #32
 8008556:	817b      	strh	r3, [r7, #10]
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	897b      	ldrh	r3, [r7, #10]
 8008574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008584:	b29b      	uxth	r3, r3
 8008586:	8013      	strh	r3, [r2, #0]
 8008588:	f000 bcdf 	b.w	8008f4a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	7b1b      	ldrb	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 80bc 	bne.w	8008716 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d917      	bls.n	80085ea <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80085ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	619a      	str	r2, [r3, #24]
 80085e8:	e00e      	b.n	8008608 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80085ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80085fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2200      	movs	r2, #0
 8008606:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	011a      	lsls	r2, r3, #4
 8008640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008644:	4413      	add	r3, r2
 8008646:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800864a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800864e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10d      	bne.n	8008686 <USB_EPStartXfer+0xe94>
 800866a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867a:	b29a      	uxth	r2, r3
 800867c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	f000 bc28 	b.w	8008ed6 <USB_EPStartXfer+0x16e4>
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868a:	2b3e      	cmp	r3, #62	@ 0x3e
 800868c:	d81f      	bhi.n	80086ce <USB_EPStartXfer+0xedc>
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <USB_EPStartXfer+0xebc>
 80086a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086a8:	3301      	adds	r3, #1
 80086aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	f000 bc04 	b.w	8008ed6 <USB_EPStartXfer+0x16e4>
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USB_EPStartXfer+0xefc>
 80086e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	029b      	lsls	r3, r3, #10
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4313      	orrs	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	e3df      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	78db      	ldrb	r3, [r3, #3]
 8008722:	2b02      	cmp	r3, #2
 8008724:	f040 8218 	bne.w	8008b58 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 809d 	bne.w	8008874 <USB_EPStartXfer+0x1082>
 800873a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800875e:	4413      	add	r3, r2
 8008760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008776:	4413      	add	r3, r2
 8008778:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800877c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10c      	bne.n	80087be <USB_EPStartXfer+0xfcc>
 80087a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e08f      	b.n	80088de <USB_EPStartXfer+0x10ec>
 80087be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80087cc:	d826      	bhi.n	800881c <USB_EPStartXfer+0x102a>
 80087ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <USB_EPStartXfer+0x100c>
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f8:	3301      	adds	r3, #1
 80087fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29a      	uxth	r2, r3
 8008806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800880a:	b29b      	uxth	r3, r3
 800880c:	029b      	lsls	r3, r3, #10
 800880e:	b29b      	uxth	r3, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	b29a      	uxth	r2, r3
 8008814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	e060      	b.n	80088de <USB_EPStartXfer+0x10ec>
 800881c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <USB_EPStartXfer+0x105a>
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008846:	3b01      	subs	r3, #1
 8008848:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800884c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29a      	uxth	r2, r3
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	b29b      	uxth	r3, r3
 800885a:	029b      	lsls	r3, r3, #10
 800885c:	b29b      	uxth	r3, r3
 800885e:	4313      	orrs	r3, r2
 8008860:	b29b      	uxth	r3, r3
 8008862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886a:	b29a      	uxth	r2, r3
 800886c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008870:	801a      	strh	r2, [r3, #0]
 8008872:	e034      	b.n	80088de <USB_EPStartXfer+0x10ec>
 8008874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d12c      	bne.n	80088de <USB_EPStartXfer+0x10ec>
 8008884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088a8:	4413      	add	r3, r2
 80088aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	011a      	lsls	r2, r3, #4
 80088bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088c0:	4413      	add	r3, r2
 80088c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80088dc:	801a      	strh	r2, [r3, #0]
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	785b      	ldrb	r3, [r3, #1]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 809d 	bne.w	8008a38 <USB_EPStartXfer+0x1246>
 80088fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800891a:	b29b      	uxth	r3, r3
 800891c:	461a      	mov	r2, r3
 800891e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008922:	4413      	add	r3, r2
 8008924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	011a      	lsls	r2, r3, #4
 8008936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800893a:	4413      	add	r3, r2
 800893c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008950:	b29a      	uxth	r2, r3
 8008952:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10c      	bne.n	8008982 <USB_EPStartXfer+0x1190>
 8008968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e088      	b.n	8008a94 <USB_EPStartXfer+0x12a2>
 8008982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008990:	d826      	bhi.n	80089e0 <USB_EPStartXfer+0x11ee>
 8008992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <USB_EPStartXfer+0x11d0>
 80089b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089bc:	3301      	adds	r3, #1
 80089be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	029b      	lsls	r3, r3, #10
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e059      	b.n	8008a94 <USB_EPStartXfer+0x12a2>
 80089e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <USB_EPStartXfer+0x121e>
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	029b      	lsls	r3, r3, #10
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	e02d      	b.n	8008a94 <USB_EPStartXfer+0x12a2>
 8008a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d125      	bne.n	8008a94 <USB_EPStartXfer+0x12a2>
 8008a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a5e:	4413      	add	r3, r2
 8008a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	011a      	lsls	r2, r3, #4
 8008a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a76:	4413      	add	r3, r2
 8008a78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8218 	beq.w	8008ed6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ac6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <USB_EPStartXfer+0x12ec>
 8008ad2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10d      	bne.n	8008afa <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ade:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f040 81f5 	bne.w	8008ed6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008aec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 81ee 	bne.w	8008ed6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b20:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	8013      	strh	r3, [r2, #0]
 8008b56:	e1be      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	78db      	ldrb	r3, [r3, #3]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f040 81b4 	bne.w	8008ed2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d917      	bls.n	8008bb6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8008b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba6:	1ad2      	subs	r2, r2, r3
 8008ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	619a      	str	r2, [r3, #24]
 8008bb4:	e00e      	b.n	8008bd4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8008bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f040 8085 	bne.w	8008cf0 <USB_EPStartXfer+0x14fe>
 8008be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	011a      	lsls	r2, r3, #4
 8008c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c22:	4413      	add	r3, r2
 8008c24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10c      	bne.n	8008c62 <USB_EPStartXfer+0x1470>
 8008c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	e077      	b.n	8008d52 <USB_EPStartXfer+0x1560>
 8008c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c68:	d81e      	bhi.n	8008ca8 <USB_EPStartXfer+0x14b6>
 8008c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6e:	085b      	lsrs	r3, r3, #1
 8008c70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <USB_EPStartXfer+0x1498>
 8008c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c84:	3301      	adds	r3, #1
 8008c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	029b      	lsls	r3, r3, #10
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e054      	b.n	8008d52 <USB_EPStartXfer+0x1560>
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <USB_EPStartXfer+0x14d6>
 8008cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e030      	b.n	8008d52 <USB_EPStartXfer+0x1560>
 8008cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d128      	bne.n	8008d52 <USB_EPStartXfer+0x1560>
 8008d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d24:	4413      	add	r3, r2
 8008d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	011a      	lsls	r2, r3, #4
 8008d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008d50:	801a      	strh	r2, [r3, #0]
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f040 8085 	bne.w	8008e7c <USB_EPStartXfer+0x168a>
 8008d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d96:	4413      	add	r3, r2
 8008d98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	011a      	lsls	r2, r3, #4
 8008daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008dae:	4413      	add	r3, r2
 8008db0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10c      	bne.n	8008dee <USB_EPStartXfer+0x15fc>
 8008dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	e073      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008df4:	d81e      	bhi.n	8008e34 <USB_EPStartXfer+0x1642>
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <USB_EPStartXfer+0x1624>
 8008e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e10:	3301      	adds	r3, #1
 8008e12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	029b      	lsls	r3, r3, #10
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e050      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <USB_EPStartXfer+0x1662>
 8008e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	029b      	lsls	r3, r3, #10
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	e02c      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d124      	bne.n	8008ed6 <USB_EPStartXfer+0x16e4>
 8008e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	011a      	lsls	r2, r3, #4
 8008eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008eba:	4413      	add	r3, r2
 8008ebc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	e001      	b.n	8008ed6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e03a      	b.n	8008f4c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008efc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008f00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008f0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d020      	beq.n	8008faa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f7e:	81bb      	strh	r3, [r7, #12]
 8008f80:	89bb      	ldrh	r3, [r7, #12]
 8008f82:	f083 0310 	eor.w	r3, r3, #16
 8008f86:	81bb      	strh	r3, [r7, #12]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	89bb      	ldrh	r3, [r7, #12]
 8008f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	8013      	strh	r3, [r2, #0]
 8008fa8:	e01f      	b.n	8008fea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc0:	81fb      	strh	r3, [r7, #14]
 8008fc2:	89fb      	ldrh	r3, [r7, #14]
 8008fc4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fc8:	81fb      	strh	r3, [r7, #14]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	441a      	add	r2, r3
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	7b1b      	ldrb	r3, [r3, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f040 809d 	bne.w	8009146 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d04c      	beq.n	80090ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	823b      	strh	r3, [r7, #16]
 8009022:	8a3b      	ldrh	r3, [r7, #16]
 8009024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01b      	beq.n	8009064 <USB_EPClearStall+0x6c>
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800903e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009042:	81fb      	strh	r3, [r7, #14]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	89fb      	ldrh	r3, [r7, #14]
 8009050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800905c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009060:	b29b      	uxth	r3, r3
 8009062:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d06c      	beq.n	8009146 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009082:	81bb      	strh	r3, [r7, #12]
 8009084:	89bb      	ldrh	r3, [r7, #12]
 8009086:	f083 0320 	eor.w	r3, r3, #32
 800908a:	81bb      	strh	r3, [r7, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	441a      	add	r2, r3
 8009096:	89bb      	ldrh	r3, [r7, #12]
 8009098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8013      	strh	r3, [r2, #0]
 80090ac:	e04b      	b.n	8009146 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	82fb      	strh	r3, [r7, #22]
 80090bc:	8afb      	ldrh	r3, [r7, #22]
 80090be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01b      	beq.n	80090fe <USB_EPClearStall+0x106>
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090dc:	82bb      	strh	r3, [r7, #20]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009114:	827b      	strh	r3, [r7, #18]
 8009116:	8a7b      	ldrh	r3, [r7, #18]
 8009118:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800911c:	827b      	strh	r3, [r7, #18]
 800911e:	8a7b      	ldrh	r3, [r7, #18]
 8009120:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009124:	827b      	strh	r3, [r7, #18]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	8a7b      	ldrh	r3, [r7, #18]
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800913a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800913e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2280      	movs	r2, #128	@ 0x80
 800916a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80091a4:	68fb      	ldr	r3, [r7, #12]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b08b      	sub	sp, #44	@ 0x2c
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4611      	mov	r1, r2
 80091be:	461a      	mov	r2, r3
 80091c0:	460b      	mov	r3, r1
 80091c2:	80fb      	strh	r3, [r7, #6]
 80091c4:	4613      	mov	r3, r2
 80091c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091c8:	88bb      	ldrh	r3, [r7, #4]
 80091ca:	3301      	adds	r3, #1
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	005a      	lsls	r2, r3, #1
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ea:	e01e      	b.n	800922a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3301      	adds	r3, #1
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	b21a      	sxth	r2, r3
 80091fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009200:	4313      	orrs	r3, r2
 8009202:	b21b      	sxth	r3, r3
 8009204:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	8a7a      	ldrh	r2, [r7, #18]
 800920a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	3302      	adds	r3, #2
 8009210:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	3302      	adds	r3, #2
 8009216:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3301      	adds	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	3301      	adds	r3, #1
 8009222:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	3b01      	subs	r3, #1
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1dd      	bne.n	80091ec <USB_WritePMA+0x3a>
  }
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	372c      	adds	r7, #44	@ 0x2c
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800923e:	b480      	push	{r7}
 8009240:	b08b      	sub	sp, #44	@ 0x2c
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	4611      	mov	r1, r2
 800924a:	461a      	mov	r2, r3
 800924c:	460b      	mov	r3, r1
 800924e:	80fb      	strh	r3, [r7, #6]
 8009250:	4613      	mov	r3, r2
 8009252:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009254:	88bb      	ldrh	r3, [r7, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	b29b      	uxth	r3, r3
 800925a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009264:	88fb      	ldrh	r3, [r7, #6]
 8009266:	005a      	lsls	r2, r3, #1
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009270:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
 8009276:	e01b      	b.n	80092b0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	b29b      	uxth	r3, r3
 800927e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	3302      	adds	r3, #2
 8009284:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	b2da      	uxtb	r2, r3
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	3301      	adds	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	b2da      	uxtb	r2, r3
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	3301      	adds	r3, #1
 80092a2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	3302      	adds	r3, #2
 80092a8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	3b01      	subs	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e0      	bne.n	8009278 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80092b6:	88bb      	ldrh	r3, [r7, #4]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	701a      	strb	r2, [r3, #0]
  }
}
 80092d2:	bf00      	nop
 80092d4:	372c      	adds	r7, #44	@ 0x2c
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <USBD_HID_Init>:
  */
/* for Nintendo Switch */
extern USB_JoystickReport_Output joystick_output;
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80092f0:	2340      	movs	r3, #64	@ 0x40
 80092f2:	2203      	movs	r2, #3
 80092f4:	2181      	movs	r1, #129	@ 0x81
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 fc4d 	bl	800ab96 <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);

  /* Open EP OUT */
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80092fc:	2010      	movs	r0, #16
 80092fe:	f001 fd5f 	bl	800adc0 <USBD_static_malloc>
 8009302:	4602      	mov	r2, r0
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 800930a:	2308      	movs	r3, #8
 800930c:	4a0b      	ldr	r2, [pc, #44]	@ (800933c <USBD_HID_Init+0x5c>)
 800930e:	2102      	movs	r1, #2
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 fd31 	bl	800ad78 <USBD_LL_PrepareReceive>
  if(pdev->pClassData == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <USBD_HID_Init+0x46>
  {
    ret = 1;
 8009320:	2301      	movs	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e004      	b.n	8009330 <USBD_HID_Init+0x50>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800932c:	2200      	movs	r2, #0
 800932e:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000954 	.word	0x20000954

08009340 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 800934c:	2181      	movs	r1, #129	@ 0x81
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 fc47 	bl	800abe2 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <USBD_HID_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009364:	4618      	mov	r0, r3
 8009366:	f001 fd39 	bl	800addc <USBD_static_free>
    pdev->pClassData = NULL;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009394:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d044      	beq.n	800942c <USBD_HID_Setup+0xb0>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	f040 8080 	bne.w	80094a8 <USBD_HID_Setup+0x12c>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	3b02      	subs	r3, #2
 80093ae:	2b09      	cmp	r3, #9
 80093b0:	d835      	bhi.n	800941e <USBD_HID_Setup+0xa2>
 80093b2:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <USBD_HID_Setup+0x3c>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	0800940f 	.word	0x0800940f
 80093bc:	080093ef 	.word	0x080093ef
 80093c0:	0800941f 	.word	0x0800941f
 80093c4:	0800941f 	.word	0x0800941f
 80093c8:	0800941f 	.word	0x0800941f
 80093cc:	0800941f 	.word	0x0800941f
 80093d0:	0800941f 	.word	0x0800941f
 80093d4:	0800941f 	.word	0x0800941f
 80093d8:	080093fd 	.word	0x080093fd
 80093dc:	080093e1 	.word	0x080093e1
    {


    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	885b      	ldrh	r3, [r3, #2]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]
      break;
 80093ec:	e01d      	b.n	800942a <USBD_HID_Setup+0xae>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->Protocol,
 80093ee:	68fb      	ldr	r3, [r7, #12]
      USBD_CtlSendData (pdev,
 80093f0:	2201      	movs	r2, #1
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 f8e7 	bl	800a5c8 <USBD_CtlSendData>
                        1);
      break;
 80093fa:	e016      	b.n	800942a <USBD_HID_Setup+0xae>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	885b      	ldrh	r3, [r3, #2]
 8009400:	0a1b      	lsrs	r3, r3, #8
 8009402:	b29b      	uxth	r3, r3
 8009404:	b2db      	uxtb	r3, r3
 8009406:	461a      	mov	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	605a      	str	r2, [r3, #4]
      break;
 800940c:	e00d      	b.n	800942a <USBD_HID_Setup+0xae>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->IdleState,
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 8009412:	2201      	movs	r2, #1
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 f8d6 	bl	800a5c8 <USBD_CtlSendData>
                        1);
      break;
 800941c:	e005      	b.n	800942a <USBD_HID_Setup+0xae>

    default:
      USBD_CtlError (pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f866 	bl	800a4f2 <USBD_CtlError>
      return USBD_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	e03f      	b.n	80094aa <USBD_HID_Setup+0x12e>
    }
    break;
 800942a:	e03d      	b.n	80094a8 <USBD_HID_Setup+0x12c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b0b      	cmp	r3, #11
 8009432:	d032      	beq.n	800949a <USBD_HID_Setup+0x11e>
 8009434:	2b0b      	cmp	r3, #11
 8009436:	dc37      	bgt.n	80094a8 <USBD_HID_Setup+0x12c>
 8009438:	2b06      	cmp	r3, #6
 800943a:	d002      	beq.n	8009442 <USBD_HID_Setup+0xc6>
 800943c:	2b0a      	cmp	r3, #10
 800943e:	d024      	beq.n	800948a <USBD_HID_Setup+0x10e>
 8009440:	e032      	b.n	80094a8 <USBD_HID_Setup+0x12c>
    {
    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	b29b      	uxth	r3, r3
 800944a:	2b22      	cmp	r3, #34	@ 0x22
 800944c:	d108      	bne.n	8009460 <USBD_HID_Setup+0xe4>
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	88db      	ldrh	r3, [r3, #6]
 8009452:	2b56      	cmp	r3, #86	@ 0x56
 8009454:	bf28      	it	cs
 8009456:	2356      	movcs	r3, #86	@ 0x56
 8009458:	82fb      	strh	r3, [r7, #22]
        pbuf = HID_CUSTOM_ReportDesc;
 800945a:	4b16      	ldr	r3, [pc, #88]	@ (80094b4 <USBD_HID_Setup+0x138>)
 800945c:	613b      	str	r3, [r7, #16]
 800945e:	e00d      	b.n	800947c <USBD_HID_Setup+0x100>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	885b      	ldrh	r3, [r3, #2]
 8009464:	0a1b      	lsrs	r3, r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	2b21      	cmp	r3, #33	@ 0x21
 800946a:	d107      	bne.n	800947c <USBD_HID_Setup+0x100>
      {
        pbuf = USBD_HID_Desc;
 800946c:	4b12      	ldr	r3, [pc, #72]	@ (80094b8 <USBD_HID_Setup+0x13c>)
 800946e:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	88db      	ldrh	r3, [r3, #6]
 8009474:	2b09      	cmp	r3, #9
 8009476:	bf28      	it	cs
 8009478:	2309      	movcs	r3, #9
 800947a:	82fb      	strh	r3, [r7, #22]
      }

      USBD_CtlSendData (pdev,
 800947c:	8afb      	ldrh	r3, [r7, #22]
 800947e:	461a      	mov	r2, r3
 8009480:	6939      	ldr	r1, [r7, #16]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 f8a0 	bl	800a5c8 <USBD_CtlSendData>
                        pbuf,
                        len);

      break;
 8009488:	e00e      	b.n	80094a8 <USBD_HID_Setup+0x12c>

    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev,
 800948e:	2201      	movs	r2, #1
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 f898 	bl	800a5c8 <USBD_CtlSendData>
                        1);
      break;
 8009498:	e006      	b.n	80094a8 <USBD_HID_Setup+0x12c>

    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	885b      	ldrh	r3, [r3, #2]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	609a      	str	r2, [r3, #8]
      break;
 80094a6:	bf00      	nop
    }
  }
  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20000218 	.word	0x20000218
 80094b8:	20000200 	.word	0x20000200

080094bc <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d10c      	bne.n	80094f6 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	7b1b      	ldrb	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d108      	bne.n	80094f6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2201      	movs	r2, #1
 80094e8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 80094ea:	88fb      	ldrh	r3, [r7, #6]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	2181      	movs	r1, #129	@ 0x81
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f001 fc1e 	bl	800ad32 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2229      	movs	r2, #41	@ 0x29
 800950c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800950e:	4b03      	ldr	r3, [pc, #12]	@ (800951c <USBD_HID_GetCfgDesc+0x1c>)
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	200001d4 	.word	0x200001d4

08009520 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009532:	2200      	movs	r2, #0
 8009534:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBD_HID_DataOut>:
  * @retval status
  */
/* for Nintendo Switch */
static uint8_t  USBD_HID_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Receive(hUsbDeviceFS.pData, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 8009550:	4b06      	ldr	r3, [pc, #24]	@ (800956c <USBD_HID_DataOut+0x28>)
 8009552:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009556:	2308      	movs	r3, #8
 8009558:	4a05      	ldr	r2, [pc, #20]	@ (8009570 <USBD_HID_DataOut+0x2c>)
 800955a:	2102      	movs	r1, #2
 800955c:	f7f9 fa96 	bl	8002a8c <HAL_PCD_EP_Receive>
  // ignore
  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20000964 	.word	0x20000964
 8009570:	20000954 	.word	0x20000954

08009574 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	220a      	movs	r2, #10
 8009580:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	@ (8009590 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	2000020c 	.word	0x2000020c

08009594 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80095a8:	2302      	movs	r3, #2
 80095aa:	e01a      	b.n	80095e2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	79fa      	ldrb	r2, [r7, #7]
 80095d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f001 fa78 	bl	800aad0 <USBD_LL_Init>

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d006      	beq.n	800960c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
 800960a:	e001      	b.n	8009610 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800960c:	2302      	movs	r3, #2
 800960e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fa9a 	bl	800ab60 <USBD_LL_Start>

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009658:	2302      	movs	r3, #2
 800965a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00c      	beq.n	8009680 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fedb 	bl	800a47e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80096d6:	461a      	mov	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80096e4:	f003 031f 	and.w	r3, r3, #31
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d016      	beq.n	800971a <USBD_LL_SetupStage+0x6a>
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d81c      	bhi.n	800972a <USBD_LL_SetupStage+0x7a>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <USBD_LL_SetupStage+0x4a>
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d008      	beq.n	800970a <USBD_LL_SetupStage+0x5a>
 80096f8:	e017      	b.n	800972a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9ce 	bl	8009aa4 <USBD_StdDevReq>
      break;
 8009708:	e01a      	b.n	8009740 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa30 	bl	8009b78 <USBD_StdItfReq>
      break;
 8009718:	e012      	b.n	8009740 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa70 	bl	8009c08 <USBD_StdEPReq>
      break;
 8009728:	e00a      	b.n	8009740 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009730:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009734:	b2db      	uxtb	r3, r3
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f001 fa71 	bl	800ac20 <USBD_LL_StallEP>
      break;
 800973e:	bf00      	nop
  }

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	460b      	mov	r3, r1
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d14b      	bne.n	80097f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009764:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800976c:	2b03      	cmp	r3, #3
 800976e:	d134      	bne.n	80097da <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	429a      	cmp	r2, r3
 800977a:	d919      	bls.n	80097b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	68da      	ldr	r2, [r3, #12]
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	1ad2      	subs	r2, r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009792:	429a      	cmp	r2, r3
 8009794:	d203      	bcs.n	800979e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800979a:	b29b      	uxth	r3, r3
 800979c:	e002      	b.n	80097a4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 ff3b 	bl	800a624 <USBD_CtlContinueRx>
 80097ae:	e038      	b.n	8009822 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d105      	bne.n	80097d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 ff38 	bl	800a648 <USBD_CtlSendStatus>
 80097d8:	e023      	b.n	8009822 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097e0:	2b05      	cmp	r3, #5
 80097e2:	d11e      	bne.n	8009822 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80097ec:	2100      	movs	r1, #0
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f001 fa16 	bl	800ac20 <USBD_LL_StallEP>
 80097f4:	e015      	b.n	8009822 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00d      	beq.n	800981e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009808:	2b03      	cmp	r3, #3
 800980a:	d108      	bne.n	800981e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	7afa      	ldrb	r2, [r7, #11]
 8009816:	4611      	mov	r1, r2
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	4798      	blx	r3
 800981c:	e001      	b.n	8009822 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800981e:	2302      	movs	r3, #2
 8009820:	e000      	b.n	8009824 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d17f      	bne.n	8009940 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3314      	adds	r3, #20
 8009844:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800984c:	2b02      	cmp	r3, #2
 800984e:	d15c      	bne.n	800990a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	429a      	cmp	r2, r3
 800985a:	d915      	bls.n	8009888 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	1ad2      	subs	r2, r2, r3
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 fec3 	bl	800a600 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f001 fa79 	bl	800ad78 <USBD_LL_PrepareReceive>
 8009886:	e04e      	b.n	8009926 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	6912      	ldr	r2, [r2, #16]
 8009890:	fbb3 f1f2 	udiv	r1, r3, r2
 8009894:	fb01 f202 	mul.w	r2, r1, r2
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11c      	bne.n	80098d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d316      	bcc.n	80098d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d20f      	bcs.n	80098d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098b8:	2200      	movs	r2, #0
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 fe9f 	bl	800a600 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ca:	2300      	movs	r3, #0
 80098cc:	2200      	movs	r2, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f001 fa51 	bl	800ad78 <USBD_LL_PrepareReceive>
 80098d6:	e026      	b.n	8009926 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00a      	beq.n	80098fa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d105      	bne.n	80098fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80098fa:	2180      	movs	r1, #128	@ 0x80
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f001 f98f 	bl	800ac20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 feb3 	bl	800a66e <USBD_CtlReceiveStatus>
 8009908:	e00d      	b.n	8009926 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009910:	2b04      	cmp	r3, #4
 8009912:	d004      	beq.n	800991e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800991a:	2b00      	cmp	r3, #0
 800991c:	d103      	bne.n	8009926 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800991e:	2180      	movs	r1, #128	@ 0x80
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f001 f97d 	bl	800ac20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800992c:	2b01      	cmp	r3, #1
 800992e:	d11d      	bne.n	800996c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7ff fe80 	bl	8009636 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800993e:	e015      	b.n	800996c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00d      	beq.n	8009968 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009952:	2b03      	cmp	r3, #3
 8009954:	d108      	bne.n	8009968 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	7afa      	ldrb	r2, [r7, #11]
 8009960:	4611      	mov	r1, r2
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	4798      	blx	r3
 8009966:	e001      	b.n	800996c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009968:	2302      	movs	r3, #2
 800996a:	e000      	b.n	800996e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800997e:	2340      	movs	r3, #64	@ 0x40
 8009980:	2200      	movs	r2, #0
 8009982:	2100      	movs	r1, #0
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f906 	bl	800ab96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2240      	movs	r2, #64	@ 0x40
 8009996:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800999a:	2340      	movs	r3, #64	@ 0x40
 800999c:	2200      	movs	r2, #0
 800999e:	2180      	movs	r1, #128	@ 0x80
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 f8f8 	bl	800ab96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2240      	movs	r2, #64	@ 0x40
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d009      	beq.n	80099ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6852      	ldr	r2, [r2, #4]
 80099e6:	b2d2      	uxtb	r2, r2
 80099e8:	4611      	mov	r1, r2
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	4798      	blx	r3
  }

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	78fa      	ldrb	r2, [r7, #3]
 8009a08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d105      	bne.n	8009a60 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d10b      	bne.n	8009a98 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009aba:	2b40      	cmp	r3, #64	@ 0x40
 8009abc:	d005      	beq.n	8009aca <USBD_StdDevReq+0x26>
 8009abe:	2b40      	cmp	r3, #64	@ 0x40
 8009ac0:	d84f      	bhi.n	8009b62 <USBD_StdDevReq+0xbe>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d009      	beq.n	8009ada <USBD_StdDevReq+0x36>
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d14b      	bne.n	8009b62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
      break;
 8009ad8:	e048      	b.n	8009b6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	d839      	bhi.n	8009b56 <USBD_StdDevReq+0xb2>
 8009ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae8 <USBD_StdDevReq+0x44>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009b39 	.word	0x08009b39
 8009aec:	08009b4d 	.word	0x08009b4d
 8009af0:	08009b57 	.word	0x08009b57
 8009af4:	08009b43 	.word	0x08009b43
 8009af8:	08009b57 	.word	0x08009b57
 8009afc:	08009b1b 	.word	0x08009b1b
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b57 	.word	0x08009b57
 8009b08:	08009b2f 	.word	0x08009b2f
 8009b0c:	08009b25 	.word	0x08009b25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9dc 	bl	8009ed0 <USBD_GetDescriptor>
          break;
 8009b18:	e022      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fb3f 	bl	800a1a0 <USBD_SetAddress>
          break;
 8009b22:	e01d      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fb7e 	bl	800a228 <USBD_SetConfig>
          break;
 8009b2c:	e018      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc07 	bl	800a344 <USBD_GetConfig>
          break;
 8009b36:	e013      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc37 	bl	800a3ae <USBD_GetStatus>
          break;
 8009b40:	e00e      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc65 	bl	800a414 <USBD_SetFeature>
          break;
 8009b4a:	e009      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fc74 	bl	800a43c <USBD_ClrFeature>
          break;
 8009b54:	e004      	b.n	8009b60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fcca 	bl	800a4f2 <USBD_CtlError>
          break;
 8009b5e:	bf00      	nop
      }
      break;
 8009b60:	e004      	b.n	8009b6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fcc4 	bl	800a4f2 <USBD_CtlError>
      break;
 8009b6a:	bf00      	nop
  }

  return ret;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b8e:	2b40      	cmp	r3, #64	@ 0x40
 8009b90:	d005      	beq.n	8009b9e <USBD_StdItfReq+0x26>
 8009b92:	2b40      	cmp	r3, #64	@ 0x40
 8009b94:	d82e      	bhi.n	8009bf4 <USBD_StdItfReq+0x7c>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USBD_StdItfReq+0x26>
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d12a      	bne.n	8009bf4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d81d      	bhi.n	8009be6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	889b      	ldrh	r3, [r3, #4]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d813      	bhi.n	8009bdc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	88db      	ldrh	r3, [r3, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d110      	bne.n	8009bf0 <USBD_StdItfReq+0x78>
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10d      	bne.n	8009bf0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fd37 	bl	800a648 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bda:	e009      	b.n	8009bf0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fc87 	bl	800a4f2 <USBD_CtlError>
          break;
 8009be4:	e004      	b.n	8009bf0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fc82 	bl	800a4f2 <USBD_CtlError>
          break;
 8009bee:	e000      	b.n	8009bf2 <USBD_StdItfReq+0x7a>
          break;
 8009bf0:	bf00      	nop
      }
      break;
 8009bf2:	e004      	b.n	8009bfe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc7b 	bl	800a4f2 <USBD_CtlError>
      break;
 8009bfc:	bf00      	nop
  }

  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d007      	beq.n	8009c38 <USBD_StdEPReq+0x30>
 8009c28:	2b40      	cmp	r3, #64	@ 0x40
 8009c2a:	f200 8146 	bhi.w	8009eba <USBD_StdEPReq+0x2b2>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <USBD_StdEPReq+0x40>
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	f040 8141 	bne.w	8009eba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
      break;
 8009c46:	e13d      	b.n	8009ec4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d10a      	bne.n	8009c6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	e12d      	b.n	8009ec6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d007      	beq.n	8009c82 <USBD_StdEPReq+0x7a>
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	f300 811b 	bgt.w	8009eae <USBD_StdEPReq+0x2a6>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d072      	beq.n	8009d62 <USBD_StdEPReq+0x15a>
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d03a      	beq.n	8009cf6 <USBD_StdEPReq+0xee>
 8009c80:	e115      	b.n	8009eae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d002      	beq.n	8009c92 <USBD_StdEPReq+0x8a>
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d015      	beq.n	8009cbc <USBD_StdEPReq+0xb4>
 8009c90:	e02b      	b.n	8009cea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00c      	beq.n	8009cb2 <USBD_StdEPReq+0xaa>
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b80      	cmp	r3, #128	@ 0x80
 8009c9c:	d009      	beq.n	8009cb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 ffbc 	bl	800ac20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ca8:	2180      	movs	r1, #128	@ 0x80
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 ffb8 	bl	800ac20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cb0:	e020      	b.n	8009cf4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fc1c 	bl	800a4f2 <USBD_CtlError>
              break;
 8009cba:	e01b      	b.n	8009cf4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	885b      	ldrh	r3, [r3, #2]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10e      	bne.n	8009ce2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <USBD_StdEPReq+0xda>
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b80      	cmp	r3, #128	@ 0x80
 8009cce:	d008      	beq.n	8009ce2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	88db      	ldrh	r3, [r3, #6]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 ff9f 	bl	800ac20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fcb0 	bl	800a648 <USBD_CtlSendStatus>

              break;
 8009ce8:	e004      	b.n	8009cf4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fc00 	bl	800a4f2 <USBD_CtlError>
              break;
 8009cf2:	bf00      	nop
          }
          break;
 8009cf4:	e0e0      	b.n	8009eb8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d002      	beq.n	8009d06 <USBD_StdEPReq+0xfe>
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d015      	beq.n	8009d30 <USBD_StdEPReq+0x128>
 8009d04:	e026      	b.n	8009d54 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00c      	beq.n	8009d26 <USBD_StdEPReq+0x11e>
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	2b80      	cmp	r3, #128	@ 0x80
 8009d10:	d009      	beq.n	8009d26 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 ff82 	bl	800ac20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d1c:	2180      	movs	r1, #128	@ 0x80
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 ff7e 	bl	800ac20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d24:	e01c      	b.n	8009d60 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fbe2 	bl	800a4f2 <USBD_CtlError>
              break;
 8009d2e:	e017      	b.n	8009d60 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	885b      	ldrh	r3, [r3, #2]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d112      	bne.n	8009d5e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 ff89 	bl	800ac5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc7b 	bl	800a648 <USBD_CtlSendStatus>
              }
              break;
 8009d52:	e004      	b.n	8009d5e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fbcb 	bl	800a4f2 <USBD_CtlError>
              break;
 8009d5c:	e000      	b.n	8009d60 <USBD_StdEPReq+0x158>
              break;
 8009d5e:	bf00      	nop
          }
          break;
 8009d60:	e0aa      	b.n	8009eb8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d002      	beq.n	8009d72 <USBD_StdEPReq+0x16a>
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	d032      	beq.n	8009dd6 <USBD_StdEPReq+0x1ce>
 8009d70:	e097      	b.n	8009ea2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <USBD_StdEPReq+0x180>
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b80      	cmp	r3, #128	@ 0x80
 8009d7c:	d004      	beq.n	8009d88 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fbb6 	bl	800a4f2 <USBD_CtlError>
                break;
 8009d86:	e091      	b.n	8009eac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da0b      	bge.n	8009da8 <USBD_StdEPReq+0x1a0>
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	3310      	adds	r3, #16
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	4413      	add	r3, r2
 8009da4:	3304      	adds	r3, #4
 8009da6:	e00b      	b.n	8009dc0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fbfa 	bl	800a5c8 <USBD_CtlSendData>
              break;
 8009dd4:	e06a      	b.n	8009eac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da11      	bge.n	8009e02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	f003 020f 	and.w	r2, r3, #15
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	3318      	adds	r3, #24
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d117      	bne.n	8009e28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fb79 	bl	800a4f2 <USBD_CtlError>
                  break;
 8009e00:	e054      	b.n	8009eac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	f003 020f 	and.w	r2, r3, #15
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	440b      	add	r3, r1
 8009e14:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fb66 	bl	800a4f2 <USBD_CtlError>
                  break;
 8009e26:	e041      	b.n	8009eac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da0b      	bge.n	8009e48 <USBD_StdEPReq+0x240>
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	3310      	adds	r3, #16
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	3304      	adds	r3, #4
 8009e46:	e00b      	b.n	8009e60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3304      	adds	r3, #4
 8009e60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <USBD_StdEPReq+0x266>
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b80      	cmp	r3, #128	@ 0x80
 8009e6c:	d103      	bne.n	8009e76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e00e      	b.n	8009e94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 ff0e 	bl	800ac9c <USBD_LL_IsStallEP>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	e002      	b.n	8009e94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2202      	movs	r2, #2
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fb94 	bl	800a5c8 <USBD_CtlSendData>
              break;
 8009ea0:	e004      	b.n	8009eac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb24 	bl	800a4f2 <USBD_CtlError>
              break;
 8009eaa:	bf00      	nop
          }
          break;
 8009eac:	e004      	b.n	8009eb8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fb1e 	bl	800a4f2 <USBD_CtlError>
          break;
 8009eb6:	bf00      	nop
      }
      break;
 8009eb8:	e004      	b.n	8009ec4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fb18 	bl	800a4f2 <USBD_CtlError>
      break;
 8009ec2:	bf00      	nop
  }

  return ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	885b      	ldrh	r3, [r3, #2]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b06      	cmp	r3, #6
 8009ef2:	f200 8128 	bhi.w	800a146 <USBD_GetDescriptor+0x276>
 8009ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8009efc <USBD_GetDescriptor+0x2c>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f31 	.word	0x08009f31
 8009f04:	08009f71 	.word	0x08009f71
 8009f08:	0800a147 	.word	0x0800a147
 8009f0c:	0800a147 	.word	0x0800a147
 8009f10:	0800a0e7 	.word	0x0800a0e7
 8009f14:	0800a113 	.word	0x0800a113
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
      break;
 8009f2e:	e112      	b.n	800a156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7c1b      	ldrb	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10d      	bne.n	8009f54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	f107 0208 	add.w	r2, r7, #8
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	2202      	movs	r2, #2
 8009f50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f52:	e100      	b.n	800a156 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5c:	f107 0208 	add.w	r2, r7, #8
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
 8009f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	701a      	strb	r2, [r3, #0]
      break;
 8009f6e:	e0f2      	b.n	800a156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b05      	cmp	r3, #5
 8009f78:	f200 80ac 	bhi.w	800a0d4 <USBD_GetDescriptor+0x204>
 8009f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <USBD_GetDescriptor+0xb4>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009f9d 	.word	0x08009f9d
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	0800a005 	.word	0x0800a005
 8009f90:	0800a039 	.word	0x0800a039
 8009f94:	0800a06d 	.word	0x0800a06d
 8009f98:	0800a0a1 	.word	0x0800a0a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7c12      	ldrb	r2, [r2, #16]
 8009fb4:	f107 0108 	add.w	r1, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fbe:	e091      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa95 	bl	800a4f2 <USBD_CtlError>
            err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fce:	e089      	b.n	800a0e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00b      	beq.n	8009ff4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	7c12      	ldrb	r2, [r2, #16]
 8009fe8:	f107 0108 	add.w	r1, r7, #8
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ff2:	e077      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa7b 	bl	800a4f2 <USBD_CtlError>
            err++;
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	3301      	adds	r3, #1
 800a000:	72fb      	strb	r3, [r7, #11]
          break;
 800a002:	e06f      	b.n	800a0e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	7c12      	ldrb	r2, [r2, #16]
 800a01c:	f107 0108 	add.w	r1, r7, #8
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a026:	e05d      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa61 	bl	800a4f2 <USBD_CtlError>
            err++;
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	3301      	adds	r3, #1
 800a034:	72fb      	strb	r3, [r7, #11]
          break;
 800a036:	e055      	b.n	800a0e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00b      	beq.n	800a05c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	7c12      	ldrb	r2, [r2, #16]
 800a050:	f107 0108 	add.w	r1, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a05a:	e043      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fa47 	bl	800a4f2 <USBD_CtlError>
            err++;
 800a064:	7afb      	ldrb	r3, [r7, #11]
 800a066:	3301      	adds	r3, #1
 800a068:	72fb      	strb	r3, [r7, #11]
          break;
 800a06a:	e03b      	b.n	800a0e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	7c12      	ldrb	r2, [r2, #16]
 800a084:	f107 0108 	add.w	r1, r7, #8
 800a088:	4610      	mov	r0, r2
 800a08a:	4798      	blx	r3
 800a08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a08e:	e029      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa2d 	bl	800a4f2 <USBD_CtlError>
            err++;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	3301      	adds	r3, #1
 800a09c:	72fb      	strb	r3, [r7, #11]
          break;
 800a09e:	e021      	b.n	800a0e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	7c12      	ldrb	r2, [r2, #16]
 800a0b8:	f107 0108 	add.w	r1, r7, #8
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
 800a0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c2:	e00f      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa13 	bl	800a4f2 <USBD_CtlError>
            err++;
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d2:	e007      	b.n	800a0e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa0b 	bl	800a4f2 <USBD_CtlError>
          err++;
 800a0dc:	7afb      	ldrb	r3, [r7, #11]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a0e2:	e038      	b.n	800a156 <USBD_GetDescriptor+0x286>
 800a0e4:	e037      	b.n	800a156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7c1b      	ldrb	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f6:	f107 0208 	add.w	r2, r7, #8
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4798      	blx	r3
 800a0fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a100:	e029      	b.n	800a156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f4 	bl	800a4f2 <USBD_CtlError>
        err++;
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	3301      	adds	r3, #1
 800a10e:	72fb      	strb	r3, [r7, #11]
      break;
 800a110:	e021      	b.n	800a156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	7c1b      	ldrb	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10d      	bne.n	800a136 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a122:	f107 0208 	add.w	r2, r7, #8
 800a126:	4610      	mov	r0, r2
 800a128:	4798      	blx	r3
 800a12a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3301      	adds	r3, #1
 800a130:	2207      	movs	r2, #7
 800a132:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a134:	e00f      	b.n	800a156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9da 	bl	800a4f2 <USBD_CtlError>
        err++;
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	3301      	adds	r3, #1
 800a142:	72fb      	strb	r3, [r7, #11]
      break;
 800a144:	e007      	b.n	800a156 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f9d2 	bl	800a4f2 <USBD_CtlError>
      err++;
 800a14e:	7afb      	ldrb	r3, [r7, #11]
 800a150:	3301      	adds	r3, #1
 800a152:	72fb      	strb	r3, [r7, #11]
      break;
 800a154:	bf00      	nop
  }

  if (err != 0U)
 800a156:	7afb      	ldrb	r3, [r7, #11]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d11c      	bne.n	800a196 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a15c:	893b      	ldrh	r3, [r7, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <USBD_GetDescriptor+0x2b6>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	88db      	ldrh	r3, [r3, #6]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	88da      	ldrh	r2, [r3, #6]
 800a16e:	893b      	ldrh	r3, [r7, #8]
 800a170:	4293      	cmp	r3, r2
 800a172:	bf28      	it	cs
 800a174:	4613      	movcs	r3, r2
 800a176:	b29b      	uxth	r3, r3
 800a178:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a17a:	893b      	ldrh	r3, [r7, #8]
 800a17c:	461a      	mov	r2, r3
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fa21 	bl	800a5c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	88db      	ldrh	r3, [r3, #6]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d104      	bne.n	800a198 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa5a 	bl	800a648 <USBD_CtlSendStatus>
 800a194:	e000      	b.n	800a198 <USBD_GetDescriptor+0x2c8>
    return;
 800a196:	bf00      	nop
    }
  }
}
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop

0800a1a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	889b      	ldrh	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d130      	bne.n	800a214 <USBD_SetAddress+0x74>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	88db      	ldrh	r3, [r3, #6]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d12c      	bne.n	800a214 <USBD_SetAddress+0x74>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	885b      	ldrh	r3, [r3, #2]
 800a1be:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1c0:	d828      	bhi.n	800a214 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	885b      	ldrh	r3, [r3, #2]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d104      	bne.n	800a1e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f989 	bl	800a4f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e0:	e01d      	b.n	800a21e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7bfa      	ldrb	r2, [r7, #15]
 800a1e6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fd80 	bl	800acf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fa27 	bl	800a648 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a208:	e009      	b.n	800a21e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a212:	e004      	b.n	800a21e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f96b 	bl	800a4f2 <USBD_CtlError>
  }
}
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	885b      	ldrh	r3, [r3, #2]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	4b41      	ldr	r3, [pc, #260]	@ (800a340 <USBD_SetConfig+0x118>)
 800a23a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a23c:	4b40      	ldr	r3, [pc, #256]	@ (800a340 <USBD_SetConfig+0x118>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d904      	bls.n	800a24e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f953 	bl	800a4f2 <USBD_CtlError>
 800a24c:	e075      	b.n	800a33a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a254:	2b02      	cmp	r3, #2
 800a256:	d002      	beq.n	800a25e <USBD_SetConfig+0x36>
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d023      	beq.n	800a2a4 <USBD_SetConfig+0x7c>
 800a25c:	e062      	b.n	800a324 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a25e:	4b38      	ldr	r3, [pc, #224]	@ (800a340 <USBD_SetConfig+0x118>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01a      	beq.n	800a29c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a266:	4b36      	ldr	r3, [pc, #216]	@ (800a340 <USBD_SetConfig+0x118>)
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2203      	movs	r2, #3
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a278:	4b31      	ldr	r3, [pc, #196]	@ (800a340 <USBD_SetConfig+0x118>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff f9e4 	bl	800964c <USBD_SetClassConfig>
 800a284:	4603      	mov	r3, r0
 800a286:	2b02      	cmp	r3, #2
 800a288:	d104      	bne.n	800a294 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f930 	bl	800a4f2 <USBD_CtlError>
            return;
 800a292:	e052      	b.n	800a33a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9d7 	bl	800a648 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a29a:	e04e      	b.n	800a33a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9d3 	bl	800a648 <USBD_CtlSendStatus>
        break;
 800a2a2:	e04a      	b.n	800a33a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a2a4:	4b26      	ldr	r3, [pc, #152]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d112      	bne.n	800a2d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a2b4:	4b22      	ldr	r3, [pc, #136]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2be:	4b20      	ldr	r3, [pc, #128]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff f9e0 	bl	800968a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f9bc 	bl	800a648 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2d0:	e033      	b.n	800a33a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d01d      	beq.n	800a31c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff f9ce 	bl	800968a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a2ee:	4b14      	ldr	r3, [pc, #80]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2f8:	4b11      	ldr	r3, [pc, #68]	@ (800a340 <USBD_SetConfig+0x118>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff f9a4 	bl	800964c <USBD_SetClassConfig>
 800a304:	4603      	mov	r3, r0
 800a306:	2b02      	cmp	r3, #2
 800a308:	d104      	bne.n	800a314 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f8f0 	bl	800a4f2 <USBD_CtlError>
            return;
 800a312:	e012      	b.n	800a33a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f997 	bl	800a648 <USBD_CtlSendStatus>
        break;
 800a31a:	e00e      	b.n	800a33a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f993 	bl	800a648 <USBD_CtlSendStatus>
        break;
 800a322:	e00a      	b.n	800a33a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f8e3 	bl	800a4f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a32c:	4b04      	ldr	r3, [pc, #16]	@ (800a340 <USBD_SetConfig+0x118>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff f9a9 	bl	800968a <USBD_ClrClassConfig>
        break;
 800a338:	bf00      	nop
    }
  }
}
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20000960 	.word	0x20000960

0800a344 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	88db      	ldrh	r3, [r3, #6]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d004      	beq.n	800a360 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f8ca 	bl	800a4f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a35e:	e022      	b.n	800a3a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a366:	2b02      	cmp	r3, #2
 800a368:	dc02      	bgt.n	800a370 <USBD_GetConfig+0x2c>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	dc03      	bgt.n	800a376 <USBD_GetConfig+0x32>
 800a36e:	e015      	b.n	800a39c <USBD_GetConfig+0x58>
 800a370:	2b03      	cmp	r3, #3
 800a372:	d00b      	beq.n	800a38c <USBD_GetConfig+0x48>
 800a374:	e012      	b.n	800a39c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3308      	adds	r3, #8
 800a380:	2201      	movs	r2, #1
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f91f 	bl	800a5c8 <USBD_CtlSendData>
        break;
 800a38a:	e00c      	b.n	800a3a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	2201      	movs	r2, #1
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f917 	bl	800a5c8 <USBD_CtlSendData>
        break;
 800a39a:	e004      	b.n	800a3a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f8a7 	bl	800a4f2 <USBD_CtlError>
        break;
 800a3a4:	bf00      	nop
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d81e      	bhi.n	800a402 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	88db      	ldrh	r3, [r3, #6]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d004      	beq.n	800a3d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f88f 	bl	800a4f2 <USBD_CtlError>
        break;
 800a3d4:	e01a      	b.n	800a40c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f043 0202 	orr.w	r2, r3, #2
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f8e4 	bl	800a5c8 <USBD_CtlSendData>
      break;
 800a400:	e004      	b.n	800a40c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f874 	bl	800a4f2 <USBD_CtlError>
      break;
 800a40a:	bf00      	nop
  }
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d106      	bne.n	800a434 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f90a 	bl	800a648 <USBD_CtlSendStatus>
  }
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44c:	3b01      	subs	r3, #1
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d80b      	bhi.n	800a46a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	885b      	ldrh	r3, [r3, #2]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d10c      	bne.n	800a474 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f8f0 	bl	800a648 <USBD_CtlSendStatus>
      }
      break;
 800a468:	e004      	b.n	800a474 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f840 	bl	800a4f2 <USBD_CtlError>
      break;
 800a472:	e000      	b.n	800a476 <USBD_ClrFeature+0x3a>
      break;
 800a474:	bf00      	nop
  }
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781a      	ldrb	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	785a      	ldrb	r2, [r3, #1]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	3302      	adds	r3, #2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	3303      	adds	r3, #3
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	3305      	adds	r3, #5
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	4413      	add	r3, r2
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	3306      	adds	r3, #6
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4413      	add	r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	80da      	strh	r2, [r3, #6]

}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a4fc:	2180      	movs	r1, #128	@ 0x80
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fb8e 	bl	800ac20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fb8a 	bl	800ac20 <USBD_LL_StallEP>
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d032      	beq.n	800a590 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f834 	bl	800a598 <USBD_GetLen>
 800a530:	4603      	mov	r3, r0
 800a532:	3301      	adds	r3, #1
 800a534:	b29b      	uxth	r3, r3
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	75fa      	strb	r2, [r7, #23]
 800a544:	461a      	mov	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	4413      	add	r3, r2
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	75fa      	strb	r2, [r7, #23]
 800a556:	461a      	mov	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4413      	add	r3, r2
 800a55c:	2203      	movs	r2, #3
 800a55e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a560:	e012      	b.n	800a588 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	60fa      	str	r2, [r7, #12]
 800a568:	7dfa      	ldrb	r2, [r7, #23]
 800a56a:	1c51      	adds	r1, r2, #1
 800a56c:	75f9      	strb	r1, [r7, #23]
 800a56e:	4611      	mov	r1, r2
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	440a      	add	r2, r1
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	75fa      	strb	r2, [r7, #23]
 800a57e:	461a      	mov	r2, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4413      	add	r3, r2
 800a584:	2200      	movs	r2, #0
 800a586:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e8      	bne.n	800a562 <USBD_GetString+0x4e>
    }
  }
}
 800a590:	bf00      	nop
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a5a4:	e005      	b.n	800a5b2 <USBD_GetLen+0x1a>
  {
    len++;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f5      	bne.n	800a5a6 <USBD_GetLen+0xe>
  }

  return len;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5e4:	88fa      	ldrh	r2, [r7, #6]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 fb9e 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	4613      	mov	r3, r2
 800a60c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	2100      	movs	r1, #0
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 fb8c 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	2100      	movs	r1, #0
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 fb9d 	bl	800ad78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2204      	movs	r2, #4
 800a654:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a658:	2300      	movs	r3, #0
 800a65a:	2200      	movs	r2, #0
 800a65c:	2100      	movs	r1, #0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fb67 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2205      	movs	r2, #5
 800a67a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a67e:	2300      	movs	r3, #0
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fb77 	bl	800ad78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a698:	2200      	movs	r2, #0
 800a69a:	490e      	ldr	r1, [pc, #56]	@ (800a6d4 <MX_USB_DEVICE_Init+0x40>)
 800a69c:	480e      	ldr	r0, [pc, #56]	@ (800a6d8 <MX_USB_DEVICE_Init+0x44>)
 800a69e:	f7fe ff79 	bl	8009594 <USBD_Init>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6a8:	f7f6 f82e 	bl	8000708 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a6ac:	490b      	ldr	r1, [pc, #44]	@ (800a6dc <MX_USB_DEVICE_Init+0x48>)
 800a6ae:	480a      	ldr	r0, [pc, #40]	@ (800a6d8 <MX_USB_DEVICE_Init+0x44>)
 800a6b0:	f7fe ff9b 	bl	80095ea <USBD_RegisterClass>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6ba:	f7f6 f825 	bl	8000708 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6be:	4806      	ldr	r0, [pc, #24]	@ (800a6d8 <MX_USB_DEVICE_Init+0x44>)
 800a6c0:	f7fe ffad 	bl	800961e <USBD_Start>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a6ca:	f7f6 f81d 	bl	8000708 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6ce:	bf00      	nop
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000270 	.word	0x20000270
 800a6d8:	20000964 	.word	0x20000964
 800a6dc:	2000019c 	.word	0x2000019c

0800a6e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2212      	movs	r2, #18
 800a6f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6f2:	4b03      	ldr	r3, [pc, #12]	@ (800a700 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	2000028c 	.word	0x2000028c

0800a704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2204      	movs	r2, #4
 800a714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a716:	4b03      	ldr	r3, [pc, #12]	@ (800a724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	200002a0 	.word	0x200002a0

0800a728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	4603      	mov	r3, r0
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d105      	bne.n	800a746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4907      	ldr	r1, [pc, #28]	@ (800a75c <USBD_FS_ProductStrDescriptor+0x34>)
 800a73e:	4808      	ldr	r0, [pc, #32]	@ (800a760 <USBD_FS_ProductStrDescriptor+0x38>)
 800a740:	f7ff fee8 	bl	800a514 <USBD_GetString>
 800a744:	e004      	b.n	800a750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4904      	ldr	r1, [pc, #16]	@ (800a75c <USBD_FS_ProductStrDescriptor+0x34>)
 800a74a:	4805      	ldr	r0, [pc, #20]	@ (800a760 <USBD_FS_ProductStrDescriptor+0x38>)
 800a74c:	f7ff fee2 	bl	800a514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a750:	4b02      	ldr	r3, [pc, #8]	@ (800a75c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000c28 	.word	0x20000c28
 800a760:	0800aed0 	.word	0x0800aed0

0800a764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	6039      	str	r1, [r7, #0]
 800a76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	4904      	ldr	r1, [pc, #16]	@ (800a784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a774:	4804      	ldr	r0, [pc, #16]	@ (800a788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a776:	f7ff fecd 	bl	800a514 <USBD_GetString>
  return USBD_StrDesc;
 800a77a:	4b02      	ldr	r3, [pc, #8]	@ (800a784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20000c28 	.word	0x20000c28
 800a788:	0800aee4 	.word	0x0800aee4

0800a78c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	221a      	movs	r2, #26
 800a79c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a79e:	f000 f843 	bl	800a828 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7a2:	4b02      	ldr	r3, [pc, #8]	@ (800a7ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	200002a4 	.word	0x200002a4

0800a7b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	6039      	str	r1, [r7, #0]
 800a7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d105      	bne.n	800a7ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4907      	ldr	r1, [pc, #28]	@ (800a7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7c6:	4808      	ldr	r0, [pc, #32]	@ (800a7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7c8:	f7ff fea4 	bl	800a514 <USBD_GetString>
 800a7cc:	e004      	b.n	800a7d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	4904      	ldr	r1, [pc, #16]	@ (800a7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7d2:	4805      	ldr	r0, [pc, #20]	@ (800a7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7d4:	f7ff fe9e 	bl	800a514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d8:	4b02      	ldr	r3, [pc, #8]	@ (800a7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000c28 	.word	0x20000c28
 800a7e8:	0800aef4 	.word	0x0800aef4

0800a7ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d105      	bne.n	800a80a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4907      	ldr	r1, [pc, #28]	@ (800a820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a802:	4808      	ldr	r0, [pc, #32]	@ (800a824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a804:	f7ff fe86 	bl	800a514 <USBD_GetString>
 800a808:	e004      	b.n	800a814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	4904      	ldr	r1, [pc, #16]	@ (800a820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a80e:	4805      	ldr	r0, [pc, #20]	@ (800a824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a810:	f7ff fe80 	bl	800a514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a814:	4b02      	ldr	r3, [pc, #8]	@ (800a820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20000c28 	.word	0x20000c28
 800a824:	0800af00 	.word	0x0800af00

0800a828 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a82e:	4b0f      	ldr	r3, [pc, #60]	@ (800a86c <Get_SerialNum+0x44>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a834:	4b0e      	ldr	r3, [pc, #56]	@ (800a870 <Get_SerialNum+0x48>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a83a:	4b0e      	ldr	r3, [pc, #56]	@ (800a874 <Get_SerialNum+0x4c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d009      	beq.n	800a862 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a84e:	2208      	movs	r2, #8
 800a850:	4909      	ldr	r1, [pc, #36]	@ (800a878 <Get_SerialNum+0x50>)
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 f814 	bl	800a880 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a858:	2204      	movs	r2, #4
 800a85a:	4908      	ldr	r1, [pc, #32]	@ (800a87c <Get_SerialNum+0x54>)
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f000 f80f 	bl	800a880 <IntToUnicode>
  }
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	1ffff7ac 	.word	0x1ffff7ac
 800a870:	1ffff7b0 	.word	0x1ffff7b0
 800a874:	1ffff7b4 	.word	0x1ffff7b4
 800a878:	200002a6 	.word	0x200002a6
 800a87c:	200002b6 	.word	0x200002b6

0800a880 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]
 800a896:	e027      	b.n	800a8e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	0f1b      	lsrs	r3, r3, #28
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d80b      	bhi.n	800a8b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	0f1b      	lsrs	r3, r3, #28
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3230      	adds	r2, #48	@ 0x30
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e00a      	b.n	800a8ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	0f1b      	lsrs	r3, r3, #28
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3237      	adds	r2, #55	@ 0x37
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	3301      	adds	r3, #1
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	75fb      	strb	r3, [r7, #23]
 800a8e8:	7dfa      	ldrb	r2, [r7, #23]
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d3d3      	bcc.n	800a898 <IntToUnicode+0x18>
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	@ 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a1c      	ldr	r2, [pc, #112]	@ (800a990 <HAL_PCD_MspInit+0x90>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d131      	bne.n	800a986 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a922:	4b1c      	ldr	r3, [pc, #112]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	4a1b      	ldr	r2, [pc, #108]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a92c:	6153      	str	r3, [r2, #20]
 800a92e:	4b19      	ldr	r3, [pc, #100]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800a93a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a93e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a940:	2302      	movs	r3, #2
 800a942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a948:	2303      	movs	r3, #3
 800a94a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a94c:	230e      	movs	r3, #14
 800a94e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	4619      	mov	r1, r3
 800a956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a95a:	f7f7 fa6d 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a95e:	4b0d      	ldr	r3, [pc, #52]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	4a0c      	ldr	r2, [pc, #48]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a968:	61d3      	str	r3, [r2, #28]
 800a96a:	4b0a      	ldr	r3, [pc, #40]	@ (800a994 <HAL_PCD_MspInit+0x94>)
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800a976:	2200      	movs	r2, #0
 800a978:	2105      	movs	r1, #5
 800a97a:	2014      	movs	r0, #20
 800a97c:	f7f6 ffa1 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a980:	2014      	movs	r0, #20
 800a982:	f7f6 ffba 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a986:	bf00      	nop
 800a988:	3728      	adds	r7, #40	@ 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	40005c00 	.word	0x40005c00
 800a994:	40021000 	.word	0x40021000

0800a998 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	f7fe fe7e 	bl	80096b0 <USBD_LL_SetupStage>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	440b      	add	r3, r1
 800a9dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f7fe feb0 	bl	800974a <USBD_LL_DataOutStage>
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800aa04:	78fa      	ldrb	r2, [r7, #3]
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	440b      	add	r3, r1
 800aa12:	3324      	adds	r3, #36	@ 0x24
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f7fe ff07 	bl	800982c <USBD_LL_DataInStage>
}
 800aa1e:	bf00      	nop
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff f81a 	bl	8009a6e <USBD_LL_SOF>
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	795b      	ldrb	r3, [r3, #5]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d001      	beq.n	800aa5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa56:	f7f5 fe57 	bl	8000708 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aa60:	7bfa      	ldrb	r2, [r7, #15]
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe ffc7 	bl	80099f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe ff80 	bl	8009976 <USBD_LL_Reset>
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe ffc2 	bl	8009a18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7a5b      	ldrb	r3, [r3, #9]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d005      	beq.n	800aaa8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa9c:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <HAL_PCD_SuspendCallback+0x30>)
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	4a03      	ldr	r2, [pc, #12]	@ (800aab0 <HAL_PCD_SuspendCallback+0x30>)
 800aaa2:	f043 0306 	orr.w	r3, r3, #6
 800aaa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	e000ed00 	.word	0xe000ed00

0800aab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe ffbd 	bl	8009a42 <USBD_LL_Resume>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aad8:	4a1f      	ldr	r2, [pc, #124]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aae4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aae8:	4b1b      	ldr	r3, [pc, #108]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aaea:	4a1c      	ldr	r2, [pc, #112]	@ (800ab5c <USBD_LL_Init+0x8c>)
 800aaec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aaee:	4b1a      	ldr	r3, [pc, #104]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aaf4:	4b18      	ldr	r3, [pc, #96]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aafa:	4b17      	ldr	r3, [pc, #92]	@ (800ab58 <USBD_LL_Init+0x88>)
 800aafc:	2202      	movs	r2, #2
 800aafe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab00:	4b15      	ldr	r3, [pc, #84]	@ (800ab58 <USBD_LL_Init+0x88>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab06:	4b14      	ldr	r3, [pc, #80]	@ (800ab58 <USBD_LL_Init+0x88>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab0c:	4812      	ldr	r0, [pc, #72]	@ (800ab58 <USBD_LL_Init+0x88>)
 800ab0e:	f7f7 fd33 	bl	8002578 <HAL_PCD_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab18:	f7f5 fdf6 	bl	8000708 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab22:	2318      	movs	r3, #24
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	f7f9 f994 	bl	8003e54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab32:	2358      	movs	r3, #88	@ 0x58
 800ab34:	2200      	movs	r2, #0
 800ab36:	2180      	movs	r1, #128	@ 0x80
 800ab38:	f7f9 f98c 	bl	8003e54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab46:	2200      	movs	r2, #0
 800ab48:	2181      	movs	r1, #129	@ 0x81
 800ab4a:	f7f9 f983 	bl	8003e54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20000e28 	.word	0x20000e28
 800ab5c:	40005c00 	.word	0x40005c00

0800ab60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f7 fdc5 	bl	8002706 <HAL_PCD_Start>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f940 	bl	800ae08 <USBD_Get_USB_Status>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4611      	mov	r1, r2
 800aba2:	461a      	mov	r2, r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	70fb      	strb	r3, [r7, #3]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70bb      	strb	r3, [r7, #2]
 800abac:	4613      	mov	r3, r2
 800abae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abbe:	78bb      	ldrb	r3, [r7, #2]
 800abc0:	883a      	ldrh	r2, [r7, #0]
 800abc2:	78f9      	ldrb	r1, [r7, #3]
 800abc4:	f7f7 febd 	bl	8002942 <HAL_PCD_EP_Open>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f91a 	bl	800ae08 <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abfc:	78fa      	ldrb	r2, [r7, #3]
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f7 fefb 	bl	80029fc <HAL_PCD_EP_Close>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f8fb 	bl	800ae08 <USBD_Get_USB_Status>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f7 ff8c 	bl	8002b5c <HAL_PCD_EP_SetStall>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f8dc 	bl	800ae08 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac78:	78fa      	ldrb	r2, [r7, #3]
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f7 ffbf 	bl	8002c00 <HAL_PCD_EP_ClrStall>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f8bd 	bl	800ae08 <USBD_Get_USB_Status>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	da0b      	bge.n	800acd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	440b      	add	r3, r1
 800acca:	3312      	adds	r3, #18
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	e00b      	b.n	800ace8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acd6:	68f9      	ldr	r1, [r7, #12]
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	440b      	add	r3, r1
 800ace2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ace6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f7 fdf1 	bl	80028fa <HAL_PCD_SetAddress>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f872 	bl	800ae08 <USBD_Get_USB_Status>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	460b      	mov	r3, r1
 800ad40:	72fb      	strb	r3, [r7, #11]
 800ad42:	4613      	mov	r3, r2
 800ad44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad54:	893b      	ldrh	r3, [r7, #8]
 800ad56:	7af9      	ldrb	r1, [r7, #11]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f7f7 fec8 	bl	8002aee <HAL_PCD_EP_Transmit>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f84f 	bl	800ae08 <USBD_Get_USB_Status>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	607a      	str	r2, [r7, #4]
 800ad82:	461a      	mov	r2, r3
 800ad84:	460b      	mov	r3, r1
 800ad86:	72fb      	strb	r3, [r7, #11]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad9a:	893b      	ldrh	r3, [r7, #8]
 800ad9c:	7af9      	ldrb	r1, [r7, #11]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	f7f7 fe74 	bl	8002a8c <HAL_PCD_EP_Receive>
 800ada4:	4603      	mov	r3, r0
 800ada6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f82c 	bl	800ae08 <USBD_Get_USB_Status>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800adc8:	4b03      	ldr	r3, [pc, #12]	@ (800add8 <USBD_static_malloc+0x18>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	200010fc 	.word	0x200010fc

0800addc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]

}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d817      	bhi.n	800ae4c <USBD_Get_USB_Status+0x44>
 800ae1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <USBD_Get_USB_Status+0x1c>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae3b 	.word	0x0800ae3b
 800ae2c:	0800ae41 	.word	0x0800ae41
 800ae30:	0800ae47 	.word	0x0800ae47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
    break;
 800ae38:	e00b      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3e:	e008      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	e005      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae46:	2302      	movs	r3, #2
 800ae48:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4a:	e002      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae50:	bf00      	nop
  }
  return usb_status;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <memset>:
 800ae60:	4402      	add	r2, r0
 800ae62:	4603      	mov	r3, r0
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d100      	bne.n	800ae6a <memset+0xa>
 800ae68:	4770      	bx	lr
 800ae6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae6e:	e7f9      	b.n	800ae64 <memset+0x4>

0800ae70 <__libc_init_array>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4d0d      	ldr	r5, [pc, #52]	@ (800aea8 <__libc_init_array+0x38>)
 800ae74:	4c0d      	ldr	r4, [pc, #52]	@ (800aeac <__libc_init_array+0x3c>)
 800ae76:	1b64      	subs	r4, r4, r5
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	2600      	movs	r6, #0
 800ae7c:	42a6      	cmp	r6, r4
 800ae7e:	d109      	bne.n	800ae94 <__libc_init_array+0x24>
 800ae80:	4d0b      	ldr	r5, [pc, #44]	@ (800aeb0 <__libc_init_array+0x40>)
 800ae82:	4c0c      	ldr	r4, [pc, #48]	@ (800aeb4 <__libc_init_array+0x44>)
 800ae84:	f000 f818 	bl	800aeb8 <_init>
 800ae88:	1b64      	subs	r4, r4, r5
 800ae8a:	10a4      	asrs	r4, r4, #2
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	42a6      	cmp	r6, r4
 800ae90:	d105      	bne.n	800ae9e <__libc_init_array+0x2e>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae98:	4798      	blx	r3
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	e7ee      	b.n	800ae7c <__libc_init_array+0xc>
 800ae9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea2:	4798      	blx	r3
 800aea4:	3601      	adds	r6, #1
 800aea6:	e7f2      	b.n	800ae8e <__libc_init_array+0x1e>
 800aea8:	0800af48 	.word	0x0800af48
 800aeac:	0800af48 	.word	0x0800af48
 800aeb0:	0800af48 	.word	0x0800af48
 800aeb4:	0800af4c 	.word	0x0800af4c

0800aeb8 <_init>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	bf00      	nop
 800aebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aebe:	bc08      	pop	{r3}
 800aec0:	469e      	mov	lr, r3
 800aec2:	4770      	bx	lr

0800aec4 <_fini>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr
